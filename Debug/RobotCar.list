
RobotCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005104  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005324  08005324  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800532c  0800532c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800533c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000074  080053b0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080053b0  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020dc2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000329a  00000000  00000000  00040e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  00044100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  00044e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021805  00000000  00000000  00045ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa6c  00000000  00000000  000672dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d88f1  00000000  00000000  00071d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a63a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f0c  00000000  00000000  0014a6b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005274 	.word	0x08005274

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08005274 	.word	0x08005274

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92b 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f004 fae0 	bl	8004ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f943 	bl	80007b6 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90b 	bl	8000762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000274 	.word	0x20000274

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000274 	.word	0x20000274

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff8e 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff29 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff3e 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff8e 	bl	80006a0 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <__NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff31 	bl	8000610 <__NVIC_EnableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffa2 	bl	8000708 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff feda 	bl	8000594 <HAL_GetTick>
 80007e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	e099      	b.n	8000920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2202      	movs	r2, #2
 80007f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0201 	bic.w	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800080c:	e00f      	b.n	800082e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800080e:	f7ff fec1 	bl	8000594 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	2b05      	cmp	r3, #5
 800081a:	d908      	bls.n	800082e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2220      	movs	r2, #32
 8000820:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2203      	movs	r2, #3
 8000826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800082a:	2303      	movs	r3, #3
 800082c:	e078      	b.n	8000920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1e8      	bne.n	800080e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <HAL_DMA_Init+0x158>)
 8000848:	4013      	ands	r3, r2
 800084a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800085a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	4313      	orrs	r3, r2
 800087e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000884:	2b04      	cmp	r3, #4
 8000886:	d107      	bne.n	8000898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4313      	orrs	r3, r2
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f023 0307 	bic.w	r3, r3, #7
 80008ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d117      	bne.n	80008f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00e      	beq.n	80008f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 fa99 	bl	8000e0c <DMA_CheckFifoParam>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d008      	beq.n	80008f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2240      	movs	r2, #64	; 0x40
 80008e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80008ee:	2301      	movs	r3, #1
 80008f0:	e016      	b.n	8000920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f000 fa50 	bl	8000da0 <DMA_CalcBaseAndBitshift>
 8000900:	4603      	mov	r3, r0
 8000902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000908:	223f      	movs	r2, #63	; 0x3f
 800090a:	409a      	lsls	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	f010803f 	.word	0xf010803f

0800092c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800094a:	2b01      	cmp	r3, #1
 800094c:	d101      	bne.n	8000952 <HAL_DMA_Start_IT+0x26>
 800094e:	2302      	movs	r3, #2
 8000950:	e048      	b.n	80009e4 <HAL_DMA_Start_IT+0xb8>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b01      	cmp	r3, #1
 8000964:	d137      	bne.n	80009d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2202      	movs	r2, #2
 800096a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 f9e2 	bl	8000d44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000984:	223f      	movs	r2, #63	; 0x3f
 8000986:	409a      	lsls	r2, r3
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f042 0216 	orr.w	r2, r2, #22
 800099a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	695a      	ldr	r2, [r3, #20]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d007      	beq.n	80009c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 0208 	orr.w	r2, r2, #8
 80009c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0201 	orr.w	r2, r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e005      	b.n	80009e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009de:	2302      	movs	r3, #2
 80009e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d004      	beq.n	8000a0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00c      	b.n	8000a24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 0201 	bic.w	r2, r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a3c:	4b92      	ldr	r3, [pc, #584]	; (8000c88 <HAL_DMA_IRQHandler+0x258>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a92      	ldr	r2, [pc, #584]	; (8000c8c <HAL_DMA_IRQHandler+0x25c>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	0a9b      	lsrs	r3, r3, #10
 8000a48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4013      	ands	r3, r2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d01a      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d013      	beq.n	8000a9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f022 0204 	bic.w	r2, r2, #4
 8000a82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a88:	2208      	movs	r2, #8
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a94:	f043 0201 	orr.w	r2, r3, #1
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d012      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00b      	beq.n	8000ad2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000abe:	2201      	movs	r2, #1
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aca:	f043 0202 	orr.w	r2, r3, #2
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	409a      	lsls	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4013      	ands	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d012      	beq.n	8000b08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af4:	2204      	movs	r2, #4
 8000af6:	409a      	lsls	r2, r3
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b00:	f043 0204 	orr.w	r2, r3, #4
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4013      	ands	r3, r2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d043      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d03c      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b2a:	2210      	movs	r2, #16
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d018      	beq.n	8000b72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d108      	bne.n	8000b60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d024      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	4798      	blx	r3
 8000b5e:	e01f      	b.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d01b      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	4798      	blx	r3
 8000b70:	e016      	b.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d107      	bne.n	8000b90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0208 	bic.w	r2, r2, #8
 8000b8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 808e 	beq.w	8000cce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0310 	and.w	r3, r3, #16
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 8086 	beq.w	8000cce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	d136      	bne.n	8000c48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0216 	bic.w	r2, r2, #22
 8000be8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d103      	bne.n	8000c0a <HAL_DMA_IRQHandler+0x1da>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0208 	bic.w	r2, r2, #8
 8000c18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c1e:	223f      	movs	r2, #63	; 0x3f
 8000c20:	409a      	lsls	r2, r3
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d07d      	beq.n	8000d3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	4798      	blx	r3
        }
        return;
 8000c46:	e078      	b.n	8000d3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d01c      	beq.n	8000c90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d108      	bne.n	8000c76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d030      	beq.n	8000cce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	4798      	blx	r3
 8000c74:	e02b      	b.n	8000cce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d027      	beq.n	8000cce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	4798      	blx	r3
 8000c86:	e022      	b.n	8000cce <HAL_DMA_IRQHandler+0x29e>
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10f      	bne.n	8000cbe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 0210 	bic.w	r2, r2, #16
 8000cac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d032      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d022      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0201 	bic.w	r2, r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d307      	bcc.n	8000d16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f2      	bne.n	8000cfa <HAL_DMA_IRQHandler+0x2ca>
 8000d14:	e000      	b.n	8000d18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	4798      	blx	r3
 8000d38:	e000      	b.n	8000d3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d3a:	bf00      	nop
    }
  }
}
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop

08000d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b40      	cmp	r3, #64	; 0x40
 8000d70:	d108      	bne.n	8000d84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d82:	e007      	b.n	8000d94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	60da      	str	r2, [r3, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	3b10      	subs	r3, #16
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <DMA_CalcBaseAndBitshift+0x64>)
 8000db2:	fba2 2303 	umull	r2, r3, r2, r3
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <DMA_CalcBaseAndBitshift+0x68>)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d909      	bls.n	8000de2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dd6:	f023 0303 	bic.w	r3, r3, #3
 8000dda:	1d1a      	adds	r2, r3, #4
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	659a      	str	r2, [r3, #88]	; 0x58
 8000de0:	e007      	b.n	8000df2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dea:	f023 0303 	bic.w	r3, r3, #3
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	aaaaaaab 	.word	0xaaaaaaab
 8000e08:	0800528c 	.word	0x0800528c

08000e0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d11f      	bne.n	8000e66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d855      	bhi.n	8000ed8 <DMA_CheckFifoParam+0xcc>
 8000e2c:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <DMA_CheckFifoParam+0x28>)
 8000e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	08000e45 	.word	0x08000e45
 8000e38:	08000e57 	.word	0x08000e57
 8000e3c:	08000e45 	.word	0x08000e45
 8000e40:	08000ed9 	.word	0x08000ed9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d045      	beq.n	8000edc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e54:	e042      	b.n	8000edc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e5e:	d13f      	bne.n	8000ee0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e64:	e03c      	b.n	8000ee0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e6e:	d121      	bne.n	8000eb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d836      	bhi.n	8000ee4 <DMA_CheckFifoParam+0xd8>
 8000e76:	a201      	add	r2, pc, #4	; (adr r2, 8000e7c <DMA_CheckFifoParam+0x70>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000e93 	.word	0x08000e93
 8000e84:	08000e8d 	.word	0x08000e8d
 8000e88:	08000ea5 	.word	0x08000ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e90:	e02f      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d024      	beq.n	8000ee8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ea2:	e021      	b.n	8000ee8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000eac:	d11e      	bne.n	8000eec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000eb2:	e01b      	b.n	8000eec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d902      	bls.n	8000ec0 <DMA_CheckFifoParam+0xb4>
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d003      	beq.n	8000ec6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000ebe:	e018      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8000ec4:	e015      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00e      	beq.n	8000ef0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8000ed6:	e00b      	b.n	8000ef0 <DMA_CheckFifoParam+0xe4>
      break;
 8000ed8:	bf00      	nop
 8000eda:	e00a      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000edc:	bf00      	nop
 8000ede:	e008      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ee0:	bf00      	nop
 8000ee2:	e006      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ee4:	bf00      	nop
 8000ee6:	e004      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ee8:	bf00      	nop
 8000eea:	e002      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;   
 8000eec:	bf00      	nop
 8000eee:	e000      	b.n	8000ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ef0:	bf00      	nop
    }
  } 
  
  return status; 
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e16b      	b.n	80011f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 815a 	bne.w	80011ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x4a>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	69b9      	ldr	r1, [r7, #24]
 8000f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0203 	and.w	r2, r3, #3
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fda:	2b11      	cmp	r3, #17
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80b4 	beq.w	80011ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b5f      	ldr	r3, [pc, #380]	; (8001208 <HAL_GPIO_Init+0x308>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a5e      	ldr	r2, [pc, #376]	; (8001208 <HAL_GPIO_Init+0x308>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <HAL_GPIO_Init+0x308>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a5a      	ldr	r2, [pc, #360]	; (800120c <HAL_GPIO_Init+0x30c>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a51      	ldr	r2, [pc, #324]	; (8001210 <HAL_GPIO_Init+0x310>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d02b      	beq.n	8001126 <HAL_GPIO_Init+0x226>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a50      	ldr	r2, [pc, #320]	; (8001214 <HAL_GPIO_Init+0x314>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d025      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x318>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_GPIO_Init+0x31c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x320>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x324>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x328>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x20e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_GPIO_Init+0x32c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x20a>
 8001106:	2307      	movs	r3, #7
 8001108:	e00e      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110a:	2308      	movs	r3, #8
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110e:	2306      	movs	r3, #6
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001126:	2300      	movs	r3, #0
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001138:	4934      	ldr	r1, [pc, #208]	; (800120c <HAL_GPIO_Init+0x30c>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116a:	4a31      	ldr	r2, [pc, #196]	; (8001230 <HAL_GPIO_Init+0x330>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001170:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <HAL_GPIO_Init+0x330>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <HAL_GPIO_Init+0x330>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <HAL_GPIO_Init+0x330>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_GPIO_Init+0x330>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	f67f ae90 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011fc:	bf00      	nop
 80011fe:	3724      	adds	r7, #36	; 0x24
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40021400 	.word	0x40021400
 8001228:	40021800 	.word	0x40021800
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e22d      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d075      	beq.n	800133e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	4ba3      	ldr	r3, [pc, #652]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4ba0      	ldr	r3, [pc, #640]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b9d      	ldr	r3, [pc, #628]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b99      	ldr	r3, [pc, #612]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <HAL_RCC_OscConfig+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d157      	bne.n	800133c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e208      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x74>
 800129a:	4b91      	ldr	r3, [pc, #580]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a90      	ldr	r2, [pc, #576]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a8a      	ldr	r2, [pc, #552]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a87      	ldr	r2, [pc, #540]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012cc:	4b84      	ldr	r3, [pc, #528]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a83      	ldr	r2, [pc, #524]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a80      	ldr	r2, [pc, #512]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff f952 	bl	8000594 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff f94e 	bl	8000594 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1cd      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b76      	ldr	r3, [pc, #472]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff f93e 	bl	8000594 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff f93a 	bl	8000594 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1b9      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b6c      	ldr	r3, [pc, #432]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0xe8>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b62      	ldr	r3, [pc, #392]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e18d      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b56      	ldr	r3, [pc, #344]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4952      	ldr	r1, [pc, #328]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <HAL_RCC_OscConfig+0x2b0>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff f8f3 	bl	8000594 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff f8ef 	bl	8000594 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e16e      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4940      	ldr	r1, [pc, #256]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <HAL_RCC_OscConfig+0x2b0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff f8d2 	bl	8000594 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff f8ce 	bl	8000594 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e14d      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d030      	beq.n	8001480 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d016      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff f8b2 	bl	8000594 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff f8ae 	bl	8000594 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e12d      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x200>
 8001452:	e015      	b.n	8001480 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_RCC_OscConfig+0x2b4>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff f89b 	bl	8000594 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff f897 	bl	8000594 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e116      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a0 	beq.w	80015ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_RCC_OscConfig+0x2b8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d121      	bne.n	800150e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_RCC_OscConfig+0x2b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_RCC_OscConfig+0x2b8>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d6:	f7ff f85d 	bl	8000594 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	e011      	b.n	8001502 <HAL_RCC_OscConfig+0x2ce>
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	42470000 	.word	0x42470000
 80014e8:	42470e80 	.word	0x42470e80
 80014ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f0:	f7ff f850 	bl	8000594 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0cf      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x2f0>
 8001516:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a65      	ldr	r2, [pc, #404]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	e01c      	b.n	800155e <HAL_RCC_OscConfig+0x32a>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x312>
 800152c:	4b60      	ldr	r3, [pc, #384]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a5f      	ldr	r2, [pc, #380]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a5c      	ldr	r2, [pc, #368]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
 8001544:	e00b      	b.n	800155e <HAL_RCC_OscConfig+0x32a>
 8001546:	4b5a      	ldr	r3, [pc, #360]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a59      	ldr	r2, [pc, #356]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	4b57      	ldr	r3, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a56      	ldr	r2, [pc, #344]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001566:	f7ff f815 	bl	8000594 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff f811 	bl	8000594 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e08e      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ee      	beq.n	800156e <HAL_RCC_OscConfig+0x33a>
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7fe ffff 	bl	8000594 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7fe fffb 	bl	8000594 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e078      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d105      	bne.n	80015ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a3a      	ldr	r2, [pc, #232]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 80015c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d064      	beq.n	80016a0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d05c      	beq.n	800169c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d141      	bne.n	800166e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <HAL_RCC_OscConfig+0x480>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7fe ffd0 	bl	8000594 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7fe ffcc 	bl	8000594 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e04b      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	491d      	ldr	r1, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_RCC_OscConfig+0x480>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7fe ffa5 	bl	8000594 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7fe ffa1 	bl	8000594 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e020      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x41a>
 800166c:	e018      	b.n	80016a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_RCC_OscConfig+0x480>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7fe ff8e 	bl	8000594 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7fe ff8a 	bl	8000594 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e009      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_RCC_OscConfig+0x47c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x448>
 800169a:	e001      	b.n	80016a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40007000 	.word	0x40007000
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470060 	.word	0x42470060

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0ca      	b.n	8001862 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d90c      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b62      	ldr	r3, [pc, #392]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0b6      	b.n	8001862 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800170c:	4b58      	ldr	r3, [pc, #352]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a57      	ldr	r2, [pc, #348]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001724:	4b52      	ldr	r3, [pc, #328]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a51      	ldr	r2, [pc, #324]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800172e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	494c      	ldr	r1, [pc, #304]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d044      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d119      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07d      	b.n	8001862 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d003      	beq.n	8001776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	2b03      	cmp	r3, #3
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06d      	b.n	8001862 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e065      	b.n	8001862 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f023 0203 	bic.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4933      	ldr	r1, [pc, #204]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a8:	f7fe fef4 	bl	8000594 <HAL_GetTick>
 80017ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7fe fef0 	bl	8000594 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e04d      	b.n	8001862 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 020c 	and.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1eb      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d20c      	bcs.n	8001800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e030      	b.n	8001862 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4915      	ldr	r1, [pc, #84]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	490d      	ldr	r1, [pc, #52]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800183e:	f000 f81d 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8001842:	4601      	mov	r1, r0
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	fa21 f303 	lsr.w	r3, r1, r3
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800185a:	2000      	movs	r0, #0
 800185c:	f7fe fe56 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00
 8001870:	40023800 	.word	0x40023800
 8001874:	0800530c 	.word	0x0800530c
 8001878:	20000008 	.word	0x20000008

0800187c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001892:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b04      	cmp	r3, #4
 800189c:	d007      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x32>
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d008      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x38>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 808d 	bne.w	80019c2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018aa:	60bb      	str	r3, [r7, #8]
       break;
 80018ac:	e08c      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ae:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80018b0:	60bb      	str	r3, [r7, #8]
      break;
 80018b2:	e089      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b4:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018be:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d023      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	f04f 0400 	mov.w	r4, #0
 80018d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	ea03 0501 	and.w	r5, r3, r1
 80018e0:	ea04 0602 	and.w	r6, r4, r2
 80018e4:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80018e6:	fb02 f106 	mul.w	r1, r2, r6
 80018ea:	2200      	movs	r2, #0
 80018ec:	fb02 f205 	mul.w	r2, r2, r5
 80018f0:	440a      	add	r2, r1
 80018f2:	493a      	ldr	r1, [pc, #232]	; (80019dc <HAL_RCC_GetSysClockFreq+0x160>)
 80018f4:	fba5 0101 	umull	r0, r1, r5, r1
 80018f8:	1853      	adds	r3, r2, r1
 80018fa:	4619      	mov	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f04f 0400 	mov.w	r4, #0
 8001902:	461a      	mov	r2, r3
 8001904:	4623      	mov	r3, r4
 8001906:	f7fe fc5f 	bl	80001c8 <__aeabi_uldivmod>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e049      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	f04f 0400 	mov.w	r4, #0
 800191c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	ea03 0501 	and.w	r5, r3, r1
 8001928:	ea04 0602 	and.w	r6, r4, r2
 800192c:	4629      	mov	r1, r5
 800192e:	4632      	mov	r2, r6
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	f04f 0400 	mov.w	r4, #0
 8001938:	0154      	lsls	r4, r2, #5
 800193a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800193e:	014b      	lsls	r3, r1, #5
 8001940:	4619      	mov	r1, r3
 8001942:	4622      	mov	r2, r4
 8001944:	1b49      	subs	r1, r1, r5
 8001946:	eb62 0206 	sbc.w	r2, r2, r6
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	f04f 0400 	mov.w	r4, #0
 8001952:	0194      	lsls	r4, r2, #6
 8001954:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001958:	018b      	lsls	r3, r1, #6
 800195a:	1a5b      	subs	r3, r3, r1
 800195c:	eb64 0402 	sbc.w	r4, r4, r2
 8001960:	f04f 0100 	mov.w	r1, #0
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	00e2      	lsls	r2, r4, #3
 800196a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800196e:	00d9      	lsls	r1, r3, #3
 8001970:	460b      	mov	r3, r1
 8001972:	4614      	mov	r4, r2
 8001974:	195b      	adds	r3, r3, r5
 8001976:	eb44 0406 	adc.w	r4, r4, r6
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	02a2      	lsls	r2, r4, #10
 8001984:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001988:	0299      	lsls	r1, r3, #10
 800198a:	460b      	mov	r3, r1
 800198c:	4614      	mov	r4, r2
 800198e:	4618      	mov	r0, r3
 8001990:	4621      	mov	r1, r4
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f04f 0400 	mov.w	r4, #0
 8001998:	461a      	mov	r2, r3
 800199a:	4623      	mov	r3, r4
 800199c:	f7fe fc14 	bl	80001c8 <__aeabi_uldivmod>
 80019a0:	4603      	mov	r3, r0
 80019a2:	460c      	mov	r4, r1
 80019a4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0c1b      	lsrs	r3, r3, #16
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	3301      	adds	r3, #1
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	60bb      	str	r3, [r7, #8]
      break;
 80019c0:	e002      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019c4:	60bb      	str	r3, [r7, #8]
      break;
 80019c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c8:	68bb      	ldr	r3, [r7, #8]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	017d7840 	.word	0x017d7840

080019e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019fc:	f7ff fff0 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a00:	4601      	mov	r1, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0a9b      	lsrs	r3, r3, #10
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	0800531c 	.word	0x0800531c

08001a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a24:	f7ff ffdc 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a28:	4601      	mov	r1, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0b5b      	lsrs	r3, r3, #13
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	0800531c 	.word	0x0800531c

08001a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e03f      	b.n	8001ada <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f003 f84e 	bl	8004b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fe4b 	bl	8002728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b088      	sub	sp, #32
 8001ae6:	af02      	add	r7, sp, #8
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	f040 8083 	bne.w	8001c0a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_UART_Transmit+0x2e>
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e07b      	b.n	8001c0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_UART_Transmit+0x40>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e074      	b.n	8001c0c <HAL_UART_Transmit+0x12a>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2221      	movs	r2, #33	; 0x21
 8001b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b38:	f7fe fd2c 	bl	8000594 <HAL_GetTick>
 8001b3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	88fa      	ldrh	r2, [r7, #6]
 8001b48:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b4a:	e042      	b.n	8001bd2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b62:	d122      	bne.n	8001baa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fc59 	bl	8002426 <UART_WaitOnFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e046      	b.n	8001c0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d103      	bne.n	8001ba2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	e017      	b.n	8001bd2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	e013      	b.n	8001bd2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fc36 	bl	8002426 <UART_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e023      	b.n	8001c0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1b7      	bne.n	8001b4c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2200      	movs	r2, #0
 8001be4:	2140      	movs	r1, #64	; 0x40
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fc1d 	bl	8002426 <UART_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e00a      	b.n	8001c0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c0a:	2302      	movs	r3, #2
  }
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	f040 8090 	bne.w	8001d56 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_UART_Receive+0x2e>
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e088      	b.n	8001d58 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_UART_Receive+0x40>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e081      	b.n	8001d58 <HAL_UART_Receive+0x144>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2222      	movs	r2, #34	; 0x22
 8001c66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c6a:	f7fe fc93 	bl	8000594 <HAL_GetTick>
 8001c6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	88fa      	ldrh	r2, [r7, #6]
 8001c74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c7c:	e05c      	b.n	8001d38 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c94:	d12b      	bne.n	8001cee <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 fbc0 	bl	8002426 <UART_WaitOnFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e053      	b.n	8001d58 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10c      	bne.n	8001cd6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	e030      	b.n	8001d38 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	e024      	b.n	8001d38 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 fb94 	bl	8002426 <UART_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e027      	b.n	8001d58 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d108      	bne.n	8001d22 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6859      	ldr	r1, [r3, #4]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	60ba      	str	r2, [r7, #8]
 8001d1c:	b2ca      	uxtb	r2, r1
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e00a      	b.n	8001d38 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1c59      	adds	r1, r3, #1
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d19d      	bne.n	8001c7e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001d56:	2302      	movs	r3, #2
  }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d130      	bne.n	8001ddc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_UART_Transmit_IT+0x26>
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e029      	b.n	8001dde <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_UART_Transmit_IT+0x38>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e022      	b.n	8001dde <HAL_UART_Transmit_IT+0x7e>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	88fa      	ldrh	r2, [r7, #6]
 8001daa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	88fa      	ldrh	r2, [r7, #6]
 8001db0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2221      	movs	r2, #33	; 0x21
 8001dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	4613      	mov	r3, r2
 8001df6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d140      	bne.n	8001e86 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_UART_Receive_IT+0x26>
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e039      	b.n	8001e88 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_UART_Receive_IT+0x38>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e032      	b.n	8001e88 <HAL_UART_Receive_IT+0x9e>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	88fa      	ldrh	r2, [r7, #6]
 8001e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2222      	movs	r2, #34	; 0x22
 8001e46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e60:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0220 	orr.w	r2, r2, #32
 8001e80:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
  }
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d153      	bne.n	8001f56 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_UART_Transmit_DMA+0x26>
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e04c      	b.n	8001f58 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_UART_Transmit_DMA+0x38>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e045      	b.n	8001f58 <HAL_UART_Transmit_DMA+0xc4>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	88fa      	ldrh	r2, [r7, #6]
 8001ede:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2221      	movs	r2, #33	; 0x21
 8001ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <HAL_UART_Transmit_DMA+0xcc>)
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_UART_Transmit_DMA+0xd0>)
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_UART_Transmit_DMA+0xd4>)
 8001f0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	2200      	movs	r2, #0
 8001f12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3304      	adds	r3, #4
 8001f28:	461a      	mov	r2, r3
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	f7fe fcfe 	bl	800092c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f50:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
  }
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	080022a1 	.word	0x080022a1
 8001f64:	080022f3 	.word	0x080022f3
 8001f68:	08002393 	.word	0x08002393

08001f6c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d166      	bne.n	8002054 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_UART_Receive_DMA+0x26>
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e05f      	b.n	8002056 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_UART_Receive_DMA+0x38>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e058      	b.n	8002056 <HAL_UART_Receive_DMA+0xea>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	88fa      	ldrh	r2, [r7, #6]
 8001fb6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2222      	movs	r2, #34	; 0x22
 8001fc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_UART_Receive_DMA+0xf4>)
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd2:	4a24      	ldr	r2, [pc, #144]	; (8002064 <HAL_UART_Receive_DMA+0xf8>)
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fda:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_UART_Receive_DMA+0xfc>)
 8001fdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	f7fe fc95 	bl	800092c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800202e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800204e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	0800230f 	.word	0x0800230f
 8002064:	08002377 	.word	0x08002377
 8002068:	08002393 	.word	0x08002393

0800206c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10d      	bne.n	80020be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_UART_IRQHandler+0x52>
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fab5 	bl	8002626 <UART_Receive_IT>
      return;
 80020bc:	e0cc      	b.n	8002258 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80ab 	beq.w	800221c <HAL_UART_IRQHandler+0x1b0>
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_UART_IRQHandler+0x70>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80a0 	beq.w	800221c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_UART_IRQHandler+0x90>
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_UART_IRQHandler+0xb0>
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	f043 0202 	orr.w	r2, r3, #2
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_UART_IRQHandler+0xd0>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	f043 0204 	orr.w	r2, r3, #4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_UART_IRQHandler+0xf0>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002154:	f043 0208 	orr.w	r2, r3, #8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d078      	beq.n	8002256 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_UART_IRQHandler+0x112>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fa54 	bl	8002626 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <HAL_UART_IRQHandler+0x13a>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d031      	beq.n	800220a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f99d 	bl	80024e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	d123      	bne.n	8002202 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d013      	beq.n	80021fa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	4a22      	ldr	r2, [pc, #136]	; (8002260 <HAL_UART_IRQHandler+0x1f4>)
 80021d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fc04 	bl	80009ec <HAL_DMA_Abort_IT>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d016      	beq.n	8002218 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021f4:	4610      	mov	r0, r2
 80021f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	e00e      	b.n	8002218 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f846 	bl	800228c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002200:	e00a      	b.n	8002218 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f842 	bl	800228c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002208:	e006      	b.n	8002218 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f83e 	bl	800228c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002216:	e01e      	b.n	8002256 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002218:	bf00      	nop
    return;
 800221a:	e01c      	b.n	8002256 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_UART_IRQHandler+0x1cc>
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f98a 	bl	800254a <UART_Transmit_IT>
    return;
 8002236:	e00f      	b.n	8002258 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_UART_IRQHandler+0x1ec>
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f9d2 	bl	80025f6 <UART_EndTransmit_IT>
    return;
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002256:	bf00      	nop
  }
}
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	08002523 	.word	0x08002523

08002264 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d113      	bne.n	80022e4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80022e2:	e002      	b.n	80022ea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff ffbd 	bl	8002264 <HAL_UART_TxCpltCallback>
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff ffb9 	bl	8002278 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d11e      	bne.n	8002368 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800233e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f001 fd25 	bl	8003db8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f001 fd48 	bl	8003e1a <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b80      	cmp	r3, #128	; 0x80
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b21      	cmp	r3, #33	; 0x21
 80023c4:	d108      	bne.n	80023d8 <UART_DMAError+0x46>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2200      	movs	r2, #0
 80023d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80023d2:	68b8      	ldr	r0, [r7, #8]
 80023d4:	f000 f871 	bl	80024ba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b22      	cmp	r3, #34	; 0x22
 80023f8:	d108      	bne.n	800240c <UART_DMAError+0x7a>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2200      	movs	r2, #0
 8002404:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002406:	68b8      	ldr	r0, [r7, #8]
 8002408:	f000 f86d 	bl	80024e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002418:	68b8      	ldr	r0, [r7, #8]
 800241a:	f7ff ff37 	bl	800228c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4613      	mov	r3, r2
 8002434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002436:	e02c      	b.n	8002492 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243e:	d028      	beq.n	8002492 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <UART_WaitOnFlagUntilTimeout+0x30>
 8002446:	f7fe f8a5 	bl	8000594 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	429a      	cmp	r2, r3
 8002454:	d21d      	bcs.n	8002492 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002464:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e00f      	b.n	80024b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4013      	ands	r3, r2
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	429a      	cmp	r2, r3
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d0c3      	beq.n	8002438 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024d0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0201 	bic.w	r2, r2, #1
 800250c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fea5 	bl	800228c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b21      	cmp	r3, #33	; 0x21
 800255c:	d144      	bne.n	80025e8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002566:	d11a      	bne.n	800259e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800257c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	1c9a      	adds	r2, r3, #2
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	621a      	str	r2, [r3, #32]
 8002590:	e00e      	b.n	80025b0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	621a      	str	r2, [r3, #32]
 800259c:	e008      	b.n	80025b0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	1c59      	adds	r1, r3, #1
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6211      	str	r1, [r2, #32]
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4619      	mov	r1, r3
 80025be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10f      	bne.n	80025e4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fe24 	bl	8002264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b22      	cmp	r3, #34	; 0x22
 8002638:	d171      	bne.n	800271e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002642:	d123      	bne.n	800268c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10e      	bne.n	8002670 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	b29b      	uxth	r3, r3
 800265a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	1c9a      	adds	r2, r3, #2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
 800266e:	e029      	b.n	80026c4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	b29b      	uxth	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
 800268a:	e01b      	b.n	80026c4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6858      	ldr	r0, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	1c59      	adds	r1, r3, #1
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6291      	str	r1, [r2, #40]	; 0x28
 80026a4:	b2c2      	uxtb	r2, r0
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e00c      	b.n	80026c4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	1c58      	adds	r0, r3, #1
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	6288      	str	r0, [r1, #40]	; 0x28
 80026bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4619      	mov	r1, r3
 80026d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d120      	bne.n	800271a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0220 	bic.w	r2, r2, #32
 80026e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f001 fb51 	bl	8003db8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e002      	b.n	8002720 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e000      	b.n	8002720 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
  }
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002768:	f023 030c 	bic.w	r3, r3, #12
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	430b      	orrs	r3, r1
 8002774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002794:	f040 80e4 	bne.w	8002960 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4aab      	ldr	r2, [pc, #684]	; (8002a4c <UART_SetConfig+0x324>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <UART_SetConfig+0x84>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4aaa      	ldr	r2, [pc, #680]	; (8002a50 <UART_SetConfig+0x328>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d16c      	bne.n	8002886 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027ac:	f7ff f938 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	009a      	lsls	r2, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	4aa3      	ldr	r2, [pc, #652]	; (8002a54 <UART_SetConfig+0x32c>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	011c      	lsls	r4, r3, #4
 80027d0:	f7ff f926 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	009a      	lsls	r2, r3, #2
 80027de:	441a      	add	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80027ea:	f7ff f919 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009a      	lsls	r2, r3, #2
 80027f8:	441a      	add	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	4a93      	ldr	r2, [pc, #588]	; (8002a54 <UART_SetConfig+0x32c>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2264      	movs	r2, #100	; 0x64
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	1aeb      	subs	r3, r5, r3
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	3332      	adds	r3, #50	; 0x32
 8002818:	4a8e      	ldr	r2, [pc, #568]	; (8002a54 <UART_SetConfig+0x32c>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002826:	441c      	add	r4, r3
 8002828:	f7ff f8fa 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 800282c:	4602      	mov	r2, r0
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	009a      	lsls	r2, r3, #2
 8002836:	441a      	add	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002842:	f7ff f8ed 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8002846:	4602      	mov	r2, r0
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009a      	lsls	r2, r3, #2
 8002850:	441a      	add	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	4a7d      	ldr	r2, [pc, #500]	; (8002a54 <UART_SetConfig+0x32c>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2264      	movs	r2, #100	; 0x64
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	1aeb      	subs	r3, r5, r3
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	3332      	adds	r3, #50	; 0x32
 8002870:	4a78      	ldr	r2, [pc, #480]	; (8002a54 <UART_SetConfig+0x32c>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 0207 	and.w	r2, r3, #7
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4422      	add	r2, r4
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e154      	b.n	8002b30 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002886:	f7ff f8b7 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 800288a:	4602      	mov	r2, r0
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009a      	lsls	r2, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	4a6c      	ldr	r2, [pc, #432]	; (8002a54 <UART_SetConfig+0x32c>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	011c      	lsls	r4, r3, #4
 80028aa:	f7ff f8a5 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009a      	lsls	r2, r3, #2
 80028b8:	441a      	add	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80028c4:	f7ff f898 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	009a      	lsls	r2, r3, #2
 80028d2:	441a      	add	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	4a5d      	ldr	r2, [pc, #372]	; (8002a54 <UART_SetConfig+0x32c>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	2264      	movs	r2, #100	; 0x64
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	1aeb      	subs	r3, r5, r3
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	3332      	adds	r3, #50	; 0x32
 80028f2:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <UART_SetConfig+0x32c>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002900:	441c      	add	r4, r3
 8002902:	f7ff f879 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002906:	4602      	mov	r2, r0
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009a      	lsls	r2, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fbb2 f5f3 	udiv	r5, r2, r3
 800291c:	f7ff f86c 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002920:	4602      	mov	r2, r0
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	009a      	lsls	r2, r3, #2
 800292a:	441a      	add	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4a47      	ldr	r2, [pc, #284]	; (8002a54 <UART_SetConfig+0x32c>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	2264      	movs	r2, #100	; 0x64
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	1aeb      	subs	r3, r5, r3
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	3332      	adds	r3, #50	; 0x32
 800294a:	4a42      	ldr	r2, [pc, #264]	; (8002a54 <UART_SetConfig+0x32c>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	f003 0207 	and.w	r2, r3, #7
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4422      	add	r2, r4
 800295c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800295e:	e0e7      	b.n	8002b30 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a39      	ldr	r2, [pc, #228]	; (8002a4c <UART_SetConfig+0x324>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <UART_SetConfig+0x24c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <UART_SetConfig+0x328>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d171      	bne.n	8002a58 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002974:	f7ff f854 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8002978:	4602      	mov	r2, r0
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	009a      	lsls	r2, r3, #2
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	4a31      	ldr	r2, [pc, #196]	; (8002a54 <UART_SetConfig+0x32c>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	011c      	lsls	r4, r3, #4
 8002998:	f7ff f842 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 800299c:	4602      	mov	r2, r0
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	009a      	lsls	r2, r3, #2
 80029a6:	441a      	add	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80029b2:	f7ff f835 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	009a      	lsls	r2, r3, #2
 80029c0:	441a      	add	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <UART_SetConfig+0x32c>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2264      	movs	r2, #100	; 0x64
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	1aeb      	subs	r3, r5, r3
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	3332      	adds	r3, #50	; 0x32
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <UART_SetConfig+0x32c>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ec:	441c      	add	r4, r3
 80029ee:	f7ff f817 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a08:	f7ff f80a 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <UART_SetConfig+0x32c>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2264      	movs	r2, #100	; 0x64
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	1aeb      	subs	r3, r5, r3
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <UART_SetConfig+0x32c>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	f003 020f 	and.w	r2, r3, #15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4422      	add	r2, r4
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	e071      	b.n	8002b30 <UART_SetConfig+0x408>
 8002a4c:	40011000 	.word	0x40011000
 8002a50:	40011400 	.word	0x40011400
 8002a54:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a58:	f7fe ffce 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	009a      	lsls	r2, r3, #2
 8002a66:	441a      	add	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <UART_SetConfig+0x410>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	011c      	lsls	r4, r3, #4
 8002a7c:	f7fe ffbc 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009a      	lsls	r2, r3, #2
 8002a8a:	441a      	add	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a96:	f7fe ffaf 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009a      	lsls	r2, r3, #2
 8002aa4:	441a      	add	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <UART_SetConfig+0x410>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2264      	movs	r2, #100	; 0x64
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	1aeb      	subs	r3, r5, r3
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	3332      	adds	r3, #50	; 0x32
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <UART_SetConfig+0x410>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad0:	441c      	add	r4, r3
 8002ad2:	f7fe ff91 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002aec:	f7fe ff84 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009a      	lsls	r2, r3, #2
 8002afa:	441a      	add	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <UART_SetConfig+0x410>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	2264      	movs	r2, #100	; 0x64
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	1aeb      	subs	r3, r5, r3
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	3332      	adds	r3, #50	; 0x32
 8002b1a:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <UART_SetConfig+0x410>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	f003 020f 	and.w	r2, r3, #15
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4422      	add	r2, r4
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	e7ff      	b.n	8002b30 <UART_SetConfig+0x408>
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdb0      	pop	{r4, r5, r7, pc}
 8002b38:	51eb851f 	.word	0x51eb851f

08002b3c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f805 	bl	8002b72 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
    }
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE13_Rb_tree_implISB_Lb1EEC1Ev>:

#if __cplusplus < 201103L
	  _Rb_tree_impl()
	  { }
#else
	  _Rb_tree_impl() = default;
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f87e 	bl	8002ca8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEC1Ev>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f886 	bl	8002cc0 <_ZNSt20_Rb_tree_key_compareISt4lessIP20__UART_HandleTypeDefEEC1Ev>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ffcb 	bl	8002b54 <_ZNSt15_Rb_tree_headerC1Ev>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ffe3 	bl	8002b9e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE13_Rb_tree_implISB_Lb1EEC1Ev>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ffeb 	bl	8002bc8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EEC1Ev>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_ZN3wyz23CRelateOfHandleAndCUartC1Ev>:

#include <CRelateOfHandleAndCUart.h>

namespace wyz {

CRelateOfHandleAndCUart::CRelateOfHandleAndCUart() {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ffeb 	bl	8002be2 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_ZN3wyz23CRelateOfHandleAndCUart3AddEPNS_5CUartEP20__UART_HandleTypeDef>:

CRelateOfHandleAndCUart::~CRelateOfHandleAndCUart() {
	// TODO Auto-generated destructor stub
}

void CRelateOfHandleAndCUart::Add(CUart* pUart,UART_HandleTypeDef* pHandle){
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
	this->m_HandleMap[pHandle] = pUart;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1d3a      	adds	r2, r7, #4
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f881 	bl	8002d30 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_ZN3wyz23CRelateOfHandleAndCUart6ExistsEP20__UART_HandleTypeDef>:

bool CRelateOfHandleAndCUart::Exists(UART_HandleTypeDef* pHandle){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
	return this->m_HandleMap.count(pHandle);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	463a      	mov	r2, r7
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 f8cb 	bl	8002de8 <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>:

CUart* CRelateOfHandleAndCUart::Get(UART_HandleTypeDef* pHandle){
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
	if (this->m_HandleMap.count(pHandle)) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	463a      	mov	r2, r7
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f8b6 	bl	8002de8 <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef+0x38>
		return this->m_HandleMap[pHandle];
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	463a      	mov	r2, r7
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f84c 	bl	8002d30 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e000      	b.n	8002ca0 <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef+0x3a>
	}else{
		return NULL;
 8002c9e:	2300      	movs	r3, #0
	}
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f8bd 	bl	8002e30 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEC1Ev>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_ZNSt20_Rb_tree_key_compareISt4lessIP20__UART_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
      { }
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1IvLb1EEES3_>:
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=true>
        constexpr tuple(const _Elements&... __elements)
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
      : _Inherited(__elements...) { }
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f805 	bl	8002cf4 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1ES3_>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6839      	ldr	r1, [r7, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f805 	bl	8002d12 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b08b      	sub	sp, #44	; 0x2c
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 8002d3a:	6839      	ldr	r1, [r7, #0]
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f88e 	bl	8002e5e <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE11lower_boundERS8_>
 8002d42:	4603      	mov	r3, r0
 8002d44:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f898 	bl	8002e7c <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE3endEv>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	f107 020c 	add.w	r2, r7, #12
 8002d54:	f107 0308 	add.w	r3, r7, #8
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f89b 	bl	8002e96 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d112      	bne.n	8002d8c <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0x5c>
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8a9 	bl	8002ebe <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE8key_compEv>
 8002d6c:	f107 0308 	add.w	r3, r7, #8
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f8b1 	bl	8002ed8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEdeEv>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f107 0310 	add.w	r3, r7, #16
 8002d7e:	6839      	ldr	r1, [r7, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 f8b7 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0x60>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0x62>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01b      	beq.n	8002dce <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0x9e>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8002d96:	687c      	ldr	r4, [r7, #4]
 8002d98:	f107 0208 	add.w	r2, r7, #8
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f8bb 	bl	8002f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1ERKSt17_Rb_tree_iteratorIS7_E>
 8002da8:	f107 0318 	add.w	r3, r7, #24
 8002dac:	6839      	ldr	r1, [r7, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ff91 	bl	8002cd6 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1IvLb1EEES3_>
 8002db4:	f107 0218 	add.w	r2, r7, #24
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0xb4>)
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f000 f8db 	bl	8002f80 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	60bb      	str	r3, [r7, #8]
					    std::tuple<const key_type&>(__k),
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8002dce:	f107 0308 	add.w	r3, r7, #8
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f880 	bl	8002ed8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEdeEv>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	3304      	adds	r3, #4
      }
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3724      	adds	r7, #36	; 0x24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}
 8002de4:	08005294 	.word	0x08005294

08002de8 <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f900 	bl	8002ffc <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f936 	bl	8003074 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	f107 020c 	add.w	r2, r7, #12
 8002e10:	f107 0308 	add.w	r3, r7, #8
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f93d 	bl	8003096 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_+0x3e>
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_+0x40>
 8002e26:	2301      	movs	r3, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE11lower_boundERS8_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f94f 	bl	8003110 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11lower_boundERS3_>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f959 	bl	800313e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE8key_compEv>:
      key_comp() const
 8002ebe:	b590      	push	{r4, r7, lr}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f949 	bl	8003160 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8key_compEv>
 8002ece:	4623      	mov	r3, r4
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd90      	pop	{r4, r7, pc}

08002ed8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 f945 	bl	8003174 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 8002eea:	4603      	mov	r3, r0
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	bf34      	ite	cc
 8002f0c:	2301      	movcc	r3, #1
 8002f0e:	2300      	movcs	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1ERKSt17_Rb_tree_iteratorIS7_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ffd5 	bl	8002f3e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002f94:	4604      	mov	r4, r0
 8002f96:	6838      	ldr	r0, [r7, #0]
 8002f98:	f7ff ffdc 	bl	8002f54 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002f9c:	4605      	mov	r5, r0
 8002f9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa0:	f7ff ffe3 	bl	8002f6a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	462a      	mov	r2, r5
 8002fa8:	4621      	mov	r1, r4
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f8f0 	bl	8003190 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEEPSt13_Rb_tree_nodeIS7_EDpOT_>
 8002fb0:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8002fb2:	69f8      	ldr	r0, [r7, #28]
 8002fb4:	f000 fa82 	bl	80034bc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f107 0010 	add.w	r0, r7, #16
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	f000 f958 	bl	8003276 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_>

	    if (__res.second)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8002fcc:	6939      	ldr	r1, [r7, #16]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fa85 	bl	80034e2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	e00b      	b.n	8002ff4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x74>

	    _M_drop_node(__z);
 8002fdc:	69f9      	ldr	r1, [r7, #28]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f885 	bl	80030ee <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS7_E>
	    return iterator(__res.first);
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	f107 0318 	add.w	r3, r7, #24
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fab5 	bl	800355c <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 8002ff2:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bdb0      	pop	{r4, r5, r7, pc}

08002ffc <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fab7 	bl	800357a <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>
 800300c:	4604      	mov	r4, r0
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fabf 	bl	8003592 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 8003014:	4602      	mov	r2, r0
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4621      	mov	r1, r4
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fac5 	bl	80035aa <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_>
 8003020:	4603      	mov	r3, r0
 8003022:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f825 	bl	8003074 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>
 800302a:	4603      	mov	r3, r0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	f107 020c 	add.w	r2, r7, #12
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f82c 	bl	8003096 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>
 800303e:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k, 
					_S_key(__j._M_node))) ? end() : __j;
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10d      	bne.n	8003060 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k, 
 8003044:	687c      	ldr	r4, [r7, #4]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fadf 	bl	800360c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800304e:	4603      	mov	r3, r0
 8003050:	461a      	mov	r2, r3
 8003052:	6839      	ldr	r1, [r7, #0]
 8003054:	4620      	mov	r0, r4
 8003056:	f7ff ff4d 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f807 	bl	8003074 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>
 8003066:	4603      	mov	r3, r0
 8003068:	e000      	b.n	800306c <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_+0x70>
 800306a:	68bb      	ldr	r3, [r7, #8]
    }
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bd90      	pop	{r4, r7, pc}

08003074 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fad3 	bl	8003632 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPKSt18_Rb_tree_node_base>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS7_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 faa8 	bl	8003650 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS7_E>
	_M_put_node(__p);
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fab9 	bl	800367a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS7_E>
      }
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fe93 	bl	8002e46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>
 8003120:	4604      	mov	r4, r0
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fabb 	bl	800369e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 8003128:	4602      	mov	r2, r0
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	4621      	mov	r1, r4
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fac1 	bl	80036b6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_>
 8003134:	4603      	mov	r3, r0
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}

0800313e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1d1a      	adds	r2, r3, #4
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fa03 	bl	800355c <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8key_compEv>:
      key_comp() const
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>:
      _M_valptr()
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3310      	adds	r3, #16
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fac9 	bl	8003718 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE6_M_ptrEv>
 8003186:	4603      	mov	r3, r0
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEEPSt13_Rb_tree_nodeIS7_EDpOT_>:
        _M_create_node(_Args&&... __args)
 8003190:	b5b0      	push	{r4, r5, r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fac6 	bl	8003730 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_get_nodeEv>
 80031a4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80031a6:	68b8      	ldr	r0, [r7, #8]
 80031a8:	f7ff fec9 	bl	8002f3e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80031ac:	4604      	mov	r4, r0
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff fed0 	bl	8002f54 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80031b4:	4605      	mov	r5, r0
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	f7ff fed7 	bl	8002f6a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80031bc:	4603      	mov	r3, r0
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	462b      	mov	r3, r5
 80031c2:	4622      	mov	r2, r4
 80031c4:	6979      	ldr	r1, [r7, #20]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fac3 	bl	8003752 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEEvPSt13_Rb_tree_nodeIS7_EDpOT_>
	  return __tmp;
 80031cc:	697b      	ldr	r3, [r7, #20]
	}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bdb0      	pop	{r4, r5, r7, pc}

080031d6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f809 	bl	8003202 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80031f0:	4603      	mov	r3, r0
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003224:	68b8      	ldr	r0, [r7, #8]
 8003226:	f7ff ffec 	bl	8003202 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800322a:	4603      	mov	r3, r0
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffe5 	bl	8003202 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003238:	4603      	mov	r3, r0
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	f7ff ffd3 	bl	8003202 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800325c:	4603      	mov	r3, r0
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003276:	b590      	push	{r4, r7, lr}
 8003278:	b08d      	sub	sp, #52	; 0x34
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fa90 	bl	80037ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE13_M_const_castEv>
 800328c:	4603      	mov	r3, r0
 800328e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003290:	69bc      	ldr	r4, [r7, #24]
 8003292:	68b8      	ldr	r0, [r7, #8]
 8003294:	f000 fa03 	bl	800369e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 8003298:	4603      	mov	r3, r0
 800329a:	429c      	cmp	r4, r3
 800329c:	bf0c      	ite	eq
 800329e:	2301      	moveq	r3, #1
 80032a0:	2300      	movne	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d030      	beq.n	800330a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x94>
	  if (size() > 0
 80032a8:	68b8      	ldr	r0, [r7, #8]
 80032aa:	f000 fa90 	bl	80037ce <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4sizeEv>
 80032ae:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x66>
 80032b4:	68bc      	ldr	r4, [r7, #8]
 80032b6:	68b8      	ldr	r0, [r7, #8]
 80032b8:	f000 fa95 	bl	80037e6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>
 80032bc:	4603      	mov	r3, r0
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f9a3 	bl	800360c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80032c6:	4603      	mov	r3, r0
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4620      	mov	r0, r4
 80032ce:	f7ff fe11 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x66>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x68>
 80032dc:	2300      	movs	r3, #0
	  if (size() > 0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	68b8      	ldr	r0, [r7, #8]
 80032e8:	f000 fa7d 	bl	80037e6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f107 031c 	add.w	r3, r7, #28
 80032f2:	4619      	mov	r1, r3
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff ff6e 	bl	80031d6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80032fa:	e0db      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fa9f 	bl	8003846 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_>
 8003308:	e0d4      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800330a:	68bc      	ldr	r4, [r7, #8]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f97c 	bl	800360c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	4620      	mov	r0, r4
 800331c:	f7ff fdea 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d057      	beq.n	80033d6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x160>
	  iterator __before = __pos;
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800332a:	69bc      	ldr	r4, [r7, #24]
 800332c:	68b8      	ldr	r0, [r7, #8]
 800332e:	f000 fb0f 	bl	8003950 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_leftmostEv>
 8003332:	4603      	mov	r3, r0
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	429c      	cmp	r4, r3
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003344:	68b8      	ldr	r0, [r7, #8]
 8003346:	f000 fb03 	bl	8003950 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_leftmostEv>
 800334a:	4604      	mov	r4, r0
 800334c:	68b8      	ldr	r0, [r7, #8]
 800334e:	f000 faff 	bl	8003950 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_leftmostEv>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	4621      	mov	r1, r4
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff ff5d 	bl	8003218 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800335e:	e0a9      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003360:	68bc      	ldr	r4, [r7, #8]
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fafe 	bl	8003968 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEmmEv>
 800336c:	4603      	mov	r3, r0
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f94b 	bl	800360c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003376:	4603      	mov	r3, r0
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	4619      	mov	r1, r3
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff fdb9 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01f      	beq.n	80033c8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fe97 	bl	80030be <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf0c      	ite	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	2300      	movne	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x140>
		return _Res(0, __before._M_node);
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	f107 0214 	add.w	r2, r7, #20
 80033a8:	f107 0320 	add.w	r3, r7, #32
 80033ac:	4619      	mov	r1, r3
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff ff11 	bl	80031d6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 80033b4:	e07e      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80033b6:	f107 0218 	add.w	r2, r7, #24
 80033ba:	f107 0318 	add.w	r3, r7, #24
 80033be:	4619      	mov	r1, r3
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff ff29 	bl	8003218 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80033c6:	e075      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fa39 	bl	8003846 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_>
 80033d4:	e06e      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80033d6:	68bc      	ldr	r4, [r7, #8]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f916 	bl	800360c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80033e0:	4603      	mov	r3, r0
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	4619      	mov	r1, r3
 80033e6:	4620      	mov	r0, r4
 80033e8:	f7ff fd84 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d056      	beq.n	80034a0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x22a>
	  iterator __after = __pos;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80033f6:	69bc      	ldr	r4, [r7, #24]
 80033f8:	68b8      	ldr	r0, [r7, #8]
 80033fa:	f000 f9f4 	bl	80037e6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>
 80033fe:	4603      	mov	r3, r0
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429c      	cmp	r4, r3
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00c      	beq.n	800342a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8003410:	2300      	movs	r3, #0
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	68b8      	ldr	r0, [r7, #8]
 8003416:	f000 f9e6 	bl	80037e6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>
 800341a:	4602      	mov	r2, r0
 800341c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003420:	4619      	mov	r1, r3
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f7ff fed7 	bl	80031d6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003428:	e044      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800342a:	68bc      	ldr	r4, [r7, #8]
 800342c:	f107 0310 	add.w	r3, r7, #16
 8003430:	4618      	mov	r0, r3
 8003432:	f000 faaa 	bl	800398a <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEppEv>
 8003436:	4603      	mov	r3, r0
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f8e6 	bl	800360c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	6839      	ldr	r1, [r7, #0]
 8003446:	4620      	mov	r0, r4
 8003448:	f7ff fd54 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01f      	beq.n	8003492 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fe32 	bl	80030be <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 800346a:	2300      	movs	r3, #0
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
 800346e:	f107 0218 	add.w	r2, r7, #24
 8003472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003476:	4619      	mov	r1, r3
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff feac 	bl	80031d6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800347e:	e019      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8003480:	f107 0210 	add.w	r2, r7, #16
 8003484:	f107 0310 	add.w	r3, r7, #16
 8003488:	4619      	mov	r1, r3
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff fec4 	bl	8003218 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003490:	e010      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f9d4 	bl	8003846 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_>
 800349e:	e009      	b.n	80034b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80034a8:	f107 0318 	add.w	r3, r7, #24
 80034ac:	4619      	mov	r1, r3
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff fecb 	bl	800324a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	3734      	adds	r7, #52	; 0x34
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd90      	pop	{r4, r7, pc}

080034bc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>:
      _S_key(_Const_Link_type __x)
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa71 	bl	80039ac <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_valueEPKSt13_Rb_tree_nodeIS7_E>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa76 	bl	80039c4 <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEclERKS7_>
 80034d8:	4603      	mov	r3, r0
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80034e2:	b5b0      	push	{r4, r5, r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d117      	bne.n	8003526 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f8d1 	bl	800369e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4293      	cmp	r3, r2
 8003502:	d010      	beq.n	8003526 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8003504:	68fc      	ldr	r4, [r7, #12]
 8003506:	6838      	ldr	r0, [r7, #0]
 8003508:	f7ff ffd8 	bl	80034bc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 800350c:	4605      	mov	r5, r0
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f87c 	bl	800360c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	4629      	mov	r1, r5
 800351a:	4620      	mov	r0, r4
 800351c:	f7ff fcea 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x48>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x4a>
 800352a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800352c:	75fb      	strb	r3, [r7, #23]
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3304      	adds	r3, #4
 8003532:	7df8      	ldrb	r0, [r7, #23]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6839      	ldr	r1, [r7, #0]
 8003538:	f001 fcf0 	bl	8004f1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8003546:	f107 0310 	add.w	r3, r7, #16
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 f805 	bl	800355c <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 8003552:	693b      	ldr	r3, [r7, #16]
    }
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bdb0      	pop	{r4, r5, r7, pc}

0800355c <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
      }
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80035aa:	b590      	push	{r4, r7, lr}
 80035ac:	b087      	sub	sp, #28
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d01b      	beq.n	80035f6 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80035be:	68fc      	ldr	r4, [r7, #12]
 80035c0:	68b8      	ldr	r0, [r7, #8]
 80035c2:	f7ff ff7b 	bl	80034bc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 80035c6:	4603      	mov	r3, r0
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	4619      	mov	r1, r3
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7ff fc91 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_+0x42>
	  __y = __x, __x = _S_left(__x);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	68b8      	ldr	r0, [r7, #8]
 80035e4:	f000 f9fa 	bl	80039dc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80035e8:	60b8      	str	r0, [r7, #8]
 80035ea:	e7e5      	b.n	80035b8 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80035ec:	68b8      	ldr	r0, [r7, #8]
 80035ee:	f000 fa01 	bl	80039f4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80035f2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80035f4:	e7e0      	b.n	80035b8 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 80035f6:	f107 0314 	add.w	r3, r7, #20
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 f818 	bl	8003632 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPKSt18_Rb_tree_node_base>
 8003602:	697b      	ldr	r3, [r7, #20]
    }
 8003604:	4618      	mov	r0, r3
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd90      	pop	{r4, r7, pc}

0800360c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f9f9 	bl	8003a0c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_valueEPKSt18_Rb_tree_node_base>
 800361a:	4602      	mov	r2, r0
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f9ce 	bl	80039c4 <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEclERKS7_>
 8003628:	4603      	mov	r3, r0
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS7_E>:
      _M_destroy_node(_Link_type __p) noexcept
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9e2 	bl	8003a24 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>
 8003660:	4604      	mov	r4, r0
 8003662:	6838      	ldr	r0, [r7, #0]
 8003664:	f7ff fd86 	bl	8003174 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 8003668:	4603      	mov	r3, r0
 800366a:	4619      	mov	r1, r3
 800366c:	4620      	mov	r0, r4
 800366e:	f000 f9e4 	bl	8003a3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE7destroyIS8_EEvRSA_PT_>
      }
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bd90      	pop	{r4, r7, pc}

0800367a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS7_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f9cd 	bl	8003a24 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>
 800368a:	4603      	mov	r3, r0
 800368c:	2201      	movs	r2, #1
 800368e:	6839      	ldr	r1, [r7, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f9df 	bl	8003a54 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE10deallocateERSA_PS9_j>
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80036b6:	b590      	push	{r4, r7, lr}
 80036b8:	b087      	sub	sp, #28
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01b      	beq.n	8003702 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80036ca:	68fc      	ldr	r4, [r7, #12]
 80036cc:	68b8      	ldr	r0, [r7, #8]
 80036ce:	f7ff fef5 	bl	80034bc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 80036d2:	4603      	mov	r3, r0
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	4619      	mov	r1, r3
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff fc0b 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 80036de:	4603      	mov	r3, r0
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_+0x42>
	  __y = __x, __x = _S_left(__x);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	68b8      	ldr	r0, [r7, #8]
 80036f0:	f7ff fcf1 	bl	80030d6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>
 80036f4:	60b8      	str	r0, [r7, #8]
 80036f6:	e7e5      	b.n	80036c4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80036f8:	68b8      	ldr	r0, [r7, #8]
 80036fa:	f7ff fce0 	bl	80030be <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 80036fe:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8003700:	e7e0      	b.n	80036c4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8003702:	f107 0314 	add.w	r3, r7, #20
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff27 	bl	800355c <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 800370e:	697b      	ldr	r3, [r7, #20]
    }
 8003710:	4618      	mov	r0, r3
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}

08003718 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f9a6 	bl	8003a72 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE7_M_addrEv>
 8003726:	4603      	mov	r3, r0
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_get_nodeEv>:
      _M_get_node()
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f973 	bl	8003a24 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>
 800373e:	4603      	mov	r3, r0
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f9a0 	bl	8003a88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE8allocateERSA_j>
 8003748:	4603      	mov	r3, r0
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEEvPSt13_Rb_tree_nodeIS7_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8003752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4619      	mov	r1, r3
 8003766:	2018      	movs	r0, #24
 8003768:	f7ff f9e8 	bl	8002b3c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f959 	bl	8003a24 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>
 8003772:	4604      	mov	r4, r0
 8003774:	68b8      	ldr	r0, [r7, #8]
 8003776:	f7ff fcfd 	bl	8003174 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 800377a:	4605      	mov	r5, r0
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fbde 	bl	8002f3e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003782:	4606      	mov	r6, r0
 8003784:	6838      	ldr	r0, [r7, #0]
 8003786:	f7ff fbe5 	bl	8002f54 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800378a:	4680      	mov	r8, r0
 800378c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800378e:	f7ff fbec 	bl	8002f6a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003792:	4603      	mov	r3, r0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	4643      	mov	r3, r8
 8003798:	4632      	mov	r2, r6
 800379a:	4629      	mov	r1, r5
 800379c:	4620      	mov	r0, r4
 800379e:	f000 f982 	bl	8003aa6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESG_IJEEEEEvRSA_PT_DpOT0_>
	}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fecc 	bl	800355c <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT 
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3310      	adds	r3, #16
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefPN3wyz5CUartEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800380a:	68b8      	ldr	r0, [r7, #8]
 800380c:	f000 f810 	bl	8003830 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8003810:	4603      	mov	r3, r0
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fcf2 	bl	8003202 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800381e:	4603      	mov	r3, r0
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003846:	b590      	push	{r4, r7, lr}
 8003848:	b08b      	sub	sp, #44	; 0x2c
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8003852:	68b8      	ldr	r0, [r7, #8]
 8003854:	f7ff faf7 	bl	8002e46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>
 8003858:	4603      	mov	r3, r0
 800385a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800385c:	68b8      	ldr	r0, [r7, #8]
 800385e:	f7ff ff1e 	bl	800369e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 8003862:	4603      	mov	r3, r0
 8003864:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d020      	beq.n	80038b4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8003876:	68bc      	ldr	r4, [r7, #8]
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fe1e 	bl	80034bc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 8003880:	4603      	mov	r3, r0
 8003882:	461a      	mov	r2, r3
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4620      	mov	r0, r4
 8003888:	f7ff fb34 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 800388c:	4603      	mov	r3, r0
 800388e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8003892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x60>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fc1a 	bl	80030d6 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>
 80038a2:	4603      	mov	r3, r0
 80038a4:	e004      	b.n	80038b0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x6a>
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fc08 	bl	80030be <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 80038ae:	4603      	mov	r3, r0
 80038b0:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80038b2:	e7db      	b.n	800386c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	f107 0310 	add.w	r3, r7, #16
 80038ba:	4611      	mov	r1, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fe4d 	bl	800355c <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80038c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01d      	beq.n	8003906 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 80038ca:	68b8      	ldr	r0, [r7, #8]
 80038cc:	f000 f909 	bl	8003ae2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE5beginEv>
 80038d0:	4603      	mov	r3, r0
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	f107 021c 	add.w	r2, r7, #28
 80038d8:	f107 0310 	add.w	r3, r7, #16
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fad9 	bl	8002e96 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 80038ea:	f107 0214 	add.w	r2, r7, #20
 80038ee:	f107 0318 	add.w	r3, r7, #24
 80038f2:	4619      	mov	r1, r3
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff ff82 	bl	80037fe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefPN3wyz5CUartEEERS1_Lb1EEEOT_OT0_>
 80038fa:	e025      	b.n	8003948 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 80038fc:	f107 0310 	add.w	r3, r7, #16
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f831 	bl	8003968 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8003906:	68bc      	ldr	r4, [r7, #8]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fe7e 	bl	800360c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003910:	4603      	mov	r3, r0
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4619      	mov	r1, r3
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff faec 	bl	8002ef4 <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8003922:	f107 0214 	add.w	r2, r7, #20
 8003926:	f107 0318 	add.w	r3, r7, #24
 800392a:	4619      	mov	r1, r3
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff ff66 	bl	80037fe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefPN3wyz5CUartEEERS1_Lb1EEEOT_OT0_>
 8003932:	e009      	b.n	8003948 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8003934:	2300      	movs	r3, #0
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	f107 0220 	add.w	r2, r7, #32
 800393c:	f107 0310 	add.w	r3, r7, #16
 8003940:	4619      	mov	r1, r3
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f7ff fc81 	bl	800324a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	372c      	adds	r7, #44	; 0x2c
 800394c:	46bd      	mov	sp, r7
 800394e:	bd90      	pop	{r4, r7, pc}

08003950 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	330c      	adds	r3, #12
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f001 facf 	bl	8004f18 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800397a:	4602      	mov	r2, r0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	601a      	str	r2, [r3, #0]
	return *this;
 8003980:	687b      	ldr	r3, [r7, #4]
      }
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f001 faaa 	bl	8004ef0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
	return *this;
 80039a2:	687b      	ldr	r3, [r7, #4]
      }
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_valueEPKSt13_Rb_tree_nodeIS7_E>:
      _S_value(_Const_Link_type __x)
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
      { return *__x->_M_valptr(); }
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f8a5 	bl	8003b04 <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEclERKS7_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_valueEPKSt18_Rb_tree_node_base>:
      _S_value(_Const_Base_ptr __x)
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f875 	bl	8003b04 <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE7destroyIS8_EEvRSA_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f86a 	bl	8003b20 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE7destroyIS9_EEvPT_>
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE10deallocateERSA_PS9_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f866 	bl	8003b36 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE10deallocateEPSA_j>
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE7_M_addrEv>:
      _M_addr() noexcept
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE8allocateERSA_j>:
      allocate(allocator_type& __a, size_type __n)
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003a92:	2200      	movs	r2, #0
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f85a 	bl	8003b50 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8allocateEjPKv>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESG_IJEEEEEvRSA_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003aa6:	b5b0      	push	{r4, r5, r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af02      	add	r7, sp, #8
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fa42 	bl	8002f3e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003aba:	4604      	mov	r4, r0
 8003abc:	6838      	ldr	r0, [r7, #0]
 8003abe:	f7ff fa49 	bl	8002f54 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	6a38      	ldr	r0, [r7, #32]
 8003ac6:	f7ff fa50 	bl	8002f6a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003aca:	4603      	mov	r3, r0
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	462b      	mov	r3, r5
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f8a7 	bl	8003c28 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESG_IJEEEEEvPT_DpOT0_>
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bdb0      	pop	{r4, r5, r7, pc}

08003ae2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fd31 	bl	800355c <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>:
      _M_valptr() const
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3310      	adds	r3, #16
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f8b2 	bl	8003c7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE6_M_ptrEv>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE7destroyIS9_EEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE10deallocateEPSA_j>:
      deallocate(pointer __p, size_type)
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003b42:	68b8      	ldr	r0, [r7, #8]
 8003b44:	f001 f974 	bl	8004e30 <_ZdlPv>
      }
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f899 	bl	8003c94 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8max_sizeEv>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bf8c      	ite	hi
 8003b6a:	2301      	movhi	r3, #1
 8003b6c:	2300      	movls	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003b74:	f001 fa34 	bl	8004fe0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 f93a 	bl	8004dfc <_Znwj>
 8003b88:	4603      	mov	r3, r0
      }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1EOS4_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f829 	bl	8003bfa <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1EOS4_>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f805 	bl	8003bcc <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EE7_M_headERS4_>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8003bfa:	b590      	push	{r4, r7, lr}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8003c04:	687c      	ldr	r4, [r7, #4]
 8003c06:	6838      	ldr	r0, [r7, #0]
 8003c08:	f7ff ffd3 	bl	8003bb2 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ffe8 	bl	8003be4 <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4619      	mov	r1, r3
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7ff f87a 	bl	8002d12 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd90      	pop	{r4, r7, pc}

08003c28 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESG_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff f981 	bl	8002f3e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c3c:	6838      	ldr	r0, [r7, #0]
 8003c3e:	f7ff f989 	bl	8002f54 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003c42:	4602      	mov	r2, r0
 8003c44:	f107 0318 	add.w	r3, r7, #24
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ffa1 	bl	8003b92 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1EOS4_>
 8003c50:	f107 0418 	add.w	r4, r7, #24
 8003c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c56:	f7ff f988 	bl	8002f6a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	2008      	movs	r0, #8
 8003c60:	f7fe ff6c 	bl	8002b3c <_ZnwjPv>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d004      	beq.n	8003c72 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESG_IJEEEEEvPT_DpOT0_+0x4a>
 8003c68:	7f3b      	ldrb	r3, [r7, #28]
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	7d39      	ldrb	r1, [r7, #20]
 8003c6e:	f000 f81f 	bl	8003cb0 <_ZNSt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>
 8003c72:	bf00      	nop
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd90      	pop	{r4, r7, pc}

08003c7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f828 	bl	8003cd8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE7_M_addrEv>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8max_sizeEv+0x18>)
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	0aaaaaaa 	.word	0x0aaaaaaa

08003cb0 <_ZNSt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>:

  // See stl_pair.h...
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
 8003cb0:	b5b0      	push	{r4, r5, r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	7239      	strb	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8003cbe:	463a      	mov	r2, r7
 8003cc0:	f88d 4000 	strb.w	r4, [sp]
 8003cc4:	462b      	mov	r3, r5
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f829 	bl	8003d20 <_ZNSt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>
      { }
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bdb0      	pop	{r4, r5, r7, pc}

08003cd8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE7_M_addrEv>:
      _M_addr() const noexcept
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <_ZSt3getILj0EJRKP20__UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f805 	bl	8003d08 <_ZSt12__get_helperILj0ERKP20__UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_ZSt12__get_helperILj0ERKP20__UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff4e 	bl	8003bb2 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <_ZNSt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8003d2e:	68b8      	ldr	r0, [r7, #8]
 8003d30:	f7ff ffdd 	bl	8003cee <_ZSt3getILj0EJRKP20__UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff54 	bl	8003be4 <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8003d3c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
      { }
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <_Z41__static_initialization_and_destruction_0ii>:

CRelateOfHandleAndCUart* CRelateOfHandleAndCUart::m_pInstance = new CRelateOfHandleAndCUart();

} /* namespace wyz */
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10e      	bne.n	8003d82 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d109      	bne.n	8003d82 <_Z41__static_initialization_and_destruction_0ii+0x2e>
CRelateOfHandleAndCUart* CRelateOfHandleAndCUart::m_pInstance = new CRelateOfHandleAndCUart();
 8003d6e:	2018      	movs	r0, #24
 8003d70:	f001 f844 	bl	8004dfc <_Znwj>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461c      	mov	r4, r3
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f7fe ff3f 	bl	8002bfc <_ZN3wyz23CRelateOfHandleAndCUartC1Ev>
 8003d7e:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003d80:	601c      	str	r4, [r3, #0]
} /* namespace wyz */
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd90      	pop	{r4, r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000090 	.word	0x20000090

08003d90 <_GLOBAL__sub_I__ZN3wyz23CRelateOfHandleAndCUartC2Ev>:
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7ff ffdb 	bl	8003d54 <_Z41__static_initialization_and_destruction_0ii>
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>:
#include <map>
namespace wyz {

class CRelateOfHandleAndCUart {
public:
	static  CRelateOfHandleAndCUart* GetInstance(){
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
		return m_pInstance;
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
	}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000090 	.word	0x20000090

08003db8 <HAL_UART_RxCpltCallback>:
#include "CUart.h"
#include "CRelateOfHandleAndCUart.h"
#include "main.h"


void HAL_UART_RxCpltCallback(UART_HandleTypeDef  *huart){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	if(wyz::CRelateOfHandleAndCUart::GetInstance()->Exists(huart)){
 8003dc0:	f7ff ffee 	bl	8003da0 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe ff37 	bl	8002c3c <_ZN3wyz23CRelateOfHandleAndCUart6ExistsEP20__UART_HandleTypeDef>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01e      	beq.n	8003e12 <HAL_UART_RxCpltCallback+0x5a>
		if(wyz::CRelateOfHandleAndCUart::GetInstance()->Get(huart)->GetUartMode() == wyz::CUart::m_ObserverMode){
 8003dd4:	f7ff ffe4 	bl	8003da0 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe ff42 	bl	8002c66 <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f9c6 	bl	8004176 <_ZN3wyz5CUart11GetUartModeEv>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <HAL_UART_RxCpltCallback+0x5a>
			wyz::CRelateOfHandleAndCUart::GetInstance()->Get(huart)->HardInterrupt(wyz::CUart::m_UART_RxCplt);
 8003dfa:	f7ff ffd1 	bl	8003da0 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe ff2f 	bl	8002c66 <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f99e 	bl	800414e <_ZN3wyz5CUart13HardInterruptEh>
		}
	}
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
	if(wyz::CRelateOfHandleAndCUart::GetInstance()->Exists(huart)){
 8003e22:	f7ff ffbd 	bl	8003da0 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8003e26:	4603      	mov	r3, r0
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe ff06 	bl	8002c3c <_ZN3wyz23CRelateOfHandleAndCUart6ExistsEP20__UART_HandleTypeDef>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01e      	beq.n	8003e74 <HAL_UART_RxHalfCpltCallback+0x5a>
		if(wyz::CRelateOfHandleAndCUart::GetInstance()->Get(huart)->GetUartMode() == wyz::CUart::m_ObserverMode){
 8003e36:	f7ff ffb3 	bl	8003da0 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe ff11 	bl	8002c66 <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f995 	bl	8004176 <_ZN3wyz5CUart11GetUartModeEv>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	bf0c      	ite	eq
 8003e52:	2301      	moveq	r3, #1
 8003e54:	2300      	movne	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00b      	beq.n	8003e74 <HAL_UART_RxHalfCpltCallback+0x5a>
					wyz::CRelateOfHandleAndCUart::GetInstance()->Get(huart)->HardInterrupt(wyz::CUart::m_UART_RxHalfCplt);
 8003e5c:	f7ff ffa0 	bl	8003da0 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8003e60:	4603      	mov	r3, r0
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fefe 	bl	8002c66 <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f96d 	bl	800414e <_ZN3wyz5CUart13HardInterruptEh>
				}
		}
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZN3wyz7CDeviceC1Ev>:
#include  "CObserver.h"
#include "main.h"
namespace wyz {
using namespace std;

class CDevice {  //驱动程序基类
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <_ZN3wyz7CDeviceC1Ev+0x1c>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	080052e0 	.word	0x080052e0

08003e9c <_ZN3wyz8CSubjectC1Ev>:
#define CLASS_CSUBJECT_H_

namespace wyz {
class CObserver;

class CSubject {
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <_ZN3wyz8CSubjectC1Ev+0x1c>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	08005300 	.word	0x08005300

08003ebc <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh>:

namespace wyz {

CUart::CUart(UART_HandleTypeDef *huart,uint32_t SizeOfRxBuf,uint32_t SizeOfTxBuf,uint8_t Mode ) {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ffd5 	bl	8003e7c <_ZN3wyz7CDeviceC1Ev>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ffe0 	bl	8003e9c <_ZN3wyz8CSubjectC1Ev>
 8003edc:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh+0x94>)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh+0x98>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3320      	adds	r3, #32
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f94e 	bl	800418e <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EEC1Ev>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	// TODO Auto-generated constructor stubthis
	this->m_Huart=huart;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
	this->m_SizeOfRxBuf=SizeOfRxBuf;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	60da      	str	r2, [r3, #12]
	this->m_SizeOfTxBuf=SizeOfTxBuf;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
	this->m_pRxBuf= new uint8_t[SizeOfRxBuf*2]; //读缓存,*2好用双缓存模式
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 ff71 	bl	8004df8 <_Znaj>
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	615a      	str	r2, [r3, #20]
	this->m_pTxBuf =new uint8_t[SizeOfTxBuf];
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 ff69 	bl	8004df8 <_Znaj>
 8003f26:	4603      	mov	r3, r0
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	619a      	str	r2, [r3, #24]
	m_UartMode=Mode;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	7e3a      	ldrb	r2, [r7, #24]
 8003f32:	771a      	strb	r2, [r3, #28]
	CRelateOfHandleAndCUart::GetInstance()->Add(this, huart);
 8003f34:	f7ff ff34 	bl	8003da0 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	68f9      	ldr	r1, [r7, #12]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fe69 	bl	8002c16 <_ZN3wyz23CRelateOfHandleAndCUart3AddEPNS_5CUartEP20__UART_HandleTypeDef>
}
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	080052a0 	.word	0x080052a0
 8003f54:	080052cc 	.word	0x080052cc

08003f58 <_ZN3wyz5CUart4OpenEv>:
};


/*******************************************/
uint8_t CUart::Open()
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	return 0;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <_ZN3wyz5CUart5CloseEv>:
uint8_t CUart::Close()
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
	return 0;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <_ZN3wyz5CUart9BlockReadEPhmm>:
	{
		return this->m_pRxBuf;
	}
}
void CUart::BlockRead(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
	HAL_UART_Receive(this->m_Huart,pDataBuf,Size,TimeOut);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6898      	ldr	r0, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	f7fd fe39 	bl	8001c14 <HAL_UART_Receive>
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_ZN3wyz5CUart10BlockwriteEPhmm>:

void CUart::Blockwrite(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(this->m_Huart,pDataBuf,Size,TimeOut);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6898      	ldr	r0, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	f7fd fd8d 	bl	8001ae2 <HAL_UART_Transmit>
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <_ZN3wyz5CUart12NonBlockReadEPhmm>:

void CUart::NonBlockRead(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
    if(m_UartMode == m_UsingDMAMode)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	7f1b      	ldrb	r3, [r3, #28]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d108      	bne.n	8003ff8 <_ZN3wyz5CUart12NonBlockReadEPhmm+0x28>
    {
    	HAL_UART_Receive_DMA(this->m_Huart,pDataBuf,Size);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	b292      	uxth	r2, r2
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fd ffbb 	bl	8001f6c <HAL_UART_Receive_DMA>
    	HAL_UART_Receive_IT(this->m_Huart,pDataBuf,Size);
    }else if(m_UartMode == m_UsingBlockMode)
    {
    	//配置错误
    }
}
 8003ff6:	e00b      	b.n	8004010 <_ZN3wyz5CUart12NonBlockReadEPhmm+0x40>
    else if(m_UartMode == m_UsingITMode)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	7f1b      	ldrb	r3, [r3, #28]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d107      	bne.n	8004010 <_ZN3wyz5CUart12NonBlockReadEPhmm+0x40>
    	HAL_UART_Receive_IT(this->m_Huart,pDataBuf,Size);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	b292      	uxth	r2, r2
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd feed 	bl	8001dea <HAL_UART_Receive_IT>
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <_ZN3wyz5CUart13NonBlockWriteEPhmm>:

void CUart::NonBlockWrite(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
	 if(m_UartMode == m_UsingDMAMode)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	7f1b      	ldrb	r3, [r3, #28]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d108      	bne.n	8004040 <_ZN3wyz5CUart13NonBlockWriteEPhmm+0x28>
	 {
		 HAL_UART_Transmit_DMA(this->m_Huart,pDataBuf,Size);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	b292      	uxth	r2, r2
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	4618      	mov	r0, r3
 800403a:	f7fd ff2b 	bl	8001e94 <HAL_UART_Transmit_DMA>
	 	 HAL_UART_Transmit_IT(this->m_Huart,pDataBuf,Size);
	 }else if(m_UartMode == m_UsingBlockMode)
	 {
	 	//配置错误
	 }
}
 800403e:	e00b      	b.n	8004058 <_ZN3wyz5CUart13NonBlockWriteEPhmm+0x40>
	 else if(m_UartMode == m_UsingITMode)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	7f1b      	ldrb	r3, [r3, #28]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d107      	bne.n	8004058 <_ZN3wyz5CUart13NonBlockWriteEPhmm+0x40>
	 	 HAL_UART_Transmit_IT(this->m_Huart,pDataBuf,Size);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	b292      	uxth	r2, r2
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd fe84 	bl	8001d60 <HAL_UART_Transmit_IT>
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <_ZN3wyz5CUart6AttachEPNS_9CObserverE>:
/************************************************/
void CUart::Attach(CObserver* pObserver)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
	m_ObserverList.push_back(pObserver);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3320      	adds	r3, #32
 800406e:	463a      	mov	r2, r7
 8004070:	4611      	mov	r1, r2
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f898 	bl	80041a8 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9push_backERKS3_>
	StartObserverMode();
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f854 	bl	8004126 <_ZN3wyz5CUart17StartObserverModeEv>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_ZThn4_N3wyz5CUart6AttachEPNS_9CObserverE>:
	void BlockRead(uint8_t *pDataBuf,uint32_t Size,uint32_t TimeOut=200);
	void Blockwrite(uint8_t *pDataBuf,uint32_t Size,uint32_t TimeOut=200);
	void NonBlockRead(uint8_t *pDataBuf,uint32_t Size,uint32_t TimeOut=0);
	void NonBlockWrite(uint8_t *pDataBuf,uint32_t Size,uint32_t TimeOut=0);
	/*************继承自CSubject*********************/
	void Attach(CObserver* pObserver);
 8004086:	f1a0 0004 	sub.w	r0, r0, #4
 800408a:	f7ff bfe9 	b.w	8004060 <_ZN3wyz5CUart6AttachEPNS_9CObserverE>

0800408e <_ZN3wyz5CUart6DetachEPNS_9CObserverE>:

void CUart::Detach(CObserver* pObserver)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
	m_ObserverList.remove(pObserver);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3320      	adds	r3, #32
 800409c:	463a      	mov	r2, r7
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f893 	bl	80041cc <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_>
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_ZThn4_N3wyz5CUart6DetachEPNS_9CObserverE>:
	void Detach(CObserver* pObserver);
 80040ae:	f1a0 0004 	sub.w	r0, r0, #4
 80040b2:	f7ff bfec 	b.w	800408e <_ZN3wyz5CUart6DetachEPNS_9CObserverE>

080040b6 <_ZN3wyz5CUart6NotifyEv>:

void CUart::Notify()
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]

	list<CObserver*>::iterator item = m_ObserverList.begin();
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3320      	adds	r3, #32
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f8e7 	bl	8004296 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE5beginEv>
 80040c8:	4603      	mov	r3, r0
 80040ca:	60bb      	str	r3, [r7, #8]
	while(item != m_ObserverList.end())
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3320      	adds	r3, #32
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f8f1 	bl	80042b8 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>
 80040d6:	4603      	mov	r3, r0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	f107 020c 	add.w	r2, r7, #12
 80040de:	f107 0308 	add.w	r3, r7, #8
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f8f7 	bl	80042d8 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d012      	beq.n	8004116 <_ZN3wyz5CUart6NotifyEv+0x60>
	{
		(*item)->Update(this);
 80040f0:	f107 0308 	add.w	r3, r7, #8
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 f903 	bl	8004300 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>
 80040fa:	4603      	mov	r3, r0
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	3104      	adds	r1, #4
 8004106:	4618      	mov	r0, r3
 8004108:	4790      	blx	r2
		++item;
 800410a:	f107 0308 	add.w	r3, r7, #8
 800410e:	4618      	mov	r0, r3
 8004110:	f000 f904 	bl	800431c <_ZNSt14_List_iteratorIPN3wyz9CObserverEEppEv>
	while(item != m_ObserverList.end())
 8004114:	e7da      	b.n	80040cc <_ZN3wyz5CUart6NotifyEv+0x16>
	}
}
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <_ZThn4_N3wyz5CUart6NotifyEv>:
	void Notify();
 800411e:	f1a0 0004 	sub.w	r0, r0, #4
 8004122:	f7ff bfc8 	b.w	80040b6 <_ZN3wyz5CUart6NotifyEv>

08004126 <_ZN3wyz5CUart17StartObserverModeEv>:

void CUart::StartObserverMode()
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->m_Huart,m_pRxBuf,this->m_SizeOfRxBuf*2);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6898      	ldr	r0, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6959      	ldr	r1, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	b29b      	uxth	r3, r3
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	b29b      	uxth	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	f7fd ff13 	bl	8001f6c <HAL_UART_Receive_DMA>
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <_ZN3wyz5CUart13HardInterruptEh>:
/*****************************************************/
void CUart::HardInterrupt(uint8_t interruptMode)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	70fb      	strb	r3, [r7, #3]
	this->m_InterruptMode = interruptMode;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	this->Notify();
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3320      	adds	r3, #32
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	4798      	blx	r3
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <_ZN3wyz5CUart11GetUartModeEv>:

int CUart::GetUartMode(){
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
	return this->m_UartMode;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7f1b      	ldrb	r3, [r3, #28]
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %list with no elements.
       */
      list()
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)
#endif
      : _Base() { }
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 f8cf 	bl	800433c <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EEC1Ev>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9push_backERKS3_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f880 	bl	80042b8 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>
 80041b8:	4603      	mov	r3, r0
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8d7 	bl	8004372 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9_M_insertIJRKS3_EEEvSt14_List_iteratorIS3_EDpOT_>
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_>:
          insert(__last1, __first2, __last2);
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
    remove(const value_type& __value)
    {
      iterator __first = begin();
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f85d 	bl	8004296 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE5beginEv>
 80041dc:	4603      	mov	r3, r0
 80041de:	617b      	str	r3, [r7, #20]
      iterator __last = end();
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f869 	bl	80042b8 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>
 80041e6:	4603      	mov	r3, r0
 80041e8:	613b      	str	r3, [r7, #16]
      iterator __extra = __last;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	60fb      	str	r3, [r7, #12]
      while (__first != __last)
 80041ee:	f107 0210 	add.w	r2, r7, #16
 80041f2:	f107 0314 	add.w	r3, r7, #20
 80041f6:	4611      	mov	r1, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 f86d 	bl	80042d8 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d035      	beq.n	8004270 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0xa4>
	{
	  iterator __next = __first;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	60bb      	str	r3, [r7, #8]
	  ++__next;
 8004208:	f107 0308 	add.w	r3, r7, #8
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f885 	bl	800431c <_ZNSt14_List_iteratorIPN3wyz9CObserverEEppEv>
	  if (*__first == __value)
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f872 	bl	8004300 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>
 800421c:	4603      	mov	r3, r0
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01b      	beq.n	800426a <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x9e>
	    {
	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
	      // 526. Is it undefined if a function in the standard changes
	      // in parameters?
	      if (std::__addressof(*__first) != std::__addressof(__value))
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f862 	bl	8004300 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>
 800423c:	4603      	mov	r3, r0
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f8b5 	bl	80043ae <_ZSt11__addressofIPN3wyz9CObserverEEPT_RS3_>
 8004244:	4604      	mov	r4, r0
 8004246:	6838      	ldr	r0, [r7, #0]
 8004248:	f000 f8bc 	bl	80043c4 <_ZSt11__addressofIKPN3wyz9CObserverEEPT_RS4_>
 800424c:	4603      	mov	r3, r0
 800424e:	429c      	cmp	r4, r3
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x9a>
		_M_erase(__first);
 800425c:	6979      	ldr	r1, [r7, #20]
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8bb 	bl	80043da <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
 8004264:	e001      	b.n	800426a <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x9e>
	      else
		__extra = __first;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	60fb      	str	r3, [r7, #12]
	    }
	  __first = __next;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	617b      	str	r3, [r7, #20]
      while (__first != __last)
 800426e:	e7be      	b.n	80041ee <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x22>
	}
      if (__extra != __last)
 8004270:	f107 0210 	add.w	r2, r7, #16
 8004274:	f107 030c 	add.w	r3, r7, #12
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f82c 	bl	80042d8 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0xc2>
	_M_erase(__extra);
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8a6 	bl	80043da <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
    }
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	bd90      	pop	{r4, r7, pc}

08004296 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	f107 030c 	add.w	r3, r7, #12
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f8bc 	bl	8004426 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEC1EPNSt8__detail15_List_node_baseE>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	f107 030c 	add.w	r3, r7, #12
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f8ac 	bl	8004426 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEC1EPNSt8__detail15_List_node_baseE>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>:
      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
      { return _M_node != __x._M_node; }
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 f899 	bl	8004444 <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 8004312:	4603      	mov	r3, r0
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <_ZNSt14_List_iteratorIPN3wyz9CObserverEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	601a      	str	r2, [r3, #0]
	return *this;
 800432e:	687b      	ldr	r3, [r7, #4]
      }
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EEC1Ev>:
      _List_base()
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f88a 	bl	8004460 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE10_List_implC1Ev>
      { _M_init(); }
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f899 	bl	8004484 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE7_M_initEv>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9_M_insertIJRKS3_EEEvSt14_List_iteratorIS3_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 8004372:	b580      	push	{r7, lr}
 8004374:	b086      	sub	sp, #24
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff ffec 	bl	800435c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004384:	4603      	mov	r3, r0
 8004386:	4619      	mov	r1, r3
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f8b4 	bl	80044f6 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt10_List_nodeIS3_EDpOT_>
 800438e:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fd5d 	bl	8004e56 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f8dc 	bl	800455e <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_inc_sizeEj>
       }
 80043a6:	bf00      	nop
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <_ZSt11__addressofIPN3wyz9CObserverEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <_ZSt11__addressofIKPN3wyz9CObserverEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>:
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 80043da:	b590      	push	{r4, r7, lr}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2101      	movs	r1, #1
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f8ca 	bl	8004582 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fd37 	bl	8004e64 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f853 	bl	80044a8 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>
 8004402:	4604      	mov	r4, r0
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f81d 	bl	8004444 <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 800440a:	4603      	mov	r3, r0
 800440c:	4619      	mov	r1, r3
 800440e:	4620      	mov	r0, r4
 8004410:	f000 f855 	bl	80044be <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE7destroyIS3_EEvRS5_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f85d 	bl	80044d8 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      }
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}

08004426 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3308      	adds	r3, #8
 8004450:	4618      	mov	r0, r3
 8004452:	f000 f8a8 	bl	80045a6 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE6_M_ptrEv>
 8004456:	4603      	mov	r3, r0
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type(), _M_node()
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8a8 	bl	80045be <_ZNSaISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	461a      	mov	r2, r3
 8004472:	2300      	movs	r3, #0
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	6053      	str	r3, [r2, #4]
 8004478:	6093      	str	r3, [r2, #8]
	{ }
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	605a      	str	r2, [r3, #4]
	_M_set_size(0);
 8004498:	2100      	movs	r1, #0
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f89b 	bl	80045d6 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_set_sizeEj>
      }
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80044c8:	6839      	ldr	r1, [r7, #0]
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f893 	bl	80045f6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE7destroyIS4_EEvPT_>
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 f88f 	bl	800460c <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE10deallocateERS5_PS4_j>
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt10_List_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80044f6:	b590      	push	{r4, r7, lr}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f891 	bl	800462a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_get_nodeEv>
 8004508:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ffcb 	bl	80044a8 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>
 8004512:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8004514:	f107 0308 	add.w	r3, r7, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	6939      	ldr	r1, [r7, #16]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 f892 	bl	8004646 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEC1ERS5_PS4_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8004522:	6978      	ldr	r0, [r7, #20]
 8004524:	f7ff ff8e 	bl	8004444 <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 8004528:	4604      	mov	r4, r0
 800452a:	6838      	ldr	r0, [r7, #0]
 800452c:	f7ff ff16 	bl	800435c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	4621      	mov	r1, r4
 8004536:	6938      	ldr	r0, [r7, #16]
 8004538:	f000 f8ae 	bl	8004698 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	  __guard = nullptr;
 800453c:	f107 0308 	add.w	r3, r7, #8
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f8bb 	bl	80046be <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEaSEDn>
	  return __p;
 8004548:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800454a:	f107 0308 	add.w	r3, r7, #8
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f88d 	bl	800466e <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev>
	  return __p;
 8004554:	4623      	mov	r3, r4
	}
 8004556:	4618      	mov	r0, r3
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}

0800455e <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f8b6 	bl	80046dc <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8004570:	4603      	mov	r3, r0
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	440a      	add	r2, r1
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f8a4 	bl	80046dc <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8004594:	4603      	mov	r3, r0
 8004596:	6819      	ldr	r1, [r3, #0]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	1a8a      	subs	r2, r1, r2
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE6_M_ptrEv>:
      _M_ptr() noexcept
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f8a2 	bl	80046f8 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE7_M_addrEv>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <_ZNSaISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>:
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8a1 	bl	800470e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_set_sizeEj>:
      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f87a 	bl	80046dc <_ZNSt10_List_nodeIjE9_M_valptrEv>
 80045e8:	4602      	mov	r2, r0
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE7destroyIS4_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f881 	bl	8004724 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE10deallocateEPS5_j>
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f881 	bl	800473e <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE8allocateERS5_j>
 800463c:	4603      	mov	r3, r0
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEC1ERS5_PS4_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004652:	68b8      	ldr	r0, [r7, #8]
 8004654:	f000 f882 	bl	800475c <_ZSt11__addressofISaISt10_List_nodeIPN3wyz9CObserverEEEEPT_RS6_>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	605a      	str	r2, [r3, #4]
      { }
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	4619      	mov	r1, r3
 800468a:	f7ff ffbf 	bl	800460c <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE10deallocateERS5_PS4_j>
      }
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fe59 	bl	800435c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f85e 	bl	8004772 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	605a      	str	r2, [r3, #4]
	return *this;
 80046ce:	687b      	ldr	r3, [r7, #4]
      }
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <_ZNSt10_List_nodeIjE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3308      	adds	r3, #8
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f85a 	bl	80047a2 <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>
 80046ee:	4603      	mov	r3, r0
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE7_M_addrEv>:
      _M_addr() noexcept
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE10deallocateEPS5_j>:
      deallocate(pointer __p, size_type)
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004730:	68b8      	ldr	r0, [r7, #8]
 8004732:	f000 fb7d 	bl	8004e30 <_ZdlPv>
      }
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004748:	2200      	movs	r2, #0
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f834 	bl	80047ba <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8allocateEjPKv>
 8004752:	4603      	mov	r3, r0
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <_ZSt11__addressofISaISt10_List_nodeIPN3wyz9CObserverEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004772:	b590      	push	{r4, r7, lr}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fdec 	bl	800435c <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004784:	4603      	mov	r3, r0
 8004786:	681c      	ldr	r4, [r3, #0]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4619      	mov	r1, r3
 800478c:	2004      	movs	r0, #4
 800478e:	f7fe f9d5 	bl	8002b3c <_ZnwjPv>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d000      	beq.n	800479a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x28>
 8004798:	601c      	str	r4, [r3, #0]
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd90      	pop	{r4, r7, pc}

080047a2 <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>:
      _M_ptr() noexcept
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f826 	bl	80047fc <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>
 80047b0:	4603      	mov	r3, r0
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f824 	bl	8004814 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8max_sizeEv>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bf8c      	ite	hi
 80047d4:	2301      	movhi	r3, #1
 80047d6:	2300      	movls	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80047de:	f000 fbff 	bl	8004fe0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4613      	mov	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fb05 	bl	8004dfc <_Znwj>
 80047f2:	4603      	mov	r3, r0
      }
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>:
      _M_addr() noexcept
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8max_sizeEv+0x18>)
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	15555555 	.word	0x15555555

08004830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004830:	b598      	push	{r3, r4, r7, lr}
 8004832:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8004834:	f7fb fe48 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004838:	f000 f822 	bl	8004880 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800483c:	f000 f8d6 	bl	80049ec <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8004840:	f000 f8b4 	bl	80049ac <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 8004844:	f000 f884 	bl	8004950 <_ZL13MX_UART4_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  pUart4->NonBlockRead(buf, 10);
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <main+0x48>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <main+0x48>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3310      	adds	r3, #16
 8004854:	681c      	ldr	r4, [r3, #0]
 8004856:	2300      	movs	r3, #0
 8004858:	220a      	movs	r2, #10
 800485a:	4908      	ldr	r1, [pc, #32]	; (800487c <main+0x4c>)
 800485c:	47a0      	blx	r4
  pUart4->Blockwrite(buf, 10, 5000);
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <main+0x48>)
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <main+0x48>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	681c      	ldr	r4, [r3, #0]
 800486c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004870:	220a      	movs	r2, #10
 8004872:	4902      	ldr	r1, [pc, #8]	; (800487c <main+0x4c>)
 8004874:	47a0      	blx	r4
  while (1)
 8004876:	e7fe      	b.n	8004876 <main+0x46>
 8004878:	20000134 	.word	0x20000134
 800487c:	20000138 	.word	0x20000138

08004880 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b094      	sub	sp, #80	; 0x50
 8004884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004886:	f107 0320 	add.w	r3, r7, #32
 800488a:	2230      	movs	r2, #48	; 0x30
 800488c:	2100      	movs	r1, #0
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fbea 	bl	8005068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a4:	2300      	movs	r3, #0
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	4b27      	ldr	r3, [pc, #156]	; (8004948 <_Z18SystemClock_Configv+0xc8>)
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	4a26      	ldr	r2, [pc, #152]	; (8004948 <_Z18SystemClock_Configv+0xc8>)
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6413      	str	r3, [r2, #64]	; 0x40
 80048b4:	4b24      	ldr	r3, [pc, #144]	; (8004948 <_Z18SystemClock_Configv+0xc8>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048c0:	2300      	movs	r3, #0
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <_Z18SystemClock_Configv+0xcc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <_Z18SystemClock_Configv+0xcc>)
 80048ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b1e      	ldr	r3, [pc, #120]	; (800494c <_Z18SystemClock_Configv+0xcc>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048dc:	2302      	movs	r3, #2
 80048de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048e0:	2301      	movs	r3, #1
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048e4:	2310      	movs	r3, #16
 80048e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048ec:	f107 0320 	add.w	r3, r7, #32
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fc fc9f 	bl	8001234 <HAL_RCC_OscConfig>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8004906:	f000 f8a7 	bl	8004a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800490a:	230f      	movs	r3, #15
 800490c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800491e:	f107 030c 	add.w	r3, r7, #12
 8004922:	2100      	movs	r1, #0
 8004924:	4618      	mov	r0, r3
 8004926:	f7fc fec7 	bl	80016b8 <HAL_RCC_ClockConfig>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 800493a:	f000 f88d 	bl	8004a58 <Error_Handler>
  }
}
 800493e:	bf00      	nop
 8004940:	3750      	adds	r7, #80	; 0x50
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	40007000 	.word	0x40007000

08004950 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <_ZL13MX_UART4_Initv+0x54>)
 8004956:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <_ZL13MX_UART4_Initv+0x58>)
 8004958:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800495a:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <_ZL13MX_UART4_Initv+0x54>)
 800495c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004960:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <_ZL13MX_UART4_Initv+0x54>)
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004968:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <_ZL13MX_UART4_Initv+0x54>)
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <_ZL13MX_UART4_Initv+0x54>)
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <_ZL13MX_UART4_Initv+0x54>)
 8004976:	220c      	movs	r2, #12
 8004978:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <_ZL13MX_UART4_Initv+0x54>)
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004980:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <_ZL13MX_UART4_Initv+0x54>)
 8004982:	2200      	movs	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004986:	4807      	ldr	r0, [pc, #28]	; (80049a4 <_ZL13MX_UART4_Initv+0x54>)
 8004988:	f7fd f85e 	bl	8001a48 <HAL_UART_Init>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf14      	ite	ne
 8004992:	2301      	movne	r3, #1
 8004994:	2300      	moveq	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 800499c:	f000 f85c 	bl	8004a58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80049a0:	bf00      	nop
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000094 	.word	0x20000094
 80049a8:	40004c00 	.word	0x40004c00

080049ac <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <_ZL11MX_DMA_Initv+0x3c>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	4a0b      	ldr	r2, [pc, #44]	; (80049e8 <_ZL11MX_DMA_Initv+0x3c>)
 80049bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049c0:	6313      	str	r3, [r2, #48]	; 0x30
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <_ZL11MX_DMA_Initv+0x3c>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80049ce:	2200      	movs	r2, #0
 80049d0:	2100      	movs	r1, #0
 80049d2:	200d      	movs	r0, #13
 80049d4:	f7fb fec5 	bl	8000762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80049d8:	200d      	movs	r0, #13
 80049da:	f7fb fede 	bl	800079a <HAL_NVIC_EnableIRQ>

}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800

080049ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <_ZL12MX_GPIO_Initv+0x68>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <_ZL12MX_GPIO_Initv+0x68>)
 80049fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a00:	6313      	str	r3, [r2, #48]	; 0x30
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <_ZL12MX_GPIO_Initv+0x68>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <_ZL12MX_GPIO_Initv+0x68>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	4a0f      	ldr	r2, [pc, #60]	; (8004a54 <_ZL12MX_GPIO_Initv+0x68>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <_ZL12MX_GPIO_Initv+0x68>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <_ZL12MX_GPIO_Initv+0x68>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <_ZL12MX_GPIO_Initv+0x68>)
 8004a34:	f043 0302 	orr.w	r3, r3, #2
 8004a38:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <_ZL12MX_GPIO_Initv+0x68>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]

}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800

08004a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a5c:	bf00      	nop
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <_Z41__static_initialization_and_destruction_0ii>:
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d113      	bne.n	8004aa0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10e      	bne.n	8004aa0 <_Z41__static_initialization_and_destruction_0ii+0x38>
wyz::CUart * pUart4 = new wyz::CUart(&huart4, 100, 20, wyz::CUart::m_UsingDMAMode);
 8004a82:	2030      	movs	r0, #48	; 0x30
 8004a84:	f000 f9ba 	bl	8004dfc <_Znwj>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461c      	mov	r4, r3
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2314      	movs	r3, #20
 8004a92:	2264      	movs	r2, #100	; 0x64
 8004a94:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004a96:	4620      	mov	r0, r4
 8004a98:	f7ff fa10 	bl	8003ebc <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh>
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004a9e:	601c      	str	r4, [r3, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}
 8004aa8:	20000094 	.word	0x20000094
 8004aac:	20000134 	.word	0x20000134

08004ab0 <_GLOBAL__sub_I_huart4>:
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ab8:	2001      	movs	r0, #1
 8004aba:	f7ff ffd5 	bl	8004a68 <_Z41__static_initialization_and_destruction_0ii>
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_MspInit+0x4c>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	4a0f      	ldr	r2, [pc, #60]	; (8004b0c <HAL_MspInit+0x4c>)
 8004ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <HAL_MspInit+0x4c>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_MspInit+0x4c>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <HAL_MspInit+0x4c>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6413      	str	r3, [r2, #64]	; 0x40
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_MspInit+0x4c>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800

08004b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a34      	ldr	r2, [pc, #208]	; (8004c00 <HAL_UART_MspInit+0xf0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d161      	bne.n	8004bf6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <HAL_UART_MspInit+0xf4>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4a32      	ldr	r2, [pc, #200]	; (8004c04 <HAL_UART_MspInit+0xf4>)
 8004b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b40:	6413      	str	r3, [r2, #64]	; 0x40
 8004b42:	4b30      	ldr	r3, [pc, #192]	; (8004c04 <HAL_UART_MspInit+0xf4>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <HAL_UART_MspInit+0xf4>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4a2b      	ldr	r2, [pc, #172]	; (8004c04 <HAL_UART_MspInit+0xf4>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5e:	4b29      	ldr	r3, [pc, #164]	; (8004c04 <HAL_UART_MspInit+0xf4>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b76:	2303      	movs	r3, #3
 8004b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	4619      	mov	r1, r3
 8004b84:	4820      	ldr	r0, [pc, #128]	; (8004c08 <HAL_UART_MspInit+0xf8>)
 8004b86:	f7fc f9bb 	bl	8000f00 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004b8c:	4a20      	ldr	r2, [pc, #128]	; (8004c10 <HAL_UART_MspInit+0x100>)
 8004b8e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b96:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b98:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004baa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bac:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bb2:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004bca:	4810      	ldr	r0, [pc, #64]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004bcc:	f7fb fe00 	bl	80007d0 <HAL_DMA_Init>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004bd6:	f7ff ff3f 	bl	8004a58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a0b      	ldr	r2, [pc, #44]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004bde:	635a      	str	r2, [r3, #52]	; 0x34
 8004be0:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <HAL_UART_MspInit+0xfc>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004be6:	2200      	movs	r2, #0
 8004be8:	2100      	movs	r1, #0
 8004bea:	2034      	movs	r0, #52	; 0x34
 8004bec:	f7fb fdb9 	bl	8000762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004bf0:	2034      	movs	r0, #52	; 0x34
 8004bf2:	f7fb fdd2 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8004bf6:	bf00      	nop
 8004bf8:	3728      	adds	r7, #40	; 0x28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40004c00 	.word	0x40004c00
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40020000 	.word	0x40020000
 8004c0c:	200000d4 	.word	0x200000d4
 8004c10:	40026040 	.word	0x40026040

08004c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c22:	b480      	push	{r7}
 8004c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c26:	e7fe      	b.n	8004c26 <HardFault_Handler+0x4>

08004c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c2c:	e7fe      	b.n	8004c2c <MemManage_Handler+0x4>

08004c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c32:	e7fe      	b.n	8004c32 <BusFault_Handler+0x4>

08004c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c38:	e7fe      	b.n	8004c38 <UsageFault_Handler+0x4>

08004c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c68:	f7fb fc80 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c6c:	bf00      	nop
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004c74:	4802      	ldr	r0, [pc, #8]	; (8004c80 <DMA1_Stream2_IRQHandler+0x10>)
 8004c76:	f7fb fedb 	bl	8000a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	200000d4 	.word	0x200000d4

08004c84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004c88:	4802      	ldr	r0, [pc, #8]	; (8004c94 <UART4_IRQHandler+0x10>)
 8004c8a:	f7fd f9ef 	bl	800206c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000094 	.word	0x20000094

08004c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
	return 1;
 8004c9c:	2301      	movs	r3, #1
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <_kill>:

int _kill(int pid, int sig)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004cb2:	f000 f99f 	bl	8004ff4 <__errno>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	2316      	movs	r3, #22
 8004cba:	6013      	str	r3, [r2, #0]
	return -1;
 8004cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <_exit>:

void _exit (int status)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ffe7 	bl	8004ca8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004cda:	e7fe      	b.n	8004cda <_exit+0x12>

08004cdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <_sbrk+0x50>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <_sbrk+0x16>
		heap_end = &end;
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <_sbrk+0x50>)
 8004cee:	4a10      	ldr	r2, [pc, #64]	; (8004d30 <_sbrk+0x54>)
 8004cf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <_sbrk+0x50>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <_sbrk+0x50>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4413      	add	r3, r2
 8004d00:	466a      	mov	r2, sp
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d907      	bls.n	8004d16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004d06:	f000 f975 	bl	8004ff4 <__errno>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004d10:	f04f 33ff 	mov.w	r3, #4294967295
 8004d14:	e006      	b.n	8004d24 <_sbrk+0x48>
	}

	heap_end += incr;
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <_sbrk+0x50>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	4a03      	ldr	r2, [pc, #12]	; (8004d2c <_sbrk+0x50>)
 8004d20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004d22:	68fb      	ldr	r3, [r7, #12]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20000264 	.word	0x20000264
 8004d30:	20000280 	.word	0x20000280

08004d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d38:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <SystemInit+0x60>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <SystemInit+0x60>)
 8004d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004d48:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <SystemInit+0x64>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <SystemInit+0x64>)
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d54:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <SystemInit+0x64>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <SystemInit+0x64>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <SystemInit+0x64>)
 8004d60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <SystemInit+0x64>)
 8004d6c:	4a0b      	ldr	r2, [pc, #44]	; (8004d9c <SystemInit+0x68>)
 8004d6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <SystemInit+0x64>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <SystemInit+0x64>)
 8004d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <SystemInit+0x64>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d82:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <SystemInit+0x60>)
 8004d84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d88:	609a      	str	r2, [r3, #8]
#endif
}
 8004d8a:	bf00      	nop
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	e000ed00 	.word	0xe000ed00
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	24003010 	.word	0x24003010

08004da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004da6:	e003      	b.n	8004db0 <LoopCopyDataInit>

08004da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004dae:	3104      	adds	r1, #4

08004db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004db0:	480b      	ldr	r0, [pc, #44]	; (8004de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004db8:	d3f6      	bcc.n	8004da8 <CopyDataInit>
  ldr  r2, =_sbss
 8004dba:	4a0b      	ldr	r2, [pc, #44]	; (8004de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004dbc:	e002      	b.n	8004dc4 <LoopFillZerobss>

08004dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004dc0:	f842 3b04 	str.w	r3, [r2], #4

08004dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004dc8:	d3f9      	bcc.n	8004dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004dca:	f7ff ffb3 	bl	8004d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dce:	f000 f917 	bl	8005000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dd2:	f7ff fd2d 	bl	8004830 <main>
  bx  lr    
 8004dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004dd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ddc:	0800533c 	.word	0x0800533c
  ldr  r0, =_sdata
 8004de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004de4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004de8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8004dec:	2000027c 	.word	0x2000027c

08004df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004df0:	e7fe      	b.n	8004df0 <ADC_IRQHandler>

08004df2 <__cxa_pure_virtual>:
 8004df2:	b508      	push	{r3, lr}
 8004df4:	f000 f82a 	bl	8004e4c <_ZSt9terminatev>

08004df8 <_Znaj>:
 8004df8:	f000 b800 	b.w	8004dfc <_Znwj>

08004dfc <_Znwj>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	bf14      	ite	ne
 8004e02:	4604      	movne	r4, r0
 8004e04:	2401      	moveq	r4, #1
 8004e06:	4620      	mov	r0, r4
 8004e08:	f000 f91e 	bl	8005048 <malloc>
 8004e0c:	b930      	cbnz	r0, 8004e1c <_Znwj+0x20>
 8004e0e:	f000 f807 	bl	8004e20 <_ZSt15get_new_handlerv>
 8004e12:	b908      	cbnz	r0, 8004e18 <_Znwj+0x1c>
 8004e14:	f000 f8e7 	bl	8004fe6 <abort>
 8004e18:	4780      	blx	r0
 8004e1a:	e7f4      	b.n	8004e06 <_Znwj+0xa>
 8004e1c:	bd10      	pop	{r4, pc}
	...

08004e20 <_ZSt15get_new_handlerv>:
 8004e20:	4b02      	ldr	r3, [pc, #8]	; (8004e2c <_ZSt15get_new_handlerv+0xc>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	f3bf 8f5b 	dmb	ish
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000268 	.word	0x20000268

08004e30 <_ZdlPv>:
 8004e30:	f000 b912 	b.w	8005058 <free>

08004e34 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004e34:	b508      	push	{r3, lr}
 8004e36:	4780      	blx	r0
 8004e38:	f000 f8d5 	bl	8004fe6 <abort>

08004e3c <_ZSt13get_terminatev>:
 8004e3c:	4b02      	ldr	r3, [pc, #8]	; (8004e48 <_ZSt13get_terminatev+0xc>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	f3bf 8f5b 	dmb	ish
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	2000000c 	.word	0x2000000c

08004e4c <_ZSt9terminatev>:
 8004e4c:	b508      	push	{r3, lr}
 8004e4e:	f7ff fff5 	bl	8004e3c <_ZSt13get_terminatev>
 8004e52:	f7ff ffef 	bl	8004e34 <_ZN10__cxxabiv111__terminateEPFvvE>

08004e56 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8004e56:	684b      	ldr	r3, [r1, #4]
 8004e58:	6043      	str	r3, [r0, #4]
 8004e5a:	684b      	ldr	r3, [r1, #4]
 8004e5c:	6001      	str	r1, [r0, #0]
 8004e5e:	6018      	str	r0, [r3, #0]
 8004e60:	6048      	str	r0, [r1, #4]
 8004e62:	4770      	bx	lr

08004e64 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8004e64:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	605a      	str	r2, [r3, #4]
 8004e6c:	4770      	bx	lr

08004e6e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8004e6e:	68c3      	ldr	r3, [r0, #12]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	60c2      	str	r2, [r0, #12]
 8004e74:	b102      	cbz	r2, 8004e78 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
 8004e76:	6050      	str	r0, [r2, #4]
 8004e78:	6842      	ldr	r2, [r0, #4]
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	680a      	ldr	r2, [r1, #0]
 8004e7e:	4282      	cmp	r2, r0
 8004e80:	d103      	bne.n	8004e8a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1c>
 8004e82:	600b      	str	r3, [r1, #0]
 8004e84:	6098      	str	r0, [r3, #8]
 8004e86:	6043      	str	r3, [r0, #4]
 8004e88:	4770      	bx	lr
 8004e8a:	6842      	ldr	r2, [r0, #4]
 8004e8c:	6891      	ldr	r1, [r2, #8]
 8004e8e:	4281      	cmp	r1, r0
 8004e90:	bf0c      	ite	eq
 8004e92:	6093      	streq	r3, [r2, #8]
 8004e94:	60d3      	strne	r3, [r2, #12]
 8004e96:	e7f5      	b.n	8004e84 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x16>

08004e98 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8004e98:	6883      	ldr	r3, [r0, #8]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	6082      	str	r2, [r0, #8]
 8004e9e:	b102      	cbz	r2, 8004ea2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
 8004ea0:	6050      	str	r0, [r2, #4]
 8004ea2:	6842      	ldr	r2, [r0, #4]
 8004ea4:	605a      	str	r2, [r3, #4]
 8004ea6:	680a      	ldr	r2, [r1, #0]
 8004ea8:	4282      	cmp	r2, r0
 8004eaa:	d103      	bne.n	8004eb4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1c>
 8004eac:	600b      	str	r3, [r1, #0]
 8004eae:	60d8      	str	r0, [r3, #12]
 8004eb0:	6043      	str	r3, [r0, #4]
 8004eb2:	4770      	bx	lr
 8004eb4:	6842      	ldr	r2, [r0, #4]
 8004eb6:	68d1      	ldr	r1, [r2, #12]
 8004eb8:	4281      	cmp	r1, r0
 8004eba:	bf0c      	ite	eq
 8004ebc:	60d3      	streq	r3, [r2, #12]
 8004ebe:	6093      	strne	r3, [r2, #8]
 8004ec0:	e7f5      	b.n	8004eae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x16>

08004ec2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8004ec2:	7803      	ldrb	r3, [r0, #0]
 8004ec4:	b933      	cbnz	r3, 8004ed4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8004ec6:	6843      	ldr	r3, [r0, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4283      	cmp	r3, r0
 8004ecc:	d102      	bne.n	8004ed4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	4770      	bx	lr
 8004ed4:	6883      	ldr	r3, [r0, #8]
 8004ed6:	b123      	cbz	r3, 8004ee2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	d0f8      	beq.n	8004ed0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8004ede:	4613      	mov	r3, r2
 8004ee0:	e7fa      	b.n	8004ed8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8004ee2:	6843      	ldr	r3, [r0, #4]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	4282      	cmp	r2, r0
 8004ee8:	d1f2      	bne.n	8004ed0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8004eea:	4618      	mov	r0, r3
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	e7f9      	b.n	8004ee4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08004ef0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8004ef0:	68c3      	ldr	r3, [r0, #12]
 8004ef2:	b11b      	cbz	r3, 8004efc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xc>
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	b16a      	cbz	r2, 8004f14 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
 8004ef8:	4613      	mov	r3, r2
 8004efa:	e7fb      	b.n	8004ef4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8004efc:	6842      	ldr	r2, [r0, #4]
 8004efe:	4603      	mov	r3, r0
 8004f00:	68d1      	ldr	r1, [r2, #12]
 8004f02:	4299      	cmp	r1, r3
 8004f04:	d102      	bne.n	8004f0c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8004f06:	4613      	mov	r3, r2
 8004f08:	6852      	ldr	r2, [r2, #4]
 8004f0a:	e7f9      	b.n	8004f00 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	428a      	cmp	r2, r1
 8004f10:	bf18      	it	ne
 8004f12:	4613      	movne	r3, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	4770      	bx	lr

08004f18 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8004f18:	f7ff bfd3 	b.w	8004ec2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08004f1c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8004f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	461f      	mov	r7, r3
 8004f22:	f103 0904 	add.w	r9, r3, #4
 8004f26:	2300      	movs	r3, #0
 8004f28:	460c      	mov	r4, r1
 8004f2a:	604a      	str	r2, [r1, #4]
 8004f2c:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8004f30:	700b      	strb	r3, [r1, #0]
 8004f32:	b318      	cbz	r0, 8004f7c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x60>
 8004f34:	4297      	cmp	r7, r2
 8004f36:	6091      	str	r1, [r2, #8]
 8004f38:	d11b      	bne.n	8004f72 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x56>
 8004f3a:	6079      	str	r1, [r7, #4]
 8004f3c:	60fc      	str	r4, [r7, #12]
 8004f3e:	f04f 0801 	mov.w	r8, #1
 8004f42:	f04f 0a00 	mov.w	sl, #0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	42a3      	cmp	r3, r4
 8004f4a:	d045      	beq.n	8004fd8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 8004f4c:	6866      	ldr	r6, [r4, #4]
 8004f4e:	7832      	ldrb	r2, [r6, #0]
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	d141      	bne.n	8004fd8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 8004f54:	6875      	ldr	r5, [r6, #4]
 8004f56:	68ab      	ldr	r3, [r5, #8]
 8004f58:	429e      	cmp	r6, r3
 8004f5a:	d127      	bne.n	8004fac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
 8004f5c:	68eb      	ldr	r3, [r5, #12]
 8004f5e:	b193      	cbz	r3, 8004f86 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6a>
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	b982      	cbnz	r2, 8004f86 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6a>
 8004f64:	f886 8000 	strb.w	r8, [r6]
 8004f68:	f883 8000 	strb.w	r8, [r3]
 8004f6c:	702a      	strb	r2, [r5, #0]
 8004f6e:	462c      	mov	r4, r5
 8004f70:	e7e9      	b.n	8004f46 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d1e2      	bne.n	8004f3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	e7e0      	b.n	8004f3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8004f7c:	60d1      	str	r1, [r2, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d1dc      	bne.n	8004f3e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8004f84:	e7da      	b.n	8004f3c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8004f86:	68f3      	ldr	r3, [r6, #12]
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	d104      	bne.n	8004f96 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7a>
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7ff ff6d 	bl	8004e6e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8004f94:	4634      	mov	r4, r6
 8004f96:	6863      	ldr	r3, [r4, #4]
 8004f98:	4649      	mov	r1, r9
 8004f9a:	f883 8000 	strb.w	r8, [r3]
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f885 a000 	strb.w	sl, [r5]
 8004fa4:	f7ff ff78 	bl	8004e98 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8004fa8:	4625      	mov	r5, r4
 8004faa:	e7e0      	b.n	8004f6e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x52>
 8004fac:	b113      	cbz	r3, 8004fb4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
 8004fae:	781a      	ldrb	r2, [r3, #0]
 8004fb0:	2a00      	cmp	r2, #0
 8004fb2:	d0d7      	beq.n	8004f64 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x48>
 8004fb4:	68b3      	ldr	r3, [r6, #8]
 8004fb6:	42a3      	cmp	r3, r4
 8004fb8:	d104      	bne.n	8004fc4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
 8004fba:	4649      	mov	r1, r9
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f7ff ff6b 	bl	8004e98 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8004fc2:	4634      	mov	r4, r6
 8004fc4:	6863      	ldr	r3, [r4, #4]
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	f883 8000 	strb.w	r8, [r3]
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f885 a000 	strb.w	sl, [r5]
 8004fd2:	f7ff ff4c 	bl	8004e6e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8004fd6:	e7e7      	b.n	8004fa8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8c>
 8004fd8:	2201      	movs	r2, #1
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004fe0 <_ZSt17__throw_bad_allocv>:
 8004fe0:	b508      	push	{r3, lr}
 8004fe2:	f000 f800 	bl	8004fe6 <abort>

08004fe6 <abort>:
 8004fe6:	b508      	push	{r3, lr}
 8004fe8:	2006      	movs	r0, #6
 8004fea:	f000 f925 	bl	8005238 <raise>
 8004fee:	2001      	movs	r0, #1
 8004ff0:	f7ff fe6a 	bl	8004cc8 <_exit>

08004ff4 <__errno>:
 8004ff4:	4b01      	ldr	r3, [pc, #4]	; (8004ffc <__errno+0x8>)
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000010 	.word	0x20000010

08005000 <__libc_init_array>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	4e0d      	ldr	r6, [pc, #52]	; (8005038 <__libc_init_array+0x38>)
 8005004:	4c0d      	ldr	r4, [pc, #52]	; (800503c <__libc_init_array+0x3c>)
 8005006:	1ba4      	subs	r4, r4, r6
 8005008:	10a4      	asrs	r4, r4, #2
 800500a:	2500      	movs	r5, #0
 800500c:	42a5      	cmp	r5, r4
 800500e:	d109      	bne.n	8005024 <__libc_init_array+0x24>
 8005010:	4e0b      	ldr	r6, [pc, #44]	; (8005040 <__libc_init_array+0x40>)
 8005012:	4c0c      	ldr	r4, [pc, #48]	; (8005044 <__libc_init_array+0x44>)
 8005014:	f000 f92e 	bl	8005274 <_init>
 8005018:	1ba4      	subs	r4, r4, r6
 800501a:	10a4      	asrs	r4, r4, #2
 800501c:	2500      	movs	r5, #0
 800501e:	42a5      	cmp	r5, r4
 8005020:	d105      	bne.n	800502e <__libc_init_array+0x2e>
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005028:	4798      	blx	r3
 800502a:	3501      	adds	r5, #1
 800502c:	e7ee      	b.n	800500c <__libc_init_array+0xc>
 800502e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005032:	4798      	blx	r3
 8005034:	3501      	adds	r5, #1
 8005036:	e7f2      	b.n	800501e <__libc_init_array+0x1e>
 8005038:	0800532c 	.word	0x0800532c
 800503c:	0800532c 	.word	0x0800532c
 8005040:	0800532c 	.word	0x0800532c
 8005044:	08005338 	.word	0x08005338

08005048 <malloc>:
 8005048:	4b02      	ldr	r3, [pc, #8]	; (8005054 <malloc+0xc>)
 800504a:	4601      	mov	r1, r0
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	f000 b861 	b.w	8005114 <_malloc_r>
 8005052:	bf00      	nop
 8005054:	20000010 	.word	0x20000010

08005058 <free>:
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <free+0xc>)
 800505a:	4601      	mov	r1, r0
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	f000 b80b 	b.w	8005078 <_free_r>
 8005062:	bf00      	nop
 8005064:	20000010 	.word	0x20000010

08005068 <memset>:
 8005068:	4402      	add	r2, r0
 800506a:	4603      	mov	r3, r0
 800506c:	4293      	cmp	r3, r2
 800506e:	d100      	bne.n	8005072 <memset+0xa>
 8005070:	4770      	bx	lr
 8005072:	f803 1b01 	strb.w	r1, [r3], #1
 8005076:	e7f9      	b.n	800506c <memset+0x4>

08005078 <_free_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4605      	mov	r5, r0
 800507c:	2900      	cmp	r1, #0
 800507e:	d045      	beq.n	800510c <_free_r+0x94>
 8005080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005084:	1f0c      	subs	r4, r1, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	bfb8      	it	lt
 800508a:	18e4      	addlt	r4, r4, r3
 800508c:	f000 f8f0 	bl	8005270 <__malloc_lock>
 8005090:	4a1f      	ldr	r2, [pc, #124]	; (8005110 <_free_r+0x98>)
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	4610      	mov	r0, r2
 8005096:	b933      	cbnz	r3, 80050a6 <_free_r+0x2e>
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	6014      	str	r4, [r2, #0]
 800509c:	4628      	mov	r0, r5
 800509e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a2:	f000 b8e6 	b.w	8005272 <__malloc_unlock>
 80050a6:	42a3      	cmp	r3, r4
 80050a8:	d90c      	bls.n	80050c4 <_free_r+0x4c>
 80050aa:	6821      	ldr	r1, [r4, #0]
 80050ac:	1862      	adds	r2, r4, r1
 80050ae:	4293      	cmp	r3, r2
 80050b0:	bf04      	itt	eq
 80050b2:	681a      	ldreq	r2, [r3, #0]
 80050b4:	685b      	ldreq	r3, [r3, #4]
 80050b6:	6063      	str	r3, [r4, #4]
 80050b8:	bf04      	itt	eq
 80050ba:	1852      	addeq	r2, r2, r1
 80050bc:	6022      	streq	r2, [r4, #0]
 80050be:	6004      	str	r4, [r0, #0]
 80050c0:	e7ec      	b.n	800509c <_free_r+0x24>
 80050c2:	4613      	mov	r3, r2
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	b10a      	cbz	r2, 80050cc <_free_r+0x54>
 80050c8:	42a2      	cmp	r2, r4
 80050ca:	d9fa      	bls.n	80050c2 <_free_r+0x4a>
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	1858      	adds	r0, r3, r1
 80050d0:	42a0      	cmp	r0, r4
 80050d2:	d10b      	bne.n	80050ec <_free_r+0x74>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	4401      	add	r1, r0
 80050d8:	1858      	adds	r0, r3, r1
 80050da:	4282      	cmp	r2, r0
 80050dc:	6019      	str	r1, [r3, #0]
 80050de:	d1dd      	bne.n	800509c <_free_r+0x24>
 80050e0:	6810      	ldr	r0, [r2, #0]
 80050e2:	6852      	ldr	r2, [r2, #4]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	4401      	add	r1, r0
 80050e8:	6019      	str	r1, [r3, #0]
 80050ea:	e7d7      	b.n	800509c <_free_r+0x24>
 80050ec:	d902      	bls.n	80050f4 <_free_r+0x7c>
 80050ee:	230c      	movs	r3, #12
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	e7d3      	b.n	800509c <_free_r+0x24>
 80050f4:	6820      	ldr	r0, [r4, #0]
 80050f6:	1821      	adds	r1, r4, r0
 80050f8:	428a      	cmp	r2, r1
 80050fa:	bf04      	itt	eq
 80050fc:	6811      	ldreq	r1, [r2, #0]
 80050fe:	6852      	ldreq	r2, [r2, #4]
 8005100:	6062      	str	r2, [r4, #4]
 8005102:	bf04      	itt	eq
 8005104:	1809      	addeq	r1, r1, r0
 8005106:	6021      	streq	r1, [r4, #0]
 8005108:	605c      	str	r4, [r3, #4]
 800510a:	e7c7      	b.n	800509c <_free_r+0x24>
 800510c:	bd38      	pop	{r3, r4, r5, pc}
 800510e:	bf00      	nop
 8005110:	2000026c 	.word	0x2000026c

08005114 <_malloc_r>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	1ccd      	adds	r5, r1, #3
 8005118:	f025 0503 	bic.w	r5, r5, #3
 800511c:	3508      	adds	r5, #8
 800511e:	2d0c      	cmp	r5, #12
 8005120:	bf38      	it	cc
 8005122:	250c      	movcc	r5, #12
 8005124:	2d00      	cmp	r5, #0
 8005126:	4606      	mov	r6, r0
 8005128:	db01      	blt.n	800512e <_malloc_r+0x1a>
 800512a:	42a9      	cmp	r1, r5
 800512c:	d903      	bls.n	8005136 <_malloc_r+0x22>
 800512e:	230c      	movs	r3, #12
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	2000      	movs	r0, #0
 8005134:	bd70      	pop	{r4, r5, r6, pc}
 8005136:	f000 f89b 	bl	8005270 <__malloc_lock>
 800513a:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <_malloc_r+0xac>)
 800513c:	6814      	ldr	r4, [r2, #0]
 800513e:	4621      	mov	r1, r4
 8005140:	b991      	cbnz	r1, 8005168 <_malloc_r+0x54>
 8005142:	4c20      	ldr	r4, [pc, #128]	; (80051c4 <_malloc_r+0xb0>)
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	b91b      	cbnz	r3, 8005150 <_malloc_r+0x3c>
 8005148:	4630      	mov	r0, r6
 800514a:	f000 f83d 	bl	80051c8 <_sbrk_r>
 800514e:	6020      	str	r0, [r4, #0]
 8005150:	4629      	mov	r1, r5
 8005152:	4630      	mov	r0, r6
 8005154:	f000 f838 	bl	80051c8 <_sbrk_r>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d124      	bne.n	80051a6 <_malloc_r+0x92>
 800515c:	230c      	movs	r3, #12
 800515e:	6033      	str	r3, [r6, #0]
 8005160:	4630      	mov	r0, r6
 8005162:	f000 f886 	bl	8005272 <__malloc_unlock>
 8005166:	e7e4      	b.n	8005132 <_malloc_r+0x1e>
 8005168:	680b      	ldr	r3, [r1, #0]
 800516a:	1b5b      	subs	r3, r3, r5
 800516c:	d418      	bmi.n	80051a0 <_malloc_r+0x8c>
 800516e:	2b0b      	cmp	r3, #11
 8005170:	d90f      	bls.n	8005192 <_malloc_r+0x7e>
 8005172:	600b      	str	r3, [r1, #0]
 8005174:	50cd      	str	r5, [r1, r3]
 8005176:	18cc      	adds	r4, r1, r3
 8005178:	4630      	mov	r0, r6
 800517a:	f000 f87a 	bl	8005272 <__malloc_unlock>
 800517e:	f104 000b 	add.w	r0, r4, #11
 8005182:	1d23      	adds	r3, r4, #4
 8005184:	f020 0007 	bic.w	r0, r0, #7
 8005188:	1ac3      	subs	r3, r0, r3
 800518a:	d0d3      	beq.n	8005134 <_malloc_r+0x20>
 800518c:	425a      	negs	r2, r3
 800518e:	50e2      	str	r2, [r4, r3]
 8005190:	e7d0      	b.n	8005134 <_malloc_r+0x20>
 8005192:	428c      	cmp	r4, r1
 8005194:	684b      	ldr	r3, [r1, #4]
 8005196:	bf16      	itet	ne
 8005198:	6063      	strne	r3, [r4, #4]
 800519a:	6013      	streq	r3, [r2, #0]
 800519c:	460c      	movne	r4, r1
 800519e:	e7eb      	b.n	8005178 <_malloc_r+0x64>
 80051a0:	460c      	mov	r4, r1
 80051a2:	6849      	ldr	r1, [r1, #4]
 80051a4:	e7cc      	b.n	8005140 <_malloc_r+0x2c>
 80051a6:	1cc4      	adds	r4, r0, #3
 80051a8:	f024 0403 	bic.w	r4, r4, #3
 80051ac:	42a0      	cmp	r0, r4
 80051ae:	d005      	beq.n	80051bc <_malloc_r+0xa8>
 80051b0:	1a21      	subs	r1, r4, r0
 80051b2:	4630      	mov	r0, r6
 80051b4:	f000 f808 	bl	80051c8 <_sbrk_r>
 80051b8:	3001      	adds	r0, #1
 80051ba:	d0cf      	beq.n	800515c <_malloc_r+0x48>
 80051bc:	6025      	str	r5, [r4, #0]
 80051be:	e7db      	b.n	8005178 <_malloc_r+0x64>
 80051c0:	2000026c 	.word	0x2000026c
 80051c4:	20000270 	.word	0x20000270

080051c8 <_sbrk_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4c06      	ldr	r4, [pc, #24]	; (80051e4 <_sbrk_r+0x1c>)
 80051cc:	2300      	movs	r3, #0
 80051ce:	4605      	mov	r5, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	f7ff fd82 	bl	8004cdc <_sbrk>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_sbrk_r+0x1a>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_sbrk_r+0x1a>
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	20000278 	.word	0x20000278

080051e8 <_raise_r>:
 80051e8:	291f      	cmp	r1, #31
 80051ea:	b538      	push	{r3, r4, r5, lr}
 80051ec:	4604      	mov	r4, r0
 80051ee:	460d      	mov	r5, r1
 80051f0:	d904      	bls.n	80051fc <_raise_r+0x14>
 80051f2:	2316      	movs	r3, #22
 80051f4:	6003      	str	r3, [r0, #0]
 80051f6:	f04f 30ff 	mov.w	r0, #4294967295
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80051fe:	b112      	cbz	r2, 8005206 <_raise_r+0x1e>
 8005200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005204:	b94b      	cbnz	r3, 800521a <_raise_r+0x32>
 8005206:	4620      	mov	r0, r4
 8005208:	f000 f830 	bl	800526c <_getpid_r>
 800520c:	462a      	mov	r2, r5
 800520e:	4601      	mov	r1, r0
 8005210:	4620      	mov	r0, r4
 8005212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005216:	f000 b817 	b.w	8005248 <_kill_r>
 800521a:	2b01      	cmp	r3, #1
 800521c:	d00a      	beq.n	8005234 <_raise_r+0x4c>
 800521e:	1c59      	adds	r1, r3, #1
 8005220:	d103      	bne.n	800522a <_raise_r+0x42>
 8005222:	2316      	movs	r3, #22
 8005224:	6003      	str	r3, [r0, #0]
 8005226:	2001      	movs	r0, #1
 8005228:	e7e7      	b.n	80051fa <_raise_r+0x12>
 800522a:	2400      	movs	r4, #0
 800522c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005230:	4628      	mov	r0, r5
 8005232:	4798      	blx	r3
 8005234:	2000      	movs	r0, #0
 8005236:	e7e0      	b.n	80051fa <_raise_r+0x12>

08005238 <raise>:
 8005238:	4b02      	ldr	r3, [pc, #8]	; (8005244 <raise+0xc>)
 800523a:	4601      	mov	r1, r0
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	f7ff bfd3 	b.w	80051e8 <_raise_r>
 8005242:	bf00      	nop
 8005244:	20000010 	.word	0x20000010

08005248 <_kill_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4c07      	ldr	r4, [pc, #28]	; (8005268 <_kill_r+0x20>)
 800524c:	2300      	movs	r3, #0
 800524e:	4605      	mov	r5, r0
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	f7ff fd27 	bl	8004ca8 <_kill>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	d102      	bne.n	8005264 <_kill_r+0x1c>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	b103      	cbz	r3, 8005264 <_kill_r+0x1c>
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	bd38      	pop	{r3, r4, r5, pc}
 8005266:	bf00      	nop
 8005268:	20000278 	.word	0x20000278

0800526c <_getpid_r>:
 800526c:	f7ff bd14 	b.w	8004c98 <_getpid>

08005270 <__malloc_lock>:
 8005270:	4770      	bx	lr

08005272 <__malloc_unlock>:
 8005272:	4770      	bx	lr

08005274 <_init>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr

08005280 <_fini>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr
