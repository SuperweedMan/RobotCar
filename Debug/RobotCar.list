
RobotCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b90  08008b90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b98  08008b98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000074  08008c18  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08008c18  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045e43  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051d4  00000000  00000000  00065ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c8  00000000  00000000  0006b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018a0  00000000  00000000  0006ca88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023224  00000000  00000000  0006e328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc57  00000000  00000000  0009154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000efea8  00000000  00000000  000a11a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019104b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a4c  00000000  00000000  001910c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800894c 	.word	0x0800894c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800894c 	.word	0x0800894c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f92b 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f007 fd84 	bl	8008018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f943 	bl	80007c6 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f90b 	bl	8000772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000144 	.word	0x20000144

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000144 	.word	0x20000144

080005bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db0b      	blt.n	800064a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 021f 	and.w	r2, r3, #31
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <__NVIC_EnableIRQ+0x38>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000e100 	.word	0xe000e100

0800065c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	db0a      	blt.n	8000686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	b2da      	uxtb	r2, r3
 8000674:	490c      	ldr	r1, [pc, #48]	; (80006a8 <__NVIC_SetPriority+0x4c>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	0112      	lsls	r2, r2, #4
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	440b      	add	r3, r1
 8000680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000684:	e00a      	b.n	800069c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4908      	ldr	r1, [pc, #32]	; (80006ac <__NVIC_SetPriority+0x50>)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	f003 030f 	and.w	r3, r3, #15
 8000692:	3b04      	subs	r3, #4
 8000694:	0112      	lsls	r2, r2, #4
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	440b      	add	r3, r1
 800069a:	761a      	strb	r2, [r3, #24]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	bf28      	it	cs
 80006ce:	2304      	movcs	r3, #4
 80006d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d902      	bls.n	80006e0 <NVIC_EncodePriority+0x30>
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3b03      	subs	r3, #3
 80006de:	e000      	b.n	80006e2 <NVIC_EncodePriority+0x32>
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 32ff 	mov.w	r2, #4294967295
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	43da      	mvns	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	401a      	ands	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f8:	f04f 31ff 	mov.w	r1, #4294967295
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	43d9      	mvns	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4313      	orrs	r3, r2
         );
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	; 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000728:	d301      	bcc.n	800072e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2301      	movs	r3, #1
 800072c:	e00f      	b.n	800074e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <SysTick_Config+0x40>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000736:	210f      	movs	r1, #15
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f7ff ff8e 	bl	800065c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SysTick_Config+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <SysTick_Config+0x40>)
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff29 	bl	80005bc <__NVIC_SetPriorityGrouping>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000784:	f7ff ff3e 	bl	8000604 <__NVIC_GetPriorityGrouping>
 8000788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ff8e 	bl	80006b0 <NVIC_EncodePriority>
 8000794:	4602      	mov	r2, r0
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff5d 	bl	800065c <__NVIC_SetPriority>
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff31 	bl	8000620 <__NVIC_EnableIRQ>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffa2 	bl	8000718 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff feda 	bl	80005a4 <HAL_GetTick>
 80007f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e099      	b.n	8000930 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2202      	movs	r2, #2
 8000808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f022 0201 	bic.w	r2, r2, #1
 800081a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800081c:	e00f      	b.n	800083e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800081e:	f7ff fec1 	bl	80005a4 <HAL_GetTick>
 8000822:	4602      	mov	r2, r0
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	2b05      	cmp	r3, #5
 800082a:	d908      	bls.n	800083e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2220      	movs	r2, #32
 8000830:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2203      	movs	r2, #3
 8000836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800083a:	2303      	movs	r3, #3
 800083c:	e078      	b.n	8000930 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e8      	bne.n	800081e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	4b38      	ldr	r3, [pc, #224]	; (8000938 <HAL_DMA_Init+0x158>)
 8000858:	4013      	ands	r3, r2
 800085a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800086a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6a1b      	ldr	r3, [r3, #32]
 8000888:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	4313      	orrs	r3, r2
 800088e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000894:	2b04      	cmp	r3, #4
 8000896:	d107      	bne.n	80008a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	4313      	orrs	r3, r2
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f023 0307 	bic.w	r3, r3, #7
 80008be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d117      	bne.n	8000902 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	4313      	orrs	r3, r2
 80008da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00e      	beq.n	8000902 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f000 fa99 	bl	8000e1c <DMA_CheckFifoParam>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d008      	beq.n	8000902 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2240      	movs	r2, #64	; 0x40
 80008f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80008fe:	2301      	movs	r3, #1
 8000900:	e016      	b.n	8000930 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 fa50 	bl	8000db0 <DMA_CalcBaseAndBitshift>
 8000910:	4603      	mov	r3, r0
 8000912:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000918:	223f      	movs	r2, #63	; 0x3f
 800091a:	409a      	lsls	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2201      	movs	r2, #1
 800092a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	f010803f 	.word	0xf010803f

0800093c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800095a:	2b01      	cmp	r3, #1
 800095c:	d101      	bne.n	8000962 <HAL_DMA_Start_IT+0x26>
 800095e:	2302      	movs	r3, #2
 8000960:	e048      	b.n	80009f4 <HAL_DMA_Start_IT+0xb8>
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2201      	movs	r2, #1
 8000966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b01      	cmp	r3, #1
 8000974:	d137      	bne.n	80009e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2202      	movs	r2, #2
 800097a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f000 f9e2 	bl	8000d54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000994:	223f      	movs	r2, #63	; 0x3f
 8000996:	409a      	lsls	r2, r3
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0216 	orr.w	r2, r2, #22
 80009aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d007      	beq.n	80009d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0208 	orr.w	r2, r2, #8
 80009d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0201 	orr.w	r2, r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	e005      	b.n	80009f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009ee:	2302      	movs	r3, #2
 80009f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d004      	beq.n	8000a1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00c      	b.n	8000a34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2205      	movs	r2, #5
 8000a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 0201 	bic.w	r2, r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a4c:	4b92      	ldr	r3, [pc, #584]	; (8000c98 <HAL_DMA_IRQHandler+0x258>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a92      	ldr	r2, [pc, #584]	; (8000c9c <HAL_DMA_IRQHandler+0x25c>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0a9b      	lsrs	r3, r3, #10
 8000a58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	409a      	lsls	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4013      	ands	r3, r2
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d01a      	beq.n	8000aac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d013      	beq.n	8000aac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 0204 	bic.w	r2, r2, #4
 8000a92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a98:	2208      	movs	r2, #8
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aa4:	f043 0201 	orr.w	r2, r3, #1
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d012      	beq.n	8000ae2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00b      	beq.n	8000ae2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ace:	2201      	movs	r2, #1
 8000ad0:	409a      	lsls	r2, r3
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ada:	f043 0202 	orr.w	r2, r3, #2
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4013      	ands	r3, r2
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d012      	beq.n	8000b18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b04:	2204      	movs	r2, #4
 8000b06:	409a      	lsls	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b10:	f043 0204 	orr.w	r2, r3, #4
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b1c:	2210      	movs	r2, #16
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d043      	beq.n	8000bb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d03c      	beq.n	8000bb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d018      	beq.n	8000b82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d108      	bne.n	8000b70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d024      	beq.n	8000bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	4798      	blx	r3
 8000b6e:	e01f      	b.n	8000bb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d01b      	beq.n	8000bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	4798      	blx	r3
 8000b80:	e016      	b.n	8000bb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d107      	bne.n	8000ba0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0208 	bic.w	r2, r2, #8
 8000b9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb4:	2220      	movs	r2, #32
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 808e 	beq.w	8000cde <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f000 8086 	beq.w	8000cde <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b05      	cmp	r3, #5
 8000be8:	d136      	bne.n	8000c58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0216 	bic.w	r2, r2, #22
 8000bf8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <HAL_DMA_IRQHandler+0x1da>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0208 	bic.w	r2, r2, #8
 8000c28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c2e:	223f      	movs	r2, #63	; 0x3f
 8000c30:	409a      	lsls	r2, r3
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d07d      	beq.n	8000d4a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	4798      	blx	r3
        }
        return;
 8000c56:	e078      	b.n	8000d4a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d01c      	beq.n	8000ca0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d108      	bne.n	8000c86 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d030      	beq.n	8000cde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	4798      	blx	r3
 8000c84:	e02b      	b.n	8000cde <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d027      	beq.n	8000cde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	4798      	blx	r3
 8000c96:	e022      	b.n	8000cde <HAL_DMA_IRQHandler+0x29e>
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10f      	bne.n	8000cce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0210 	bic.w	r2, r2, #16
 8000cbc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d032      	beq.n	8000d4c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d022      	beq.n	8000d38 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0201 	bic.w	r2, r2, #1
 8000d08:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d307      	bcc.n	8000d26 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f2      	bne.n	8000d0a <HAL_DMA_IRQHandler+0x2ca>
 8000d24:	e000      	b.n	8000d28 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d26:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	4798      	blx	r3
 8000d48:	e000      	b.n	8000d4c <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d4a:	bf00      	nop
    }
  }
}
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop

08000d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b40      	cmp	r3, #64	; 0x40
 8000d80:	d108      	bne.n	8000d94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d92:	e007      	b.n	8000da4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	60da      	str	r2, [r3, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	3b10      	subs	r3, #16
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <DMA_CalcBaseAndBitshift+0x64>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <DMA_CalcBaseAndBitshift+0x68>)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d909      	bls.n	8000df2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000de6:	f023 0303 	bic.w	r3, r3, #3
 8000dea:	1d1a      	adds	r2, r3, #4
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	659a      	str	r2, [r3, #88]	; 0x58
 8000df0:	e007      	b.n	8000e02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dfa:	f023 0303 	bic.w	r3, r3, #3
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	aaaaaaab 	.word	0xaaaaaaab
 8000e18:	08008970 	.word	0x08008970

08000e1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d11f      	bne.n	8000e76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d855      	bhi.n	8000ee8 <DMA_CheckFifoParam+0xcc>
 8000e3c:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <DMA_CheckFifoParam+0x28>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000e67 	.word	0x08000e67
 8000e4c:	08000e55 	.word	0x08000e55
 8000e50:	08000ee9 	.word	0x08000ee9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d045      	beq.n	8000eec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e64:	e042      	b.n	8000eec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e6e:	d13f      	bne.n	8000ef0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e74:	e03c      	b.n	8000ef0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e7e:	d121      	bne.n	8000ec4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d836      	bhi.n	8000ef4 <DMA_CheckFifoParam+0xd8>
 8000e86:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <DMA_CheckFifoParam+0x70>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000e9d 	.word	0x08000e9d
 8000e90:	08000ea3 	.word	0x08000ea3
 8000e94:	08000e9d 	.word	0x08000e9d
 8000e98:	08000eb5 	.word	0x08000eb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8000ea0:	e02f      	b.n	8000f02 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d024      	beq.n	8000ef8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eb2:	e021      	b.n	8000ef8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ebc:	d11e      	bne.n	8000efc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000ec2:	e01b      	b.n	8000efc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d902      	bls.n	8000ed0 <DMA_CheckFifoParam+0xb4>
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d003      	beq.n	8000ed6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000ece:	e018      	b.n	8000f02 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8000ed4:	e015      	b.n	8000f02 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00e      	beq.n	8000f00 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8000ee6:	e00b      	b.n	8000f00 <DMA_CheckFifoParam+0xe4>
      break;
 8000ee8:	bf00      	nop
 8000eea:	e00a      	b.n	8000f02 <DMA_CheckFifoParam+0xe6>
      break;
 8000eec:	bf00      	nop
 8000eee:	e008      	b.n	8000f02 <DMA_CheckFifoParam+0xe6>
      break;
 8000ef0:	bf00      	nop
 8000ef2:	e006      	b.n	8000f02 <DMA_CheckFifoParam+0xe6>
      break;
 8000ef4:	bf00      	nop
 8000ef6:	e004      	b.n	8000f02 <DMA_CheckFifoParam+0xe6>
      break;
 8000ef8:	bf00      	nop
 8000efa:	e002      	b.n	8000f02 <DMA_CheckFifoParam+0xe6>
      break;   
 8000efc:	bf00      	nop
 8000efe:	e000      	b.n	8000f02 <DMA_CheckFifoParam+0xe6>
      break;
 8000f00:	bf00      	nop
    }
  } 
  
  return status; 
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e16b      	b.n	8001204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 815a 	bne.w	80011fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x4a>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d123      	bne.n	8000fa2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	69b9      	ldr	r1, [r7, #24]
 8000f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0203 	and.w	r2, r3, #3
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_GPIO_Init+0xe6>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fea:	2b11      	cmp	r3, #17
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d130      	bne.n	8001058 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	f003 0201 	and.w	r2, r3, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80b4 	beq.w	80011fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b5f      	ldr	r3, [pc, #380]	; (8001218 <HAL_GPIO_Init+0x308>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a5e      	ldr	r2, [pc, #376]	; (8001218 <HAL_GPIO_Init+0x308>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b5c      	ldr	r3, [pc, #368]	; (8001218 <HAL_GPIO_Init+0x308>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a5a      	ldr	r2, [pc, #360]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a51      	ldr	r2, [pc, #324]	; (8001220 <HAL_GPIO_Init+0x310>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x226>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a50      	ldr	r2, [pc, #320]	; (8001224 <HAL_GPIO_Init+0x314>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x222>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <HAL_GPIO_Init+0x318>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x21e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4e      	ldr	r2, [pc, #312]	; (800122c <HAL_GPIO_Init+0x31c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4d      	ldr	r2, [pc, #308]	; (8001230 <HAL_GPIO_Init+0x320>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4c      	ldr	r2, [pc, #304]	; (8001234 <HAL_GPIO_Init+0x324>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4b      	ldr	r2, [pc, #300]	; (8001238 <HAL_GPIO_Init+0x328>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4a      	ldr	r2, [pc, #296]	; (800123c <HAL_GPIO_Init+0x32c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x20a>
 8001116:	2307      	movs	r3, #7
 8001118:	e00e      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111a:	2308      	movs	r3, #8
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111e:	2306      	movs	r3, #6
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4934      	ldr	r1, [pc, #208]	; (800121c <HAL_GPIO_Init+0x30c>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_GPIO_Init+0x330>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117a:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_GPIO_Init+0x330>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_GPIO_Init+0x330>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae90 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	3724      	adds	r7, #36	; 0x24
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40021c00 	.word	0x40021c00
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e22d      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	4ba3      	ldr	r3, [pc, #652]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4ba0      	ldr	r3, [pc, #640]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b9d      	ldr	r3, [pc, #628]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b99      	ldr	r3, [pc, #612]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e208      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b91      	ldr	r3, [pc, #580]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a90      	ldr	r2, [pc, #576]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b8b      	ldr	r3, [pc, #556]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a8a      	ldr	r2, [pc, #552]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a87      	ldr	r2, [pc, #540]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a83      	ldr	r2, [pc, #524]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a80      	ldr	r2, [pc, #512]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff f952 	bl	80005a4 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff f94e 	bl	80005a4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e1cd      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b76      	ldr	r3, [pc, #472]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff f93e 	bl	80005a4 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff f93a 	bl	80005a4 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1b9      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b6c      	ldr	r3, [pc, #432]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	4b65      	ldr	r3, [pc, #404]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b62      	ldr	r3, [pc, #392]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e18d      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b56      	ldr	r3, [pc, #344]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4952      	ldr	r1, [pc, #328]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <HAL_RCC_OscConfig+0x2b0>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff f8f3 	bl	80005a4 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff f8ef 	bl	80005a4 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e16e      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4940      	ldr	r1, [pc, #256]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <HAL_RCC_OscConfig+0x2b0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff f8d2 	bl	80005a4 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff f8ce 	bl	80005a4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e14d      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d030      	beq.n	8001490 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x2b4>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff f8b2 	bl	80005a4 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff f8ae 	bl	80005a4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e12d      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e015      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x2b4>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff f89b 	bl	80005a4 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff f897 	bl	80005a4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e116      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a0 	beq.w	80015de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d121      	bne.n	800151e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff f85d 	bl	80005a4 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e011      	b.n	8001512 <HAL_RCC_OscConfig+0x2ce>
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	42470000 	.word	0x42470000
 80014f8:	42470e80 	.word	0x42470e80
 80014fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001500:	f7ff f850 	bl	80005a4 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e0cf      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x2f0>
 8001526:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a65      	ldr	r2, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	e01c      	b.n	800156e <HAL_RCC_OscConfig+0x32a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x312>
 800153c:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a5f      	ldr	r2, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	e00b      	b.n	800156e <HAL_RCC_OscConfig+0x32a>
 8001556:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a59      	ldr	r2, [pc, #356]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
 8001562:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff f815 	bl	80005a4 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff f811 	bl	80005a4 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e08e      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ee      	beq.n	800157e <HAL_RCC_OscConfig+0x33a>
 80015a0:	e014      	b.n	80015cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7fe ffff 	bl	80005a4 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7fe fffb 	bl	80005a4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e078      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d105      	bne.n	80015de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a3a      	ldr	r2, [pc, #232]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 80015d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d064      	beq.n	80016b0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d05c      	beq.n	80016ac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d141      	bne.n	800167e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_RCC_OscConfig+0x480>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7fe ffd0 	bl	80005a4 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001608:	f7fe ffcc 	bl	80005a4 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e04b      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	019b      	lsls	r3, r3, #6
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	085b      	lsrs	r3, r3, #1
 800163e:	3b01      	subs	r3, #1
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	061b      	lsls	r3, r3, #24
 800164a:	491d      	ldr	r1, [pc, #116]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_RCC_OscConfig+0x480>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7fe ffa5 	bl	80005a4 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7fe ffa1 	bl	80005a4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e020      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x41a>
 800167c:	e018      	b.n	80016b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_RCC_OscConfig+0x480>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7fe ff8e 	bl	80005a4 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168c:	f7fe ff8a 	bl	80005a4 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e009      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_RCC_OscConfig+0x47c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x448>
 80016aa:	e001      	b.n	80016b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40007000 	.word	0x40007000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	42470060 	.word	0x42470060

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0ca      	b.n	8001872 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d90c      	bls.n	8001704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b64      	ldr	r3, [pc, #400]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b62      	ldr	r3, [pc, #392]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0b6      	b.n	8001872 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	4b58      	ldr	r3, [pc, #352]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a57      	ldr	r2, [pc, #348]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001734:	4b52      	ldr	r3, [pc, #328]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	494c      	ldr	r1, [pc, #304]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d044      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d119      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07d      	b.n	8001872 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	2b03      	cmp	r3, #3
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06d      	b.n	8001872 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e065      	b.n	8001872 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4b36      	ldr	r3, [pc, #216]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 0203 	bic.w	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4933      	ldr	r1, [pc, #204]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b8:	f7fe fef4 	bl	80005a4 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7fe fef0 	bl	80005a4 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e04d      	b.n	8001872 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 020c 	and.w	r2, r3, #12
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1eb      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d20c      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_RCC_ClockConfig+0x1b4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e030      	b.n	8001872 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4915      	ldr	r1, [pc, #84]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490d      	ldr	r1, [pc, #52]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f81d 	bl	800188c <HAL_RCC_GetSysClockFreq>
 8001852:	4601      	mov	r1, r0
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	5cd3      	ldrb	r3, [r2, r3]
 8001862:	fa21 f303 	lsr.w	r3, r1, r3
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800186a:	2000      	movs	r0, #0
 800186c:	f7fe fe56 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00
 8001880:	40023800 	.word	0x40023800
 8001884:	08008b34 	.word	0x08008b34
 8001888:	20000008 	.word	0x20000008

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	2300      	movs	r3, #0
 800189c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a2:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d007      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x32>
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d008      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x38>
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 808d 	bne.w	80019d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018ba:	60bb      	str	r3, [r7, #8]
       break;
 80018bc:	e08c      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018be:	4b4b      	ldr	r3, [pc, #300]	; (80019ec <HAL_RCC_GetSysClockFreq+0x160>)
 80018c0:	60bb      	str	r3, [r7, #8]
      break;
 80018c2:	e089      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c4:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ce:	4b45      	ldr	r3, [pc, #276]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d023      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018da:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	f04f 0400 	mov.w	r4, #0
 80018e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	ea03 0501 	and.w	r5, r3, r1
 80018f0:	ea04 0602 	and.w	r6, r4, r2
 80018f4:	4a3d      	ldr	r2, [pc, #244]	; (80019ec <HAL_RCC_GetSysClockFreq+0x160>)
 80018f6:	fb02 f106 	mul.w	r1, r2, r6
 80018fa:	2200      	movs	r2, #0
 80018fc:	fb02 f205 	mul.w	r2, r2, r5
 8001900:	440a      	add	r2, r1
 8001902:	493a      	ldr	r1, [pc, #232]	; (80019ec <HAL_RCC_GetSysClockFreq+0x160>)
 8001904:	fba5 0101 	umull	r0, r1, r5, r1
 8001908:	1853      	adds	r3, r2, r1
 800190a:	4619      	mov	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f04f 0400 	mov.w	r4, #0
 8001912:	461a      	mov	r2, r3
 8001914:	4623      	mov	r3, r4
 8001916:	f7fe fc5f 	bl	80001d8 <__aeabi_uldivmod>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e049      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	099b      	lsrs	r3, r3, #6
 8001928:	f04f 0400 	mov.w	r4, #0
 800192c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	ea03 0501 	and.w	r5, r3, r1
 8001938:	ea04 0602 	and.w	r6, r4, r2
 800193c:	4629      	mov	r1, r5
 800193e:	4632      	mov	r2, r6
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	f04f 0400 	mov.w	r4, #0
 8001948:	0154      	lsls	r4, r2, #5
 800194a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800194e:	014b      	lsls	r3, r1, #5
 8001950:	4619      	mov	r1, r3
 8001952:	4622      	mov	r2, r4
 8001954:	1b49      	subs	r1, r1, r5
 8001956:	eb62 0206 	sbc.w	r2, r2, r6
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	f04f 0400 	mov.w	r4, #0
 8001962:	0194      	lsls	r4, r2, #6
 8001964:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001968:	018b      	lsls	r3, r1, #6
 800196a:	1a5b      	subs	r3, r3, r1
 800196c:	eb64 0402 	sbc.w	r4, r4, r2
 8001970:	f04f 0100 	mov.w	r1, #0
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	00e2      	lsls	r2, r4, #3
 800197a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800197e:	00d9      	lsls	r1, r3, #3
 8001980:	460b      	mov	r3, r1
 8001982:	4614      	mov	r4, r2
 8001984:	195b      	adds	r3, r3, r5
 8001986:	eb44 0406 	adc.w	r4, r4, r6
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	02a2      	lsls	r2, r4, #10
 8001994:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001998:	0299      	lsls	r1, r3, #10
 800199a:	460b      	mov	r3, r1
 800199c:	4614      	mov	r4, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	4621      	mov	r1, r4
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f04f 0400 	mov.w	r4, #0
 80019a8:	461a      	mov	r2, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	f7fe fc14 	bl	80001d8 <__aeabi_uldivmod>
 80019b0:	4603      	mov	r3, r0
 80019b2:	460c      	mov	r4, r1
 80019b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	0c1b      	lsrs	r3, r3, #16
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	3301      	adds	r3, #1
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	60bb      	str	r3, [r7, #8]
      break;
 80019d0:	e002      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019d4:	60bb      	str	r3, [r7, #8]
      break;
 80019d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d8:	68bb      	ldr	r3, [r7, #8]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	017d7840 	.word	0x017d7840

080019f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000008 	.word	0x20000008

08001a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a0c:	f7ff fff0 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a10:	4601      	mov	r1, r0
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	08008b44 	.word	0x08008b44

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a34:	f7ff ffdc 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a38:	4601      	mov	r1, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0b5b      	lsrs	r3, r3, #13
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08008b44 	.word	0x08008b44

08001a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e03f      	b.n	8001aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f006 faf2 	bl	8008068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fe4b 	bl	8002738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b088      	sub	sp, #32
 8001af6:	af02      	add	r7, sp, #8
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	f040 8083 	bne.w	8001c1a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_UART_Transmit+0x2e>
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e07b      	b.n	8001c1c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_UART_Transmit+0x40>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e074      	b.n	8001c1c <HAL_UART_Transmit+0x12a>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2221      	movs	r2, #33	; 0x21
 8001b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b48:	f7fe fd2c 	bl	80005a4 <HAL_GetTick>
 8001b4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	88fa      	ldrh	r2, [r7, #6]
 8001b52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	88fa      	ldrh	r2, [r7, #6]
 8001b58:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b5a:	e042      	b.n	8001be2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b72:	d122      	bne.n	8001bba <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fc59 	bl	8002436 <UART_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e046      	b.n	8001c1c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3302      	adds	r3, #2
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	e017      	b.n	8001be2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	e013      	b.n	8001be2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fc36 	bl	8002436 <UART_WaitOnFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e023      	b.n	8001c1c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	60ba      	str	r2, [r7, #8]
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1b7      	bne.n	8001b5c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fc1d 	bl	8002436 <UART_WaitOnFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e00a      	b.n	8001c1c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c1a:	2302      	movs	r3, #2
  }
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	f040 8090 	bne.w	8001d66 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_UART_Receive+0x2e>
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e088      	b.n	8001d68 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_UART_Receive+0x40>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e081      	b.n	8001d68 <HAL_UART_Receive+0x144>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2222      	movs	r2, #34	; 0x22
 8001c76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c7a:	f7fe fc93 	bl	80005a4 <HAL_GetTick>
 8001c7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	88fa      	ldrh	r2, [r7, #6]
 8001c84:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c8c:	e05c      	b.n	8001d48 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca4:	d12b      	bne.n	8001cfe <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2200      	movs	r2, #0
 8001cae:	2120      	movs	r1, #32
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fbc0 	bl	8002436 <UART_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e053      	b.n	8001d68 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10c      	bne.n	8001ce6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	e030      	b.n	8001d48 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	e024      	b.n	8001d48 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2200      	movs	r2, #0
 8001d06:	2120      	movs	r1, #32
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fb94 	bl	8002436 <UART_WaitOnFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e027      	b.n	8001d68 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d108      	bne.n	8001d32 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	60ba      	str	r2, [r7, #8]
 8001d2c:	b2ca      	uxtb	r2, r1
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e00a      	b.n	8001d48 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1c59      	adds	r1, r3, #1
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d19d      	bne.n	8001c8e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001d66:	2302      	movs	r3, #2
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d130      	bne.n	8001dec <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_UART_Transmit_IT+0x26>
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e029      	b.n	8001dee <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_UART_Transmit_IT+0x38>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e022      	b.n	8001dee <HAL_UART_Transmit_IT+0x7e>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	88fa      	ldrh	r2, [r7, #6]
 8001dba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2221      	movs	r2, #33	; 0x21
 8001dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001de6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001dec:	2302      	movs	r3, #2
  }
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	4613      	mov	r3, r2
 8001e06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d140      	bne.n	8001e96 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_UART_Receive_IT+0x26>
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e039      	b.n	8001e98 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_UART_Receive_IT+0x38>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e032      	b.n	8001e98 <HAL_UART_Receive_IT+0x9e>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	88fa      	ldrh	r2, [r7, #6]
 8001e44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2222      	movs	r2, #34	; 0x22
 8001e56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e70:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
  }
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d153      	bne.n	8001f66 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_UART_Transmit_DMA+0x26>
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e04c      	b.n	8001f68 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_UART_Transmit_DMA+0x38>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e045      	b.n	8001f68 <HAL_UART_Transmit_DMA+0xc4>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	88fa      	ldrh	r2, [r7, #6]
 8001ef4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2221      	movs	r2, #33	; 0x21
 8001f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_UART_Transmit_DMA+0xcc>)
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_UART_Transmit_DMA+0xd0>)
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_UART_Transmit_DMA+0xd4>)
 8001f1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	2200      	movs	r2, #0
 8001f22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8001f24:	f107 0308 	add.w	r3, r7, #8
 8001f28:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3304      	adds	r3, #4
 8001f38:	461a      	mov	r2, r3
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	f7fe fcfe 	bl	800093c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f48:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f60:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
  }
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	080022b1 	.word	0x080022b1
 8001f74:	08002303 	.word	0x08002303
 8001f78:	080023a3 	.word	0x080023a3

08001f7c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	4613      	mov	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d166      	bne.n	8002064 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_UART_Receive_DMA+0x26>
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e05f      	b.n	8002066 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_UART_Receive_DMA+0x38>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e058      	b.n	8002066 <HAL_UART_Receive_DMA+0xea>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	88fa      	ldrh	r2, [r7, #6]
 8001fc6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2222      	movs	r2, #34	; 0x22
 8001fd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_UART_Receive_DMA+0xf4>)
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	4a24      	ldr	r2, [pc, #144]	; (8002074 <HAL_UART_Receive_DMA+0xf8>)
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	4a23      	ldr	r2, [pc, #140]	; (8002078 <HAL_UART_Receive_DMA+0xfc>)
 8001fec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3304      	adds	r3, #4
 8002006:	4619      	mov	r1, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	f7fe fc95 	bl	800093c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800203e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002064:	2302      	movs	r3, #2
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	0800231f 	.word	0x0800231f
 8002074:	08002387 	.word	0x08002387
 8002078:	080023a3 	.word	0x080023a3

0800207c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_UART_IRQHandler+0x52>
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fab5 	bl	8002636 <UART_Receive_IT>
      return;
 80020cc:	e0cc      	b.n	8002268 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80ab 	beq.w	800222c <HAL_UART_IRQHandler+0x1b0>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_UART_IRQHandler+0x70>
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80a0 	beq.w	800222c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_UART_IRQHandler+0x90>
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_UART_IRQHandler+0xb0>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	f043 0202 	orr.w	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_UART_IRQHandler+0xd0>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002144:	f043 0204 	orr.w	r2, r3, #4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_UART_IRQHandler+0xf0>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	f043 0208 	orr.w	r2, r3, #8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d078      	beq.n	8002266 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_UART_IRQHandler+0x112>
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fa54 	bl	8002636 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <HAL_UART_IRQHandler+0x13a>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d031      	beq.n	800221a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f99d 	bl	80024f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b40      	cmp	r3, #64	; 0x40
 80021c8:	d123      	bne.n	8002212 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d013      	beq.n	800220a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	4a22      	ldr	r2, [pc, #136]	; (8002270 <HAL_UART_IRQHandler+0x1f4>)
 80021e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fc04 	bl	80009fc <HAL_DMA_Abort_IT>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d016      	beq.n	8002228 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002204:	4610      	mov	r0, r2
 8002206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002208:	e00e      	b.n	8002228 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f846 	bl	800229c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002210:	e00a      	b.n	8002228 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f842 	bl	800229c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002218:	e006      	b.n	8002228 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f83e 	bl	800229c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002226:	e01e      	b.n	8002266 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002228:	bf00      	nop
    return;
 800222a:	e01c      	b.n	8002266 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_UART_IRQHandler+0x1cc>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f98a 	bl	800255a <UART_Transmit_IT>
    return;
 8002246:	e00f      	b.n	8002268 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_UART_IRQHandler+0x1ec>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f9d2 	bl	8002606 <UART_EndTransmit_IT>
    return;
 8002262:	bf00      	nop
 8002264:	e000      	b.n	8002268 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002266:	bf00      	nop
  }
}
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	08002533 	.word	0x08002533

08002274 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d113      	bne.n	80022f4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80022f2:	e002      	b.n	80022fa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff ffbd 	bl	8002274 <HAL_UART_TxCpltCallback>
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f7ff ffb9 	bl	8002288 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11e      	bne.n	8002378 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800234e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800236e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f004 f909 	bl	8006590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f004 f92c 	bl	80065f2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b21      	cmp	r3, #33	; 0x21
 80023d4:	d108      	bne.n	80023e8 <UART_DMAError+0x46>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2200      	movs	r2, #0
 80023e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80023e2:	68b8      	ldr	r0, [r7, #8]
 80023e4:	f000 f871 	bl	80024ca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b22      	cmp	r3, #34	; 0x22
 8002408:	d108      	bne.n	800241c <UART_DMAError+0x7a>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2200      	movs	r2, #0
 8002414:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002416:	68b8      	ldr	r0, [r7, #8]
 8002418:	f000 f86d 	bl	80024f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	f043 0210 	orr.w	r2, r3, #16
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002428:	68b8      	ldr	r0, [r7, #8]
 800242a:	f7ff ff37 	bl	800229c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002446:	e02c      	b.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d028      	beq.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <UART_WaitOnFlagUntilTimeout+0x30>
 8002456:	f7fe f8a5 	bl	80005a4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	429a      	cmp	r2, r3
 8002464:	d21d      	bcs.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002474:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e00f      	b.n	80024c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4013      	ands	r3, r2
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d0c3      	beq.n	8002448 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024e0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800250c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff fea5 	bl	800229c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b21      	cmp	r3, #33	; 0x21
 800256c:	d144      	bne.n	80025f8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002576:	d11a      	bne.n	80025ae <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800258c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	1c9a      	adds	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	621a      	str	r2, [r3, #32]
 80025a0:	e00e      	b.n	80025c0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	621a      	str	r2, [r3, #32]
 80025ac:	e008      	b.n	80025c0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	1c59      	adds	r1, r3, #1
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6211      	str	r1, [r2, #32]
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4619      	mov	r1, r3
 80025ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800261c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fe24 	bl	8002274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b22      	cmp	r3, #34	; 0x22
 8002648:	d171      	bne.n	800272e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002652:	d123      	bne.n	800269c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10e      	bne.n	8002680 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	b29b      	uxth	r3, r3
 800266a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	1c9a      	adds	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
 800267e:	e029      	b.n	80026d4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	b29b      	uxth	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
 800269a:	e01b      	b.n	80026d4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6858      	ldr	r0, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	1c59      	adds	r1, r3, #1
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6291      	str	r1, [r2, #40]	; 0x28
 80026b4:	b2c2      	uxtb	r2, r0
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e00c      	b.n	80026d4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	1c58      	adds	r0, r3, #1
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	6288      	str	r0, [r1, #40]	; 0x28
 80026cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29b      	uxth	r3, r3
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4619      	mov	r1, r3
 80026e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d120      	bne.n	800272a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0220 	bic.w	r2, r2, #32
 80026f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f003 ff35 	bl	8006590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e002      	b.n	8002730 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002778:	f023 030c 	bic.w	r3, r3, #12
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	68f9      	ldr	r1, [r7, #12]
 8002782:	430b      	orrs	r3, r1
 8002784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a4:	f040 80e4 	bne.w	8002970 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4aab      	ldr	r2, [pc, #684]	; (8002a5c <UART_SetConfig+0x324>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <UART_SetConfig+0x84>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4aaa      	ldr	r2, [pc, #680]	; (8002a60 <UART_SetConfig+0x328>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d16c      	bne.n	8002896 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027bc:	f7ff f938 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009a      	lsls	r2, r3, #2
 80027ca:	441a      	add	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	4aa3      	ldr	r2, [pc, #652]	; (8002a64 <UART_SetConfig+0x32c>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	011c      	lsls	r4, r3, #4
 80027e0:	f7ff f926 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009a      	lsls	r2, r3, #2
 80027ee:	441a      	add	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fbb2 f5f3 	udiv	r5, r2, r3
 80027fa:	f7ff f919 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009a      	lsls	r2, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	4a93      	ldr	r2, [pc, #588]	; (8002a64 <UART_SetConfig+0x32c>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2264      	movs	r2, #100	; 0x64
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	1aeb      	subs	r3, r5, r3
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	4a8e      	ldr	r2, [pc, #568]	; (8002a64 <UART_SetConfig+0x32c>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002836:	441c      	add	r4, r3
 8002838:	f7ff f8fa 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 800283c:	4602      	mov	r2, r0
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	009a      	lsls	r2, r3, #2
 8002846:	441a      	add	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002852:	f7ff f8ed 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8002856:	4602      	mov	r2, r0
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009a      	lsls	r2, r3, #2
 8002860:	441a      	add	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	4a7d      	ldr	r2, [pc, #500]	; (8002a64 <UART_SetConfig+0x32c>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2264      	movs	r2, #100	; 0x64
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	1aeb      	subs	r3, r5, r3
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	3332      	adds	r3, #50	; 0x32
 8002880:	4a78      	ldr	r2, [pc, #480]	; (8002a64 <UART_SetConfig+0x32c>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	f003 0207 	and.w	r2, r3, #7
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4422      	add	r2, r4
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e154      	b.n	8002b40 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002896:	f7ff f8b7 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 800289a:	4602      	mov	r2, r0
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	009a      	lsls	r2, r3, #2
 80028a4:	441a      	add	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	4a6c      	ldr	r2, [pc, #432]	; (8002a64 <UART_SetConfig+0x32c>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	011c      	lsls	r4, r3, #4
 80028ba:	f7ff f8a5 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009a      	lsls	r2, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80028d4:	f7ff f898 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	009a      	lsls	r2, r3, #2
 80028e2:	441a      	add	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4a5d      	ldr	r2, [pc, #372]	; (8002a64 <UART_SetConfig+0x32c>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	2264      	movs	r2, #100	; 0x64
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	1aeb      	subs	r3, r5, r3
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	3332      	adds	r3, #50	; 0x32
 8002902:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <UART_SetConfig+0x32c>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002910:	441c      	add	r4, r3
 8002912:	f7ff f879 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002916:	4602      	mov	r2, r0
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	009a      	lsls	r2, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fbb2 f5f3 	udiv	r5, r2, r3
 800292c:	f7ff f86c 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002930:	4602      	mov	r2, r0
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009a      	lsls	r2, r3, #2
 800293a:	441a      	add	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	4a47      	ldr	r2, [pc, #284]	; (8002a64 <UART_SetConfig+0x32c>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	2264      	movs	r2, #100	; 0x64
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	1aeb      	subs	r3, r5, r3
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	3332      	adds	r3, #50	; 0x32
 800295a:	4a42      	ldr	r2, [pc, #264]	; (8002a64 <UART_SetConfig+0x32c>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	f003 0207 	and.w	r2, r3, #7
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4422      	add	r2, r4
 800296c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800296e:	e0e7      	b.n	8002b40 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a39      	ldr	r2, [pc, #228]	; (8002a5c <UART_SetConfig+0x324>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <UART_SetConfig+0x24c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a38      	ldr	r2, [pc, #224]	; (8002a60 <UART_SetConfig+0x328>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d171      	bne.n	8002a68 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002984:	f7ff f854 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8002988:	4602      	mov	r2, r0
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009a      	lsls	r2, r3, #2
 8002992:	441a      	add	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	4a31      	ldr	r2, [pc, #196]	; (8002a64 <UART_SetConfig+0x32c>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	011c      	lsls	r4, r3, #4
 80029a8:	f7ff f842 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	009a      	lsls	r2, r3, #2
 80029b6:	441a      	add	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	fbb2 f5f3 	udiv	r5, r2, r3
 80029c2:	f7ff f835 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009a      	lsls	r2, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <UART_SetConfig+0x32c>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2264      	movs	r2, #100	; 0x64
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	1aeb      	subs	r3, r5, r3
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	3332      	adds	r3, #50	; 0x32
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <UART_SetConfig+0x32c>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fc:	441c      	add	r4, r3
 80029fe:	f7ff f817 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009a      	lsls	r2, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a18:	f7ff f80a 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009a      	lsls	r2, r3, #2
 8002a26:	441a      	add	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <UART_SetConfig+0x32c>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	2264      	movs	r2, #100	; 0x64
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	1aeb      	subs	r3, r5, r3
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	3332      	adds	r3, #50	; 0x32
 8002a46:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <UART_SetConfig+0x32c>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4422      	add	r2, r4
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	e071      	b.n	8002b40 <UART_SetConfig+0x408>
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40011400 	.word	0x40011400
 8002a64:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a68:	f7fe ffce 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009a      	lsls	r2, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4a31      	ldr	r2, [pc, #196]	; (8002b48 <UART_SetConfig+0x410>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	011c      	lsls	r4, r3, #4
 8002a8c:	f7fe ffbc 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009a      	lsls	r2, r3, #2
 8002a9a:	441a      	add	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	fbb2 f5f3 	udiv	r5, r2, r3
 8002aa6:	f7fe ffaf 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <UART_SetConfig+0x410>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2264      	movs	r2, #100	; 0x64
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	1aeb      	subs	r3, r5, r3
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	3332      	adds	r3, #50	; 0x32
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <UART_SetConfig+0x410>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae0:	441c      	add	r4, r3
 8002ae2:	f7fe ff91 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009a      	lsls	r2, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002afc:	f7fe ff84 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009a      	lsls	r2, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <UART_SetConfig+0x410>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	2264      	movs	r2, #100	; 0x64
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	1aeb      	subs	r3, r5, r3
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	3332      	adds	r3, #50	; 0x32
 8002b2a:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <UART_SetConfig+0x410>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4422      	add	r2, r4
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	e7ff      	b.n	8002b40 <UART_SetConfig+0x408>
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bdb0      	pop	{r4, r5, r7, pc}
 8002b48:	51eb851f 	.word	0x51eb851f

08002b4c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <_ZNSt10_List_nodeIjE9_M_valptrEv>:
  template<typename _Tp>
    struct _List_node : public __detail::_List_node_base
    {
#if __cplusplus >= 201103L
      __gnu_cxx::__aligned_membuf<_Tp> _M_storage;
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3308      	adds	r3, #8
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 f805 	bl	8002b80 <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f805 	bl	8002b98 <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>:
      _M_addr() noexcept
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <_ZN3wyz9CReceiverC1Ev>:

#include <CReceiver.h>

namespace wyz {

CReceiver::CReceiver() {
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <_ZN3wyz9CReceiverC1Ev+0x1c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	08008980 	.word	0x08008980

08002bd0 <_ZN3wyz13CStateMachine14MergeIntToLongEii>:
#include "CStateMachine.h"

namespace wyz{

int64_t CStateMachine::MergeIntToLong(int value_1,int value_2)
{
 8002bd0:	b490      	push	{r4, r7}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
		struct LowHigh{
			int lowInt;
			int highInt;
		}lowhigh;
	} mergeUnion;
	mergeUnion.lowhigh.lowInt = value_1;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	613b      	str	r3, [r7, #16]
	mergeUnion.lowhigh.highInt = value_2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	617b      	str	r3, [r7, #20]
	return mergeUnion.INT64_t;
 8002be4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	4621      	mov	r1, r4
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc90      	pop	{r4, r7}
 8002bf2:	4770      	bx	lr

08002bf4 <_ZN3wyz13CStateMachine28AddItemOfInternalTransitionsEiii>:

void CStateMachine::AddItemOfInternalTransitions(int eventType,int state,int newStats)
{
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
	m_IntranalTransitions[MergeIntToLong(eventType, state)] = newStats;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f103 051c 	add.w	r5, r3, #28
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff ffdf 	bl	8002bd0 <_ZN3wyz13CStateMachine14MergeIntToLongEii>
 8002c12:	4603      	mov	r3, r0
 8002c14:	460c      	mov	r4, r1
 8002c16:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4628      	mov	r0, r5
 8002c22:	f000 f999 	bl	8002f58 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixEOx>
 8002c26:	4602      	mov	r2, r0
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bdb0      	pop	{r4, r5, r7, pc}

08002c34 <_ZN3wyz13CStateMachine17AddItemOfStateMapEiPNS_10CStateBaseE>:

void CStateMachine::AddItemOfStateMap(int state,CStateBase * pStateAction)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	m_StateMap[state] = pStateAction;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3304      	adds	r3, #4
 8002c44:	f107 0208 	add.w	r2, r7, #8
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fa12 	bl	8003074 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEixERS6_>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <_ZN3wyz13CStateMachine20AddItemOfTransitionsEiii>:

void CStateMachine::AddItemOfTransitions(int eventType,int state, int newStats)
{
 8002c5e:	b5b0      	push	{r4, r5, r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
	m_Transitions[MergeIntToLong(eventType, state)] = newStats;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f103 0534 	add.w	r5, r3, #52	; 0x34
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f7ff ffaa 	bl	8002bd0 <_ZN3wyz13CStateMachine14MergeIntToLongEii>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	460c      	mov	r4, r1
 8002c80:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002c84:	f107 0310 	add.w	r3, r7, #16
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f000 f964 	bl	8002f58 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixEOx>
 8002c90:	4602      	mov	r2, r0
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6013      	str	r3, [r2, #0]
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bdb0      	pop	{r4, r5, r7, pc}

08002c9e <_ZN3wyz13CStateMachine8SetEventEP17CMachineEventBase>:

void CStateMachine::SetEvent(CMachineEventBase* pEvent)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
	ExternalEvent(pEvent, pEvent->m_ExternalEventType);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	461a      	mov	r2, r3
 8002cae:	6839      	ldr	r1, [r7, #0]
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f87d 	bl	8002db0 <_ZN3wyz13CStateMachine13ExternalEventEP17CMachineEventBasei>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_ZN3wyz13CStateMachine13InternalEventEP17CMachineEventBase>:

void CStateMachine::InternalEvent(CMachineEventBase *pData)
{
 8002cbe:	b5b0      	push	{r4, r5, r7, lr}
 8002cc0:	b088      	sub	sp, #32
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
	int64_t merge = MergeIntToLong(pData->m_InternalEventType, m_CurrentState);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ff7c 	bl	8002bd0 <_ZN3wyz13CStateMachine14MergeIntToLongEii>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if (m_IntranalTransitions.count(merge)!=0) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	331c      	adds	r3, #28
 8002ce4:	f107 0208 	add.w	r2, r7, #8
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fa1e 	bl	800312c <_ZNKSt3mapIxiSt4lessIxESaISt4pairIKxiEEE5countERS3_>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf14      	ite	ne
 8002cf6:	2301      	movne	r3, #1
 8002cf8:	2300      	moveq	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d032      	beq.n	8002d66 <_ZN3wyz13CStateMachine13InternalEventEP17CMachineEventBase+0xa8>
		m_NewState = m_IntranalTransitions[merge];
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	331c      	adds	r3, #28
 8002d04:	f107 0208 	add.w	r2, r7, #8
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fa60 	bl	80031d0 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixERS3_>
 8002d10:	4603      	mov	r3, r0
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
		if(m_StateMap.count(m_NewState) != 0)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1d1a      	adds	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3354      	adds	r3, #84	; 0x54
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 fab0 	bl	8003288 <_ZNKSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE5countERS6_>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d016      	beq.n	8002d66 <_ZN3wyz13CStateMachine13InternalEventEP17CMachineEventBase+0xa8>
		{   //存在状态函数
			CStateBase *pState = m_StateMap[m_NewState];
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	1d1a      	adds	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3354      	adds	r3, #84	; 0x54
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 f996 	bl	8003074 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEixERS6_>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61fb      	str	r3, [r7, #28]
			pState->InvokeStateAction(this, pData);
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3308      	adds	r3, #8
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	69f8      	ldr	r0, [r7, #28]
 8002d5c:	4798      	blx	r3
			m_CurrentState = m_NewState;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	651a      	str	r2, [r3, #80]	; 0x50
		}
	}
	if(m_IntranalTransitions.count(MergeIntToLong(pData->m_InternalEventType, m_CurrentState))!=0)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f103 051c 	add.w	r5, r3, #28
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d74:	461a      	mov	r2, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ff2a 	bl	8002bd0 <_ZN3wyz13CStateMachine14MergeIntToLongEii>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	460c      	mov	r4, r1
 8002d80:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f000 f9ce 	bl	800312c <_ZNKSt3mapIxiSt4lessIxESaISt4pairIKxiEEE5countERS3_>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <_ZN3wyz13CStateMachine13InternalEventEP17CMachineEventBase+0xea>
	{InternalEvent(pData);}//迭代，直到没有状态转移
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ff8b 	bl	8002cbe <_ZN3wyz13CStateMachine13InternalEventEP17CMachineEventBase>
}
 8002da8:	bf00      	nop
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdb0      	pop	{r4, r5, r7, pc}

08002db0 <_ZN3wyz13CStateMachine13ExternalEventEP17CMachineEventBasei>:

void CStateMachine::ExternalEvent(CMachineEventBase * pData,int EventType)
{
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
	m_TransitionsItem = m_Transitions.find(MergeIntToLong(EventType, m_CurrentState));
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f103 0534 	add.w	r5, r3, #52	; 0x34
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f7ff ff00 	bl	8002bd0 <_ZN3wyz13CStateMachine14MergeIntToLongEii>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002dd8:	68fc      	ldr	r4, [r7, #12]
 8002dda:	f107 0310 	add.w	r3, r7, #16
 8002dde:	4619      	mov	r1, r3
 8002de0:	4628      	mov	r0, r5
 8002de2:	f000 fa75 	bl	80032d0 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEE4findERS3_>
 8002de6:	64e0      	str	r0, [r4, #76]	; 0x4c
	if(m_TransitionsItem != m_Transitions.end())
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3334      	adds	r3, #52	; 0x34
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fa7b 	bl	80032ee <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEE3endEv>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	f107 0318 	add.w	r3, r7, #24
 8002e00:	4619      	mov	r1, r3
 8002e02:	4620      	mov	r0, r4
 8002e04:	f000 fa80 	bl	8003308 <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEneERKS3_>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d033      	beq.n	8002e76 <_ZN3wyz13CStateMachine13ExternalEventEP17CMachineEventBasei+0xc6>
	{   //存在状态转移
		m_NewState = m_TransitionsItem->second;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	334c      	adds	r3, #76	; 0x4c
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fa8c 	bl	8003330 <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEptEv>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
		if(m_StateMap.count(m_NewState) != 0)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1d1a      	adds	r2, r3, #4
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3354      	adds	r3, #84	; 0x54
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f000 fa2c 	bl	8003288 <_ZNKSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE5countERS6_>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01a      	beq.n	8002e76 <_ZN3wyz13CStateMachine13ExternalEventEP17CMachineEventBasei+0xc6>
		{   //存在状态函数
			CStateBase *pState = m_StateMap[m_NewState];
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1d1a      	adds	r2, r3, #4
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3354      	adds	r3, #84	; 0x54
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f000 f912 	bl	8003074 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEixERS6_>
 8002e50:	4603      	mov	r3, r0
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61fb      	str	r3, [r7, #28]
			pState->InvokeStateAction(this, pData); //这个过程中可以更新内部事件
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	68f9      	ldr	r1, [r7, #12]
 8002e62:	69f8      	ldr	r0, [r7, #28]
 8002e64:	4798      	blx	r3
			m_CurrentState = m_NewState;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	651a      	str	r2, [r3, #80]	; 0x50
			InternalEvent(pData); //调用内部事件
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff ff24 	bl	8002cbe <_ZN3wyz13CStateMachine13InternalEventEP17CMachineEventBase>
		}
	}
}
 8002e76:	bf00      	nop
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bdb0      	pop	{r4, r5, r7, pc}

08002e7e <_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <_ZNSt5tupleIJOxEEC1IJxELb1EEEDpOT_>:
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && (sizeof...(_Elements) >= 1),
        bool>::type=true>
        constexpr tuple(_UElements&&... __elements)
 8002eaa:	b590      	push	{r4, r7, lr}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 8002eb4:	687c      	ldr	r4, [r7, #4]
 8002eb6:	6838      	ldr	r0, [r7, #0]
 8002eb8:	f7ff ffec 	bl	8002e94 <_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f000 f805 	bl	8002ed0 <_ZNSt11_Tuple_implILj0EJOxEEC1IxEEOT_>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <_ZNSt11_Tuple_implILj0EJOxEEC1IxEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8002eda:	687c      	ldr	r4, [r7, #4]
 8002edc:	6838      	ldr	r0, [r7, #0]
 8002ede:	f7ff ffd9 	bl	8002e94 <_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f000 f805 	bl	8002ef6 <_ZNSt10_Head_baseILj0EOxLb0EEC1IxEEOT_>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}

08002ef6 <_ZNSt10_Head_baseILj0EOxLb0EEC1IxEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f7ff ffc7 	bl	8002e94 <_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_ZNSt5tupleIJOxEEC1EOS1_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fab2 	bl	8003490 <_ZNSt11_Tuple_implILj0EJOxEEC1EOS1_>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_ZSt16forward_as_tupleIJxEESt5tupleIJDpOT_EES3_>:

  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8002f40:	6838      	ldr	r0, [r7, #0]
 8002f42:	f7ff ffa7 	bl	8002e94 <_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ffad 	bl	8002eaa <_ZNSt5tupleIJOxEEC1IJxELb1EEEDpOT_>
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixEOx>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b08b      	sub	sp, #44	; 0x2c
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 8002f62:	6839      	ldr	r1, [r7, #0]
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fa09 	bl	800337c <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEE11lower_boundERS3_>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f9bd 	bl	80032ee <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEE3endEv>
 8002f74:	4603      	mov	r3, r0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	f107 020c 	add.w	r2, r7, #12
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fa09 	bl	800339a <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEeqERKS3_>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d112      	bne.n	8002fb4 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixEOx+0x5c>
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fa17 	bl	80033c2 <_ZNKSt3mapIxiSt4lessIxESaISt4pairIKxiEEE8key_compEv>
 8002f94:	f107 0308 	add.w	r3, r7, #8
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fa1f 	bl	80033dc <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEdeEv>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f107 0310 	add.w	r3, r7, #16
 8002fa6:	6839      	ldr	r1, [r7, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa25 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixEOx+0x60>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixEOx+0x62>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01f      	beq.n	8002ffe <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixEOx+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8002fbe:	687c      	ldr	r4, [r7, #4]
 8002fc0:	f107 0208 	add.w	r2, r7, #8
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fa2c 	bl	8003428 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKxiEEC1ERKSt17_Rb_tree_iteratorIS2_E>
					std::forward_as_tuple(std::move(__k)),
 8002fd0:	6838      	ldr	r0, [r7, #0]
 8002fd2:	f7ff ff54 	bl	8002e7e <_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_>
 8002fd6:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8002fd8:	f107 0318 	add.w	r3, r7, #24
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff ffa9 	bl	8002f36 <_ZSt16forward_as_tupleIJxEESt5tupleIJDpOT_EES3_>
 8002fe4:	f107 0218 	add.w	r2, r7, #24
 8002fe8:	f107 031c 	add.w	r3, r7, #28
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	4a08      	ldr	r2, [pc, #32]	; (8003014 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixEOx+0xbc>)
 8002ff2:	6979      	ldr	r1, [r7, #20]
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f000 fa83 	bl	8003500 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOxEESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	60bb      	str	r3, [r7, #8]
					std::tuple<>());
	return (*__i).second;
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f9ea 	bl	80033dc <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEdeEv>
 8003008:	4603      	mov	r3, r0
 800300a:	3308      	adds	r3, #8
      }
 800300c:	4618      	mov	r0, r3
 800300e:	3724      	adds	r7, #36	; 0x24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	08008984 	.word	0x08008984

08003018 <_ZNSt5tupleIJRKiEEC1IvLb1EEES1_>:
        constexpr tuple(const _Elements&... __elements)
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
      : _Inherited(__elements...) { }
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f805 	bl	8003036 <_ZNSt11_Tuple_implILj0EJRKiEEC1ES1_>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <_ZNSt11_Tuple_implILj0EJRKiEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6839      	ldr	r1, [r7, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f805 	bl	8003054 <_ZNSt10_Head_baseILj0ERKiLb0EEC1ES1_>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZNSt10_Head_baseILj0ERKiLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEixERS6_>:
      operator[](const key_type& __k)
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b08b      	sub	sp, #44	; 0x2c
 8003078:	af02      	add	r7, sp, #8
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fa7b 	bl	800357c <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE11lower_boundERS6_>
 8003086:	4603      	mov	r3, r0
 8003088:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa85 	bl	800359a <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE3endEv>
 8003090:	4603      	mov	r3, r0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	f107 020c 	add.w	r2, r7, #12
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fa88 	bl	80035b4 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEeqERKS6_>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d112      	bne.n	80030d0 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEixERS6_+0x5c>
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa96 	bl	80035dc <_ZNKSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE8key_compEv>
 80030b0:	f107 0308 	add.w	r3, r7, #8
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fa9e 	bl	80035f6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEdeEv>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	f107 0310 	add.w	r3, r7, #16
 80030c2:	6839      	ldr	r1, [r7, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 faa4 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEixERS6_+0x60>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEixERS6_+0x62>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01b      	beq.n	8003112 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEixERS6_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80030da:	687c      	ldr	r4, [r7, #4]
 80030dc:	f107 0208 	add.w	r2, r7, #8
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 faa8 	bl	800363c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 80030ec:	f107 0318 	add.w	r3, r7, #24
 80030f0:	6839      	ldr	r1, [r7, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff ff90 	bl	8003018 <_ZNSt5tupleIJRKiEEC1IvLb1EEES1_>
 80030f8:	f107 0218 	add.w	r2, r7, #24
 80030fc:	f107 031c 	add.w	r3, r7, #28
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	4a08      	ldr	r2, [pc, #32]	; (8003128 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEixERS6_+0xb4>)
 8003106:	6979      	ldr	r1, [r7, #20]
 8003108:	4620      	mov	r0, r4
 800310a:	f000 fab2 	bl	8003672 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 800310e:	4603      	mov	r3, r0
 8003110:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fa6d 	bl	80035f6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEdeEv>
 800311c:	4603      	mov	r3, r0
 800311e:	3304      	adds	r3, #4
      }
 8003120:	4618      	mov	r0, r3
 8003122:	3724      	adds	r7, #36	; 0x24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd90      	pop	{r4, r7, pc}
 8003128:	08008984 	.word	0x08008984

0800312c <_ZNKSt3mapIxiSt4lessIxESaISt4pairIKxiEEE5countERS3_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6839      	ldr	r1, [r7, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fad7 	bl	80036ee <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_>
 8003140:	4603      	mov	r3, r0
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fb0d 	bl	8003766 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE3endEv>
 800314c:	4603      	mov	r3, r0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	f107 020c 	add.w	r2, r7, #12
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fb14 	bl	8003788 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKxiEEeqERKS3_>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <_ZNKSt3mapIxiSt4lessIxESaISt4pairIKxiEEE5countERS3_+0x3e>
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <_ZNKSt3mapIxiSt4lessIxESaISt4pairIKxiEEE5countERS3_+0x40>
 800316a:	2301      	movs	r3, #1
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_ZNSt5tupleIJRKxEEC1IvLb1EEES1_>:
        constexpr tuple(const _Elements&... __elements)
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
      : _Inherited(__elements...) { }
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6839      	ldr	r1, [r7, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f805 	bl	8003192 <_ZNSt11_Tuple_implILj0EJRKxEEC1ES1_>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_ZNSt11_Tuple_implILj0EJRKxEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6839      	ldr	r1, [r7, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f805 	bl	80031b0 <_ZNSt10_Head_baseILj0ERKxLb0EEC1ES1_>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_ZNSt10_Head_baseILj0ERKxLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixERS3_>:
      operator[](const key_type& __k)
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b08b      	sub	sp, #44	; 0x2c
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80031da:	6839      	ldr	r1, [r7, #0]
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f8cd 	bl	800337c <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEE11lower_boundERS3_>
 80031e2:	4603      	mov	r3, r0
 80031e4:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f881 	bl	80032ee <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEE3endEv>
 80031ec:	4603      	mov	r3, r0
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	f107 020c 	add.w	r2, r7, #12
 80031f4:	f107 0308 	add.w	r3, r7, #8
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f8cd 	bl	800339a <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEeqERKS3_>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d112      	bne.n	800322c <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixERS3_+0x5c>
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8db 	bl	80033c2 <_ZNKSt3mapIxiSt4lessIxESaISt4pairIKxiEEE8key_compEv>
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f8e3 	bl	80033dc <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEdeEv>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	f107 0310 	add.w	r3, r7, #16
 800321e:	6839      	ldr	r1, [r7, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f8e9 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixERS3_+0x60>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixERS3_+0x62>
 8003230:	2300      	movs	r3, #0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01b      	beq.n	800326e <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixERS3_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003236:	687c      	ldr	r4, [r7, #4]
 8003238:	f107 0208 	add.w	r2, r7, #8
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f8f0 	bl	8003428 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKxiEEC1ERKSt17_Rb_tree_iteratorIS2_E>
 8003248:	f107 0318 	add.w	r3, r7, #24
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff90 	bl	8003174 <_ZNSt5tupleIJRKxEEC1IvLb1EEES1_>
 8003254:	f107 0218 	add.w	r2, r7, #24
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	4a08      	ldr	r2, [pc, #32]	; (8003284 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEixERS3_+0xb4>)
 8003262:	6979      	ldr	r1, [r7, #20]
 8003264:	4620      	mov	r0, r4
 8003266:	f000 faae 	bl	80037c6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_>
 800326a:	4603      	mov	r3, r0
 800326c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800326e:	f107 0308 	add.w	r3, r7, #8
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f8b2 	bl	80033dc <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEdeEv>
 8003278:	4603      	mov	r3, r0
 800327a:	3308      	adds	r3, #8
      }
 800327c:	4618      	mov	r0, r3
 800327e:	3724      	adds	r7, #36	; 0x24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd90      	pop	{r4, r7, pc}
 8003284:	08008984 	.word	0x08008984

08003288 <_ZNKSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE5countERS6_>:
      count(const key_type& __x) const
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fad3 	bl	8003842 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE4findERS1_>
 800329c:	4603      	mov	r3, r0
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fb09 	bl	80038ba <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE3endEv>
 80032a8:	4603      	mov	r3, r0
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	f107 020c 	add.w	r2, r7, #12
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fb10 	bl	80038dc <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEEeqERKS6_>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <_ZNKSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE5countERS6_+0x3e>
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <_ZNKSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE5countERS6_+0x40>
 80032c6:	2301      	movs	r3, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEE4findERS3_>:
      find(const key_type& __x)
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6839      	ldr	r1, [r7, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fb10 	bl	8003904 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fb3f 	bl	800397c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE3endEv>
 80032fe:	4603      	mov	r3, r0
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEneERKS3_>:
      bool
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
      { return _M_node != __x._M_node; }
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fb2e 	bl	800399e <_ZNSt13_Rb_tree_nodeISt4pairIKxiEE9_M_valptrEv>
 8003342:	4603      	mov	r3, r0
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_beginEv>:
      _Const_Base_ptr
      _M_rightmost() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin() _GLIBCXX_NOEXCEPT
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEE11lower_boundERS3_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fb67 	bl	8003a5e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11lower_boundERS1_>
 8003390:	4603      	mov	r3, r0
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEeqERKS3_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <_ZNKSt3mapIxiSt4lessIxESaISt4pairIKxiEEE8key_compEv>:
      key_comp() const
 80033c2:	b590      	push	{r4, r7, lr}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fb5d 	bl	8003a8c <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8key_compEv>
 80033d2:	4623      	mov	r3, r4
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}

080033dc <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fad8 	bl	800399e <_ZNSt13_Rb_tree_nodeISt4pairIKxiEE9_M_valptrEv>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZNKSt4lessIxEclERKxS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80033f8:	b490      	push	{r4, r7}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	e9d3 1200 	ldrd	r1, r2, [r3]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003410:	4299      	cmp	r1, r3
 8003412:	eb72 0304 	sbcs.w	r3, r2, r4
 8003416:	bfb4      	ite	lt
 8003418:	2301      	movlt	r3, #1
 800341a:	2300      	movge	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bc90      	pop	{r4, r7}
 8003426:	4770      	bx	lr

08003428 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKxiEEC1ERKSt17_Rb_tree_iteratorIS2_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <_ZNSt11_Tuple_implILj0EJOxEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f805 	bl	8003462 <_ZNSt10_Head_baseILj0EOxLb0EE7_M_headERS1_>
 8003458:	4603      	mov	r3, r0
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <_ZNSt10_Head_baseILj0EOxLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <_ZSt7forwardIOxEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <_ZNSt11_Tuple_implILj0EJOxEEC1EOS1_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 800349a:	687c      	ldr	r4, [r7, #4]
 800349c:	6838      	ldr	r0, [r7, #0]
 800349e:	f7ff ffd3 	bl	8003448 <_ZNSt11_Tuple_implILj0EJOxEE7_M_headERS1_>
 80034a2:	4603      	mov	r3, r0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ffe8 	bl	800347a <_ZSt7forwardIOxEOT_RNSt16remove_referenceIS1_E4typeE>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4619      	mov	r1, r3
 80034ae:	4620      	mov	r0, r4
 80034b0:	f7ff fd21 	bl	8002ef6 <_ZNSt10_Head_baseILj0EOxLb0EEC1IxEEOT_>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd90      	pop	{r4, r7, pc}

080034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <_ZSt7forwardISt5tupleIJOxEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOxEESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffd5 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003514:	4604      	mov	r4, r0
 8003516:	6838      	ldr	r0, [r7, #0]
 8003518:	f7ff ffdc 	bl	80034d4 <_ZSt7forwardISt5tupleIJOxEEEOT_RNSt16remove_referenceIS3_E4typeE>
 800351c:	4605      	mov	r5, r0
 800351e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003520:	f7ff ffe3 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003524:	4603      	mov	r3, r0
 8003526:	462a      	mov	r2, r5
 8003528:	4621      	mov	r1, r4
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fab8 	bl	8003aa0 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOxEESD_IJEEEEEPSt13_Rb_tree_nodeIS2_EDpOT_>
 8003530:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8003532:	69f8      	ldr	r0, [r7, #28]
 8003534:	f000 fc4a 	bl	8003dcc <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8003538:	4603      	mov	r3, r0
 800353a:	f107 0010 	add.w	r0, r7, #16
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	68f9      	ldr	r1, [r7, #12]
 8003542:	f000 fb20 	bl	8003b86 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>

	    if (__res.second)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOxEESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 800354c:	6939      	ldr	r1, [r7, #16]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fc4d 	bl	8003df2 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E>
 8003558:	4603      	mov	r3, r0
 800355a:	e00b      	b.n	8003574 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOxEESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_+0x74>

	    _M_drop_node(__z);
 800355c:	69f9      	ldr	r1, [r7, #28]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fa6c 	bl	8003a3c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	    return iterator(__res.first);
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	f107 0318 	add.w	r3, r7, #24
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fc7d 	bl	8003e6c <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1EPSt18_Rb_tree_node_base>
 8003572:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bdb0      	pop	{r4, r5, r7, pc}

0800357c <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE11lower_boundERS6_>:
      lower_bound(const key_type& __x)
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fc7d 	bl	8003e8a <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11lower_boundERS1_>
 8003590:	4603      	mov	r3, r0
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fc87 	bl	8003eb8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE3endEv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEeqERKS6_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <_ZNKSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEE8key_compEv>:
      key_comp() const
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fc77 	bl	8003eda <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8key_compEv>
 80035ec:	4623      	mov	r3, r4
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd90      	pop	{r4, r7, pc}

080035f6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fc73 	bl	8003eee <_ZNSt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEE9_M_valptrEv>
 8003608:	4603      	mov	r3, r0
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <_ZNKSt4lessIiEclERKiS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	bfb4      	ite	lt
 800362a:	2301      	movlt	r3, #1
 800362c:	2300      	movge	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <_ZSt7forwardISt5tupleIJRKiEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003672:	b5b0      	push	{r4, r5, r7, lr}
 8003674:	b088      	sub	sp, #32
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff1c 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003686:	4604      	mov	r4, r0
 8003688:	6838      	ldr	r0, [r7, #0]
 800368a:	f7ff ffe7 	bl	800365c <_ZSt7forwardISt5tupleIJRKiEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800368e:	4605      	mov	r5, r0
 8003690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003692:	f7ff ff2a 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003696:	4603      	mov	r3, r0
 8003698:	462a      	mov	r2, r5
 800369a:	4621      	mov	r1, r4
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fc34 	bl	8003f0a <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 80036a2:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80036a4:	69f8      	ldr	r0, [r7, #28]
 80036a6:	f000 fd76 	bl	8004196 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f107 0010 	add.w	r0, r7, #16
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	68f9      	ldr	r1, [r7, #12]
 80036b4:	f000 fc4c 	bl	8003f50 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_>
	    if (__res.second)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80036be:	6939      	ldr	r1, [r7, #16]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fd79 	bl	80041bc <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 80036ca:	4603      	mov	r3, r0
 80036cc:	e00b      	b.n	80036e6 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>
	    _M_drop_node(__z);
 80036ce:	69f9      	ldr	r1, [r7, #28]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f98a 	bl	80039ea <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	f107 0318 	add.w	r3, r7, #24
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fda9 	bl	8004236 <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPSt18_Rb_tree_node_base>
 80036e4:	69bb      	ldr	r3, [r7, #24]
      }
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bdb0      	pop	{r4, r5, r7, pc}

080036ee <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80036ee:	b590      	push	{r4, r7, lr}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fdab 	bl	8004254 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_beginEv>
 80036fe:	4604      	mov	r4, r0
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fdb3 	bl	800426c <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_M_endEv>
 8003706:	4602      	mov	r2, r0
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4621      	mov	r1, r4
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fdb9 	bl	8004284 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS2_EPKSt18_Rb_tree_node_baseRS1_>
 8003712:	4603      	mov	r3, r0
 8003714:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f825 	bl	8003766 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE3endEv>
 800371c:	4603      	mov	r3, r0
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	f107 020c 	add.w	r2, r7, #12
 8003724:	f107 0308 	add.w	r3, r7, #8
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f82c 	bl	8003788 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKxiEEeqERKS3_>
 8003730:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k, 
					_S_key(__j._M_node))) ? end() : __j;
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k, 
 8003736:	687c      	ldr	r4, [r7, #4]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fdd3 	bl	80042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	4620      	mov	r0, r4
 8003748:	f7ff fe56 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f807 	bl	8003766 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE3endEv>
 8003758:	4603      	mov	r3, r0
 800375a:	e000      	b.n	800375e <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_+0x70>
 800375c:	68bb      	ldr	r3, [r7, #8]
    }
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}

08003766 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	f107 030c 	add.w	r3, r7, #12
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fdc7 	bl	800430c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKxiEEC1EPKSt18_Rb_tree_node_base>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKxiEEeqERKS3_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <_ZSt7forwardISt5tupleIJRKxEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80037c6:	b5b0      	push	{r4, r5, r7, lr}
 80037c8:	b088      	sub	sp, #32
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fe72 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80037da:	4604      	mov	r4, r0
 80037dc:	6838      	ldr	r0, [r7, #0]
 80037de:	f7ff ffe7 	bl	80037b0 <_ZSt7forwardISt5tupleIJRKxEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80037e2:	4605      	mov	r5, r0
 80037e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037e6:	f7ff fe80 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037ea:	4603      	mov	r3, r0
 80037ec:	462a      	mov	r2, r5
 80037ee:	4621      	mov	r1, r4
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fd9a 	bl	800432a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEEPSt13_Rb_tree_nodeIS2_EDpOT_>
 80037f6:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80037f8:	69f8      	ldr	r0, [r7, #28]
 80037fa:	f000 fae7 	bl	8003dcc <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 80037fe:	4603      	mov	r3, r0
 8003800:	f107 0010 	add.w	r0, r7, #16
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	f000 f9bd 	bl	8003b86 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>
	    if (__res.second)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8003812:	6939      	ldr	r1, [r7, #16]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 faea 	bl	8003df2 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E>
 800381e:	4603      	mov	r3, r0
 8003820:	e00b      	b.n	800383a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_+0x74>
	    _M_drop_node(__z);
 8003822:	69f9      	ldr	r1, [r7, #28]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f909 	bl	8003a3c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	    return iterator(__res.first);
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	f107 0318 	add.w	r3, r7, #24
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fb1a 	bl	8003e6c <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1EPSt18_Rb_tree_node_base>
 8003838:	69bb      	ldr	r3, [r7, #24]
      }
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bdb0      	pop	{r4, r5, r7, pc}

08003842 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003842:	b590      	push	{r4, r7, lr}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fd8f 	bl	8004370 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_beginEv>
 8003852:	4604      	mov	r4, r0
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fd97 	bl	8004388 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_M_endEv>
 800385a:	4602      	mov	r2, r0
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4621      	mov	r1, r4
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fd9d 	bl	80043a0 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS1_>
 8003866:	4603      	mov	r3, r0
 8003868:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f825 	bl	80038ba <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE3endEv>
 8003870:	4603      	mov	r3, r0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	f107 020c 	add.w	r2, r7, #12
 8003878:	f107 0308 	add.w	r3, r7, #8
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f82c 	bl	80038dc <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEEeqERKS6_>
 8003884:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k, 
 800388a:	687c      	ldr	r4, [r7, #4]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fdb7 	bl	8004402 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff feb9 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f807 	bl	80038ba <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE3endEv>
 80038ac:	4603      	mov	r3, r0
 80038ae:	e000      	b.n	80038b2 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE4findERS1_+0x70>
 80038b0:	68bb      	ldr	r3, [r7, #8]
    }
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}

080038ba <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	1d1a      	adds	r2, r3, #4
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fdab 	bl	8004428 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPKSt18_Rb_tree_node_base>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEEeqERKS6_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fd28 	bl	8003364 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_beginEv>
 8003914:	4604      	mov	r4, r0
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fd95 	bl	8004446 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_M_endEv>
 800391c:	4602      	mov	r2, r0
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	4621      	mov	r1, r4
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fd9b 	bl	800445e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_>
 8003928:	4603      	mov	r3, r0
 800392a:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f825 	bl	800397c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE3endEv>
 8003932:	4603      	mov	r3, r0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	f107 020c 	add.w	r2, r7, #12
 800393a:	f107 0308 	add.w	r3, r7, #8
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fd2a 	bl	800339a <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEeqERKS3_>
 8003946:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 800394c:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 800394e:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fcc8 	bl	80042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	6839      	ldr	r1, [r7, #0]
 800395c:	4620      	mov	r0, r4
 800395e:	f7ff fd4b 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f807 	bl	800397c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE3endEv>
 800396e:	4603      	mov	r3, r0
 8003970:	e000      	b.n	8003974 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4findERS1_+0x70>
 8003972:	68bb      	ldr	r3, [r7, #8]
    }
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bd90      	pop	{r4, r7, pc}

0800397c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	f107 030c 	add.w	r3, r7, #12
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fa6c 	bl	8003e6c <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1EPSt18_Rb_tree_node_base>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_ZNSt13_Rb_tree_nodeISt4pairIKxiEE9_M_valptrEv>:
      _M_valptr()
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3310      	adds	r3, #16
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fd88 	bl	80044c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKxiEE6_M_ptrEv>
 80039b0:	4603      	mov	r3, r0
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fd6e 	bl	80044d8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 80039fc:	6839      	ldr	r1, [r7, #0]
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fd7f 	bl	8004502 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fd6c 	bl	8004526 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>
	_M_put_node(__p);
 8003a4e:	6839      	ldr	r1, [r7, #0]
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fd7d 	bl	8004550 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>
      }
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8003a5e:	b590      	push	{r4, r7, lr}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff fc7b 	bl	8003364 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_beginEv>
 8003a6e:	4604      	mov	r4, r0
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fce8 	bl	8004446 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_M_endEv>
 8003a76:	4602      	mov	r2, r0
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fcee 	bl	800445e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd90      	pop	{r4, r7, pc}

08003a8c <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8key_compEv>:
      key_comp() const
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOxEESD_IJEEEEEPSt13_Rb_tree_nodeIS2_EDpOT_>:
        _M_create_node(_Args&&... __args)
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fd60 	bl	8004574 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11_M_get_nodeEv>
 8003ab4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	f7ff fd01 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003abc:	4604      	mov	r4, r0
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fd08 	bl	80034d4 <_ZSt7forwardISt5tupleIJOxEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003ac4:	4605      	mov	r5, r0
 8003ac6:	6838      	ldr	r0, [r7, #0]
 8003ac8:	f7ff fd0f 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003acc:	4603      	mov	r3, r0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	6979      	ldr	r1, [r7, #20]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fd5d 	bl	8004596 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOxEESD_IJEEEEEvPSt13_Rb_tree_nodeIS2_EDpOT_>
	  return __tmp;
 8003adc:	697b      	ldr	r3, [r7, #20]
	}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bdb0      	pop	{r4, r5, r7, pc}

08003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f809 	bl	8003b12 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b00:	4603      	mov	r3, r0
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003b34:	68b8      	ldr	r0, [r7, #8]
 8003b36:	f7ff ffec 	bl	8003b12 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ffe5 	bl	8003b12 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8003b66:	68b8      	ldr	r0, [r7, #8]
 8003b68:	f7ff ffd3 	bl	8003b12 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003b86:	b590      	push	{r4, r7, lr}
 8003b88:	b08d      	sub	sp, #52	; 0x34
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003b94:	1d3b      	adds	r3, r7, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fd2a 	bl	80045f0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKxiEE13_M_const_castEv>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ba0:	69bc      	ldr	r4, [r7, #24]
 8003ba2:	68b8      	ldr	r0, [r7, #8]
 8003ba4:	f000 fc4f 	bl	8004446 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_M_endEv>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	429c      	cmp	r4, r3
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d030      	beq.n	8003c1a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x94>
	  if (size() > 0
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f000 fd2a 	bl	8004612 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4sizeEv>
 8003bbe:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 8003bc4:	68bc      	ldr	r4, [r7, #8]
 8003bc6:	68b8      	ldr	r0, [r7, #8]
 8003bc8:	f000 fd2f 	bl	800462a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE12_M_rightmostEv>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fb88 	bl	80042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7ff fc0b 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x68>
 8003bec:	2300      	movs	r3, #0
	  if (size() > 0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	68b8      	ldr	r0, [r7, #8]
 8003bf8:	f000 fd17 	bl	800462a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE12_M_rightmostEv>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	f107 031c 	add.w	r3, r7, #28
 8003c02:	4619      	mov	r1, r3
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7ff ff6e 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003c0a:	e0db      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fd39 	bl	800468a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_>
 8003c18:	e0d4      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003c1a:	68bc      	ldr	r4, [r7, #8]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fb61 	bl	80042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff fbe4 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d057      	beq.n	8003ce6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x160>
	  iterator __before = __pos;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003c3a:	69bc      	ldr	r4, [r7, #24]
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	f000 fda9 	bl	8004794 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11_M_leftmostEv>
 8003c42:	4603      	mov	r3, r0
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	429c      	cmp	r4, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003c54:	68b8      	ldr	r0, [r7, #8]
 8003c56:	f000 fd9d 	bl	8004794 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11_M_leftmostEv>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	68b8      	ldr	r0, [r7, #8]
 8003c5e:	f000 fd99 	bl	8004794 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11_M_leftmostEv>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	4621      	mov	r1, r4
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff ff5d 	bl	8003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003c6e:	e0a9      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003c70:	68bc      	ldr	r4, [r7, #8]
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fd98 	bl	80047ac <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEmmEv>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fb30 	bl	80042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c86:	4603      	mov	r3, r0
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f7ff fbb3 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01f      	beq.n	8003cd8 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff feb6 	bl	8003a0c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	f107 0214 	add.w	r2, r7, #20
 8003cb8:	f107 0320 	add.w	r3, r7, #32
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff ff11 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003cc4:	e07e      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8003cc6:	f107 0218 	add.w	r2, r7, #24
 8003cca:	f107 0318 	add.w	r3, r7, #24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff ff29 	bl	8003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cd6:	e075      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fcd3 	bl	800468a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_>
 8003ce4:	e06e      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003ce6:	68bc      	ldr	r4, [r7, #8]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fafb 	bl	80042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f7ff fb7e 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d056      	beq.n	8003db0 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x22a>
	  iterator __after = __pos;
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003d06:	69bc      	ldr	r4, [r7, #24]
 8003d08:	68b8      	ldr	r0, [r7, #8]
 8003d0a:	f000 fc8e 	bl	800462a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE12_M_rightmostEv>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	429c      	cmp	r4, r3
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00c      	beq.n	8003d3a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
 8003d24:	68b8      	ldr	r0, [r7, #8]
 8003d26:	f000 fc80 	bl	800462a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE12_M_rightmostEv>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d30:	4619      	mov	r1, r3
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff fed7 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003d38:	e044      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003d3a:	68bc      	ldr	r4, [r7, #8]
 8003d3c:	f107 0310 	add.w	r3, r7, #16
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fd44 	bl	80047ce <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEppEv>
 8003d46:	4603      	mov	r3, r0
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 facb 	bl	80042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	4620      	mov	r0, r4
 8003d58:	f7ff fb4e 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01f      	beq.n	8003da2 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fe51 	bl	8003a0c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	f107 0218 	add.w	r2, r7, #24
 8003d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d86:	4619      	mov	r1, r3
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff feac 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003d8e:	e019      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8003d90:	f107 0210 	add.w	r2, r7, #16
 8003d94:	f107 0310 	add.w	r3, r7, #16
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fec4 	bl	8003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003da0:	e010      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fc6e 	bl	800468a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_>
 8003dae:	e009      	b.n	8003dc4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8003db0:	2300      	movs	r3, #0
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003db8:	f107 0318 	add.w	r3, r7, #24
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fecb 	bl	8003b5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	3734      	adds	r7, #52	; 0x34
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd90      	pop	{r4, r7, pc}

08003dcc <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>:
      _S_key(_Const_Link_type __x)
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fd0b 	bl	80047f0 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_valueEPKSt13_Rb_tree_nodeIS2_E>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fd10 	bl	8004808 <_ZNKSt10_Select1stISt4pairIKxiEEclERKS2_>
 8003de8:	4603      	mov	r3, r0
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003df2:	b5b0      	push	{r4, r5, r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d117      	bne.n	8003e36 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fb1d 	bl	8004446 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_M_endEv>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d010      	beq.n	8003e36 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e14:	68fc      	ldr	r4, [r7, #12]
 8003e16:	6838      	ldr	r0, [r7, #0]
 8003e18:	f7ff ffd8 	bl	8003dcc <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fa61 	bl	80042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003e24:	4603      	mov	r3, r0
 8003e26:	461a      	mov	r2, r3
 8003e28:	4629      	mov	r1, r5
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7ff fae4 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E+0x48>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E+0x4a>
 8003e3a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e3c:	75fb      	strb	r3, [r7, #23]
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3304      	adds	r3, #4
 8003e42:	7df8      	ldrb	r0, [r7, #23]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	f004 fb18 	bl	800847c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8003e56:	f107 0310 	add.w	r3, r7, #16
 8003e5a:	6839      	ldr	r1, [r7, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f805 	bl	8003e6c <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1EPSt18_Rb_tree_node_base>
 8003e62:	693b      	ldr	r3, [r7, #16]
    }
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bdb0      	pop	{r4, r5, r7, pc}

08003e6c <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8003e8a:	b590      	push	{r4, r7, lr}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fa59 	bl	800334c <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_beginEv>
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fcbf 	bl	8004820 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_M_endEv>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fcc5 	bl	8004838 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS1_>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd90      	pop	{r4, r7, pc}

08003eb8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1d1a      	adds	r2, r3, #4
 8003ec4:	f107 030c 	add.w	r3, r7, #12
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f9b3 	bl	8004236 <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPSt18_Rb_tree_node_base>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8key_compEv>:
      key_comp() const
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <_ZNSt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEE9_M_valptrEv>:
      _M_valptr()
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3310      	adds	r3, #16
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fccd 	bl	800489a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKiPN3wyz10CStateBaseEEE6_M_ptrEv>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
        _M_create_node(_Args&&... __args)
 8003f0a:	b5b0      	push	{r4, r5, r7, lr}
 8003f0c:	b088      	sub	sp, #32
 8003f0e:	af02      	add	r7, sp, #8
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
 8003f16:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fcca 	bl	80048b2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11_M_get_nodeEv>
 8003f1e:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003f20:	68b8      	ldr	r0, [r7, #8]
 8003f22:	f7ff facc 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003f26:	4604      	mov	r4, r0
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fb97 	bl	800365c <_ZSt7forwardISt5tupleIJRKiEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003f2e:	4605      	mov	r5, r0
 8003f30:	6838      	ldr	r0, [r7, #0]
 8003f32:	f7ff fada 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003f36:	4603      	mov	r3, r0
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	462b      	mov	r3, r5
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	6979      	ldr	r1, [r7, #20]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fcc7 	bl	80048d4 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8003f46:	697b      	ldr	r3, [r7, #20]
	}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bdb0      	pop	{r4, r5, r7, pc}

08003f50 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b08d      	sub	sp, #52	; 0x34
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fce4 	bl	800492e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEE13_M_const_castEv>
 8003f66:	4603      	mov	r3, r0
 8003f68:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003f6a:	69bc      	ldr	r4, [r7, #24]
 8003f6c:	68b8      	ldr	r0, [r7, #8]
 8003f6e:	f000 fc57 	bl	8004820 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_M_endEv>
 8003f72:	4603      	mov	r3, r0
 8003f74:	429c      	cmp	r4, r3
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d030      	beq.n	8003fe4 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x94>
	  if (size() > 0
 8003f82:	68b8      	ldr	r0, [r7, #8]
 8003f84:	f000 fce4 	bl	8004950 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE4sizeEv>
 8003f88:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d013      	beq.n	8003fb6 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x66>
 8003f8e:	68bc      	ldr	r4, [r7, #8]
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f000 fce9 	bl	8004968 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE12_M_rightmostEv>
 8003f96:	4603      	mov	r3, r0
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fa31 	bl	8004402 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7ff fb33 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x66>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x68>
 8003fb6:	2300      	movs	r3, #0
	  if (size() > 0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00c      	beq.n	8003fd6 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	68b8      	ldr	r0, [r7, #8]
 8003fc2:	f000 fcd1 	bl	8004968 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE12_M_rightmostEv>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	f107 031c 	add.w	r3, r7, #28
 8003fcc:	4619      	mov	r1, r3
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f7ff fd89 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8003fd4:	e0db      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fcf3 	bl	80049c8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_>
 8003fe2:	e0d4      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003fe4:	68bc      	ldr	r4, [r7, #8]
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fa0a 	bl	8004402 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6839      	ldr	r1, [r7, #0]
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7ff fb0c 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d057      	beq.n	80040b0 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x160>
	  iterator __before = __pos;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8004004:	69bc      	ldr	r4, [r7, #24]
 8004006:	68b8      	ldr	r0, [r7, #8]
 8004008:	f000 fd63 	bl	8004ad2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11_M_leftmostEv>
 800400c:	4603      	mov	r3, r0
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	429c      	cmp	r4, r3
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00d      	beq.n	800403a <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800401e:	68b8      	ldr	r0, [r7, #8]
 8004020:	f000 fd57 	bl	8004ad2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11_M_leftmostEv>
 8004024:	4604      	mov	r4, r0
 8004026:	68b8      	ldr	r0, [r7, #8]
 8004028:	f000 fd53 	bl	8004ad2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11_M_leftmostEv>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	4621      	mov	r1, r4
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff fd78 	bl	8003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8004038:	e0a9      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800403a:	68bc      	ldr	r4, [r7, #8]
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fd52 	bl	8004aea <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEmmEv>
 8004046:	4603      	mov	r3, r0
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f9d9 	bl	8004402 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004050:	4603      	mov	r3, r0
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	4620      	mov	r0, r4
 8004058:	f7ff fadb 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01f      	beq.n	80040a2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fca8 	bl	80039ba <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x140>
		return _Res(0, __before._M_node);
 800407a:	2300      	movs	r3, #0
 800407c:	623b      	str	r3, [r7, #32]
 800407e:	f107 0214 	add.w	r2, r7, #20
 8004082:	f107 0320 	add.w	r3, r7, #32
 8004086:	4619      	mov	r1, r3
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fd2c 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 800408e:	e07e      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8004090:	f107 0218 	add.w	r2, r7, #24
 8004094:	f107 0318 	add.w	r3, r7, #24
 8004098:	4619      	mov	r1, r3
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff fd44 	bl	8003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80040a0:	e075      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fc8d 	bl	80049c8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_>
 80040ae:	e06e      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80040b0:	68bc      	ldr	r4, [r7, #8]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f9a4 	bl	8004402 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80040ba:	4603      	mov	r3, r0
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	4619      	mov	r1, r3
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff faa6 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d056      	beq.n	800417a <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x22a>
	  iterator __after = __pos;
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80040d0:	69bc      	ldr	r4, [r7, #24]
 80040d2:	68b8      	ldr	r0, [r7, #8]
 80040d4:	f000 fc48 	bl	8004968 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE12_M_rightmostEv>
 80040d8:	4603      	mov	r3, r0
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	429c      	cmp	r4, r3
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80040ea:	2300      	movs	r3, #0
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	68b8      	ldr	r0, [r7, #8]
 80040f0:	f000 fc3a 	bl	8004968 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE12_M_rightmostEv>
 80040f4:	4602      	mov	r2, r0
 80040f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040fa:	4619      	mov	r1, r3
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fcf2 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8004102:	e044      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8004104:	68bc      	ldr	r4, [r7, #8]
 8004106:	f107 0310 	add.w	r3, r7, #16
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fcfe 	bl	8004b0c <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEppEv>
 8004110:	4603      	mov	r3, r0
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 f974 	bl	8004402 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800411a:	4603      	mov	r3, r0
 800411c:	461a      	mov	r2, r3
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	4620      	mov	r0, r4
 8004122:	f7ff fa76 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01f      	beq.n	800416c <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fc43 	bl	80039ba <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8004144:	2300      	movs	r3, #0
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
 8004148:	f107 0218 	add.w	r2, r7, #24
 800414c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff fcc7 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8004158:	e019      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800415a:	f107 0210 	add.w	r2, r7, #16
 800415e:	f107 0310 	add.w	r3, r7, #16
 8004162:	4619      	mov	r1, r3
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f7ff fcdf 	bl	8003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800416a:	e010      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fc28 	bl	80049c8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_>
 8004178:	e009      	b.n	800418e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 800417a:	2300      	movs	r3, #0
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004182:	f107 0318 	add.w	r3, r7, #24
 8004186:	4619      	mov	r1, r3
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff fce6 	bl	8003b5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	3734      	adds	r7, #52	; 0x34
 8004192:	46bd      	mov	sp, r7
 8004194:	bd90      	pop	{r4, r7, pc}

08004196 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fcc5 	bl	8004b2e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_valueEPKSt13_Rb_tree_nodeIS5_E>
 80041a4:	4602      	mov	r2, r0
 80041a6:	f107 030c 	add.w	r3, r7, #12
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fcca 	bl	8004b46 <_ZNKSt10_Select1stISt4pairIKiPN3wyz10CStateBaseEEEclERKS5_>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041bc:	b5b0      	push	{r4, r5, r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d117      	bne.n	8004200 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fb25 	bl	8004820 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_M_endEv>
 80041d6:	4602      	mov	r2, r0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4293      	cmp	r3, r2
 80041dc:	d010      	beq.n	8004200 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80041de:	68fc      	ldr	r4, [r7, #12]
 80041e0:	6838      	ldr	r0, [r7, #0]
 80041e2:	f7ff ffd8 	bl	8004196 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80041e6:	4605      	mov	r5, r0
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f90a 	bl	8004402 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80041ee:	4603      	mov	r3, r0
 80041f0:	461a      	mov	r2, r3
 80041f2:	4629      	mov	r1, r5
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff fa0c 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4a>
 8004204:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8004206:	75fb      	strb	r3, [r7, #23]
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3304      	adds	r3, #4
 800420c:	7df8      	ldrb	r0, [r7, #23]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	f004 f933 	bl	800847c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8004220:	f107 0310 	add.w	r3, r7, #16
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f805 	bl	8004236 <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPSt18_Rb_tree_node_base>
 800422c:	693b      	ldr	r3, [r7, #16]
    }
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bdb0      	pop	{r4, r5, r7, pc}

08004236 <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
      }
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS2_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01b      	beq.n	80042d0 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS2_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004298:	68fc      	ldr	r4, [r7, #12]
 800429a:	68b8      	ldr	r0, [r7, #8]
 800429c:	f7ff fd96 	bl	8003dcc <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 80042a0:	4603      	mov	r3, r0
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4619      	mov	r1, r3
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7ff f8a6 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f083 0301 	eor.w	r3, r3, #1
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS2_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	68b8      	ldr	r0, [r7, #8]
 80042be:	f000 fc4e 	bl	8004b5e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80042c2:	60b8      	str	r0, [r7, #8]
 80042c4:	e7e5      	b.n	8004292 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS2_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f000 fc55 	bl	8004b76 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80042cc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80042ce:	e7e0      	b.n	8004292 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS2_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f818 	bl	800430c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKxiEEC1EPKSt18_Rb_tree_node_base>
 80042dc:	697b      	ldr	r3, [r7, #20]
    }
 80042de:	4618      	mov	r0, r3
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd90      	pop	{r4, r7, pc}

080042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fc4d 	bl	8004b8e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_valueEPKSt18_Rb_tree_node_base>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f107 030c 	add.w	r3, r7, #12
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fa83 	bl	8004808 <_ZNKSt10_Select1stISt4pairIKxiEEclERKS2_>
 8004302:	4603      	mov	r3, r0
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKxiEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4618      	mov	r0, r3
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEEPSt13_Rb_tree_nodeIS2_EDpOT_>:
        _M_create_node(_Args&&... __args)
 800432a:	b5b0      	push	{r4, r5, r7, lr}
 800432c:	b088      	sub	sp, #32
 800432e:	af02      	add	r7, sp, #8
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f91b 	bl	8004574 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11_M_get_nodeEv>
 800433e:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8004340:	68b8      	ldr	r0, [r7, #8]
 8004342:	f7ff f8bc 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004346:	4604      	mov	r4, r0
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fa31 	bl	80037b0 <_ZSt7forwardISt5tupleIJRKxEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800434e:	4605      	mov	r5, r0
 8004350:	6838      	ldr	r0, [r7, #0]
 8004352:	f7ff f8ca 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004356:	4603      	mov	r3, r0
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	462b      	mov	r3, r5
 800435c:	4622      	mov	r2, r4
 800435e:	6979      	ldr	r1, [r7, #20]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fc20 	bl	8004ba6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEEvPSt13_Rb_tree_nodeIS2_EDpOT_>
	  return __tmp;
 8004366:	697b      	ldr	r3, [r7, #20]
	}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bdb0      	pop	{r4, r5, r7, pc}

08004370 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
      }
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80043b4:	68fc      	ldr	r4, [r7, #12]
 80043b6:	68b8      	ldr	r0, [r7, #8]
 80043b8:	f7ff feed 	bl	8004196 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80043bc:	4603      	mov	r3, r0
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	4619      	mov	r1, r3
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff f925 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f083 0301 	eor.w	r3, r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d006      	beq.n	80043e2 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	68b8      	ldr	r0, [r7, #8]
 80043da:	f000 fc11 	bl	8004c00 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80043de:	60b8      	str	r0, [r7, #8]
 80043e0:	e7e5      	b.n	80043ae <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80043e2:	68b8      	ldr	r0, [r7, #8]
 80043e4:	f000 fc18 	bl	8004c18 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80043e8:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80043ea:	e7e0      	b.n	80043ae <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 80043ec:	f107 0314 	add.w	r3, r7, #20
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f818 	bl	8004428 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPKSt18_Rb_tree_node_base>
 80043f8:	697b      	ldr	r3, [r7, #20]
    }
 80043fa:	4618      	mov	r0, r3
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd90      	pop	{r4, r7, pc}

08004402 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fc10 	bl	8004c30 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_valueEPKSt18_Rb_tree_node_base>
 8004410:	4602      	mov	r2, r0
 8004412:	f107 030c 	add.w	r3, r7, #12
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fb94 	bl	8004b46 <_ZNKSt10_Select1stISt4pairIKiPN3wyz10CStateBaseEEEclERKS5_>
 800441e:	4603      	mov	r3, r0
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800445e:	b590      	push	{r4, r7, lr}
 8004460:	b087      	sub	sp, #28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d01b      	beq.n	80044aa <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004472:	68fc      	ldr	r4, [r7, #12]
 8004474:	68b8      	ldr	r0, [r7, #8]
 8004476:	f7ff fca9 	bl	8003dcc <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 800447a:	4603      	mov	r3, r0
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	4620      	mov	r0, r4
 8004482:	f7fe ffb9 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8004486:	4603      	mov	r3, r0
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	68b8      	ldr	r0, [r7, #8]
 8004498:	f7ff fac4 	bl	8003a24 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 800449c:	60b8      	str	r0, [r7, #8]
 800449e:	e7e5      	b.n	800446c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80044a0:	68b8      	ldr	r0, [r7, #8]
 80044a2:	f7ff fab3 	bl	8003a0c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80044a6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80044a8:	e7e0      	b.n	800446c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 80044aa:	f107 0314 	add.w	r3, r7, #20
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fcdb 	bl	8003e6c <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1EPSt18_Rb_tree_node_base>
 80044b6:	697b      	ldr	r3, [r7, #20]
    }
 80044b8:	4618      	mov	r0, r3
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd90      	pop	{r4, r7, pc}

080044c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKxiEE6_M_ptrEv>:
      _M_ptr() noexcept
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fbbd 	bl	8004c48 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKxiEE7_M_addrEv>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) noexcept
 80044d8:	b590      	push	{r4, r7, lr}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fbbb 	bl	8004c5e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE21_M_get_Node_allocatorEv>
 80044e8:	4604      	mov	r4, r0
 80044ea:	6838      	ldr	r0, [r7, #0]
 80044ec:	f7ff fcff 	bl	8003eee <_ZNSt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEE9_M_valptrEv>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4619      	mov	r1, r3
 80044f4:	4620      	mov	r0, r4
 80044f6:	f000 fbbd 	bl	8004c74 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEE7destroyIS6_EEvRS8_PT_>
      }
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd90      	pop	{r4, r7, pc}

08004502 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fba6 	bl	8004c5e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE21_M_get_Node_allocatorEv>
 8004512:	4603      	mov	r3, r0
 8004514:	2201      	movs	r2, #1
 8004516:	6839      	ldr	r1, [r7, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fbb8 	bl	8004c8e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEE10deallocateERS8_PS7_j>
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_destroy_node(_Link_type __p) noexcept
 8004526:	b590      	push	{r4, r7, lr}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fbbb 	bl	8004cac <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE21_M_get_Node_allocatorEv>
 8004536:	4604      	mov	r4, r0
 8004538:	6838      	ldr	r0, [r7, #0]
 800453a:	f7ff fa30 	bl	800399e <_ZNSt13_Rb_tree_nodeISt4pairIKxiEE9_M_valptrEv>
 800453e:	4603      	mov	r3, r0
 8004540:	4619      	mov	r1, r3
 8004542:	4620      	mov	r0, r4
 8004544:	f000 fbbd 	bl	8004cc2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE7destroyIS3_EEvRS5_PT_>
      }
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bd90      	pop	{r4, r7, pc}

08004550 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fba6 	bl	8004cac <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE21_M_get_Node_allocatorEv>
 8004560:	4603      	mov	r3, r0
 8004562:	2201      	movs	r2, #1
 8004564:	6839      	ldr	r1, [r7, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fbb8 	bl	8004cdc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE10deallocateERS5_PS4_j>
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fb95 	bl	8004cac <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE21_M_get_Node_allocatorEv>
 8004582:	4603      	mov	r3, r0
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fbb7 	bl	8004cfa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE8allocateERS5_j>
 800458c:	4603      	mov	r3, r0
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOxEESD_IJEEEEEvPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4619      	mov	r1, r3
 80045aa:	2020      	movs	r0, #32
 80045ac:	f7fe face 	bl	8002b4c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fb7b 	bl	8004cac <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE21_M_get_Node_allocatorEv>
 80045b6:	4604      	mov	r4, r0
 80045b8:	68b8      	ldr	r0, [r7, #8]
 80045ba:	f7ff f9f0 	bl	800399e <_ZNSt13_Rb_tree_nodeISt4pairIKxiEE9_M_valptrEv>
 80045be:	4605      	mov	r5, r0
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7fe ff7c 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80045c6:	4606      	mov	r6, r0
 80045c8:	6838      	ldr	r0, [r7, #0]
 80045ca:	f7fe ff83 	bl	80034d4 <_ZSt7forwardISt5tupleIJOxEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80045ce:	4680      	mov	r8, r0
 80045d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d2:	f7fe ff8a 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80045d6:	4603      	mov	r3, r0
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	4643      	mov	r3, r8
 80045dc:	4632      	mov	r2, r6
 80045de:	4629      	mov	r1, r5
 80045e0:	4620      	mov	r0, r4
 80045e2:	f000 fb99 	bl	8004d18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE9constructIS3_JRKSt21piecewise_construct_tSt5tupleIJOxEESB_IJEEEEEvRS5_PT_DpOT0_>
	}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080045f0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKxiEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f107 030c 	add.w	r3, r7, #12
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fc32 	bl	8003e6c <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1EPSt18_Rb_tree_node_base>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <_ZNKSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT 
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3310      	adds	r3, #16
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKxiEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800464e:	68b8      	ldr	r0, [r7, #8]
 8004650:	f000 f810 	bl	8004674 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKxiEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8004654:	4603      	mov	r3, r0
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff fa58 	bl	8003b12 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004662:	4603      	mov	r3, r0
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKxiEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800468a:	b590      	push	{r4, r7, lr}
 800468c:	b08b      	sub	sp, #44	; 0x2c
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004696:	68b8      	ldr	r0, [r7, #8]
 8004698:	f7fe fe64 	bl	8003364 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_beginEv>
 800469c:	4603      	mov	r3, r0
 800469e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80046a0:	68b8      	ldr	r0, [r7, #8]
 80046a2:	f7ff fed0 	bl	8004446 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_M_endEv>
 80046a6:	4603      	mov	r3, r0
 80046a8:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d020      	beq.n	80046f8 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80046ba:	68bc      	ldr	r4, [r7, #8]
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fb84 	bl	8003dcc <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 80046c4:	4603      	mov	r3, r0
 80046c6:	461a      	mov	r2, r3
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4620      	mov	r0, r4
 80046cc:	f7fe fe94 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80046d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_+0x60>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff f99f 	bl	8003a24 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 80046e6:	4603      	mov	r3, r0
 80046e8:	e004      	b.n	80046f4 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_+0x6a>
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff f98d 	bl	8003a0c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80046f2:	4603      	mov	r3, r0
 80046f4:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80046f6:	e7db      	b.n	80046b0 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	f107 0310 	add.w	r3, r7, #16
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fbb3 	bl	8003e6c <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01d      	beq.n	800474a <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 800470e:	68b8      	ldr	r0, [r7, #8]
 8004710:	f000 fb20 	bl	8004d54 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE5beginEv>
 8004714:	4603      	mov	r3, r0
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	f107 021c 	add.w	r2, r7, #28
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fe39 	bl	800339a <_ZNKSt17_Rb_tree_iteratorISt4pairIKxiEEeqERKS3_>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d008      	beq.n	8004740 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 800472e:	f107 0214 	add.w	r2, r7, #20
 8004732:	f107 0318 	add.w	r3, r7, #24
 8004736:	4619      	mov	r1, r3
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff ff82 	bl	8004642 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKxiEERS1_Lb1EEEOT_OT0_>
 800473e:	e025      	b.n	800478c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8004740:	f107 0310 	add.w	r3, r7, #16
 8004744:	4618      	mov	r0, r3
 8004746:	f000 f831 	bl	80047ac <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800474a:	68bc      	ldr	r4, [r7, #8]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fdc9 	bl	80042e6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004754:	4603      	mov	r3, r0
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	4619      	mov	r1, r3
 800475a:	4620      	mov	r0, r4
 800475c:	f7fe fe4c 	bl	80033f8 <_ZNKSt4lessIxEclERKxS2_>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8004766:	f107 0214 	add.w	r2, r7, #20
 800476a:	f107 0318 	add.w	r3, r7, #24
 800476e:	4619      	mov	r1, r3
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff ff66 	bl	8004642 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKxiEERS1_Lb1EEEOT_OT0_>
 8004776:	e009      	b.n	800478c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
 800477c:	f107 0220 	add.w	r2, r7, #32
 8004780:	f107 0310 	add.w	r3, r7, #16
 8004784:	4619      	mov	r1, r3
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff f9e7 	bl	8003b5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	372c      	adds	r7, #44	; 0x2c
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}

08004794 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	330c      	adds	r3, #12
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f003 fe5d 	bl	8008478 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80047be:	4602      	mov	r2, r0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]
	return *this;
 80047c4:	687b      	ldr	r3, [r7, #4]
      }
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f003 fe38 	bl	8008450 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80047e0:	4602      	mov	r2, r0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
	return *this;
 80047e6:	687b      	ldr	r3, [r7, #4]
      }
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_valueEPKSt13_Rb_tree_nodeIS2_E>:
      _S_value(_Const_Link_type __x)
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
      { return *__x->_M_valptr(); }
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fabc 	bl	8004d76 <_ZNKSt13_Rb_tree_nodeISt4pairIKxiEE9_M_valptrEv>
 80047fe:	4603      	mov	r3, r0
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <_ZNKSt10_Select1stISt4pairIKxiEEclERKS2_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004838:	b590      	push	{r4, r7, lr}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800484c:	68fc      	ldr	r4, [r7, #12]
 800484e:	68b8      	ldr	r0, [r7, #8]
 8004850:	f7ff fca1 	bl	8004196 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8004854:	4603      	mov	r3, r0
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	4620      	mov	r0, r4
 800485c:	f7fe fed9 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 8004860:	4603      	mov	r3, r0
 8004862:	f083 0301 	eor.w	r3, r3, #1
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d006      	beq.n	800487a <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	607b      	str	r3, [r7, #4]
 8004870:	68b8      	ldr	r0, [r7, #8]
 8004872:	f7ff f8ae 	bl	80039d2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004876:	60b8      	str	r0, [r7, #8]
 8004878:	e7e5      	b.n	8004846 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 800487a:	68b8      	ldr	r0, [r7, #8]
 800487c:	f7ff f89d 	bl	80039ba <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004880:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004882:	e7e0      	b.n	8004846 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fcd3 	bl	8004236 <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPSt18_Rb_tree_node_base>
 8004890:	697b      	ldr	r3, [r7, #20]
    }
 8004892:	4618      	mov	r0, r3
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd90      	pop	{r4, r7, pc}

0800489a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKiPN3wyz10CStateBaseEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa75 	bl	8004d92 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKiPN3wyz10CStateBaseEEE7_M_addrEv>
 80048a8:	4603      	mov	r3, r0
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9cf 	bl	8004c5e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE21_M_get_Node_allocatorEv>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2101      	movs	r1, #1
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fa6f 	bl	8004da8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEE8allocateERS8_j>
 80048ca:	4603      	mov	r3, r0
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80048d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af02      	add	r7, sp, #8
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4619      	mov	r1, r3
 80048e8:	2018      	movs	r0, #24
 80048ea:	f7fe f92f 	bl	8002b4c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f9b5 	bl	8004c5e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE21_M_get_Node_allocatorEv>
 80048f4:	4604      	mov	r4, r0
 80048f6:	68b8      	ldr	r0, [r7, #8]
 80048f8:	f7ff faf9 	bl	8003eee <_ZNSt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEE9_M_valptrEv>
 80048fc:	4605      	mov	r5, r0
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fe fddd 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004904:	4606      	mov	r6, r0
 8004906:	6838      	ldr	r0, [r7, #0]
 8004908:	f7fe fea8 	bl	800365c <_ZSt7forwardISt5tupleIJRKiEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800490c:	4680      	mov	r8, r0
 800490e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004910:	f7fe fdeb 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004914:	4603      	mov	r3, r0
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	4643      	mov	r3, r8
 800491a:	4632      	mov	r2, r6
 800491c:	4629      	mov	r1, r5
 800491e:	4620      	mov	r0, r4
 8004920:	f000 fa51 	bl	8004dc6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800492e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKiPN3wyz10CStateBaseEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	f107 030c 	add.w	r3, r7, #12
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fc78 	bl	8004236 <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPSt18_Rb_tree_node_base>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <_ZNKSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT 
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3310      	adds	r3, #16
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKiPN3wyz10CStateBaseEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f000 f810 	bl	80049b2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8004992:	4603      	mov	r3, r0
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff f8b9 	bl	8003b12 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80049a0:	4603      	mov	r3, r0
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	605a      	str	r2, [r3, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b08b      	sub	sp, #44	; 0x2c
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80049d4:	68b8      	ldr	r0, [r7, #8]
 80049d6:	f7fe fcb9 	bl	800334c <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_beginEv>
 80049da:	4603      	mov	r3, r0
 80049dc:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80049de:	68b8      	ldr	r0, [r7, #8]
 80049e0:	f7ff ff1e 	bl	8004820 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_M_endEv>
 80049e4:	4603      	mov	r3, r0
 80049e6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d020      	beq.n	8004a36 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80049f8:	68bc      	ldr	r4, [r7, #8]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fbca 	bl	8004196 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8004a02:	4603      	mov	r3, r0
 8004a04:	461a      	mov	r2, r3
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f7fe fe02 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_+0x60>
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe ffd7 	bl	80039d2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004a24:	4603      	mov	r3, r0
 8004a26:	e004      	b.n	8004a32 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_+0x6a>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe ffc5 	bl	80039ba <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004a30:	4603      	mov	r3, r0
 8004a32:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004a34:	e7db      	b.n	80049ee <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	f107 0310 	add.w	r3, r7, #16
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fbf9 	bl	8004236 <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01d      	beq.n	8004a88 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8004a4c:	68b8      	ldr	r0, [r7, #8]
 8004a4e:	f000 f9d8 	bl	8004e02 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE5beginEv>
 8004a52:	4603      	mov	r3, r0
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	f107 021c 	add.w	r2, r7, #28
 8004a5a:	f107 0310 	add.w	r3, r7, #16
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fda7 	bl	80035b4 <_ZNKSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEeqERKS6_>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8004a6c:	f107 0214 	add.w	r2, r7, #20
 8004a70:	f107 0318 	add.w	r3, r7, #24
 8004a74:	4619      	mov	r1, r3
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff ff82 	bl	8004980 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKiPN3wyz10CStateBaseEEERS1_Lb1EEEOT_OT0_>
 8004a7c:	e025      	b.n	8004aca <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8004a7e:	f107 0310 	add.w	r3, r7, #16
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f831 	bl	8004aea <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8004a88:	68bc      	ldr	r4, [r7, #8]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fcb8 	bl	8004402 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004a92:	4603      	mov	r3, r0
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4619      	mov	r1, r3
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7fe fdba 	bl	8003612 <_ZNKSt4lessIiEclERKiS2_>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8004aa4:	f107 0214 	add.w	r2, r7, #20
 8004aa8:	f107 0318 	add.w	r3, r7, #24
 8004aac:	4619      	mov	r1, r3
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f7ff ff66 	bl	8004980 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKiPN3wyz10CStateBaseEEERS1_Lb1EEEOT_OT0_>
 8004ab4:	e009      	b.n	8004aca <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	f107 0220 	add.w	r2, r7, #32
 8004abe:	f107 0310 	add.w	r3, r7, #16
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff f848 	bl	8003b5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	372c      	adds	r7, #44	; 0x2c
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}

08004ad2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	330c      	adds	r3, #12
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f003 fcbe 	bl	8008478 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004afc:	4602      	mov	r2, r0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
	return *this;
 8004b02:	687b      	ldr	r3, [r7, #4]
      }
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f003 fc99 	bl	8008450 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	601a      	str	r2, [r3, #0]
	return *this;
 8004b24:	687b      	ldr	r3, [r7, #4]
      }
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_valueEPKSt13_Rb_tree_nodeIS5_E>:
      _S_value(_Const_Link_type __x)
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
      { return *__x->_M_valptr(); }
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f974 	bl	8004e24 <_ZNKSt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEE9_M_valptrEv>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <_ZNKSt10_Select1stISt4pairIKiPN3wyz10CStateBaseEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_valueEPKSt18_Rb_tree_node_base>:
      _S_value(_Const_Base_ptr __x)
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8ed 	bl	8004d76 <_ZNKSt13_Rb_tree_nodeISt4pairIKxiEE9_M_valptrEv>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEEvPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	2020      	movs	r0, #32
 8004bbc:	f7fd ffc6 	bl	8002b4c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f873 	bl	8004cac <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE21_M_get_Node_allocatorEv>
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	68b8      	ldr	r0, [r7, #8]
 8004bca:	f7fe fee8 	bl	800399e <_ZNSt13_Rb_tree_nodeISt4pairIKxiEE9_M_valptrEv>
 8004bce:	4605      	mov	r5, r0
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7fe fc74 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	6838      	ldr	r0, [r7, #0]
 8004bda:	f7fe fde9 	bl	80037b0 <_ZSt7forwardISt5tupleIJRKxEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004bde:	4680      	mov	r8, r0
 8004be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be2:	f7fe fc82 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004be6:	4603      	mov	r3, r0
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	4643      	mov	r3, r8
 8004bec:	4632      	mov	r2, r6
 8004bee:	4629      	mov	r1, r5
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f000 f925 	bl	8004e40 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE9constructIS3_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESB_IJEEEEEvRS5_PT_DpOT0_>
	}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c00 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_valueEPKSt18_Rb_tree_node_base>:
      _S_value(_Const_Base_ptr __x)
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f8f3 	bl	8004e24 <_ZNKSt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEE9_M_valptrEv>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKxiEE7_M_addrEv>:
      _M_addr() noexcept
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEE7destroyIS6_EEvRS8_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f8fb 	bl	8004e7c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE7destroyIS7_EEvPT_>
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8f7 	bl	8004e92 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE10deallocateEPS8_j>
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8ec 	bl	8004eac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE7destroyIS4_EEvPT_>
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f8e8 	bl	8004ec2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE10deallocateEPS5_j>
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004d04:	2200      	movs	r2, #0
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f8e7 	bl	8004edc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE8allocateEjPKv>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE9constructIS3_JRKSt21piecewise_construct_tSt5tupleIJOxEESB_IJEEEEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004d18:	b5b0      	push	{r4, r5, r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fe fbc9 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	6838      	ldr	r0, [r7, #0]
 8004d30:	f7fe fbd0 	bl	80034d4 <_ZSt7forwardISt5tupleIJOxEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d34:	4605      	mov	r5, r0
 8004d36:	6a38      	ldr	r0, [r7, #32]
 8004d38:	f7fe fbd7 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	462b      	mov	r3, r5
 8004d42:	4622      	mov	r2, r4
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f8e6 	bl	8004f18 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOxEESB_IJEEEEEvPT_DpOT0_>
 8004d4c:	bf00      	nop
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bdb0      	pop	{r4, r5, r7, pc}

08004d54 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	f107 030c 	add.w	r3, r7, #12
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff f880 	bl	8003e6c <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1EPSt18_Rb_tree_node_base>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <_ZNKSt13_Rb_tree_nodeISt4pairIKxiEE9_M_valptrEv>:
      _M_valptr() const
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3310      	adds	r3, #16
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f8f1 	bl	8004f6a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKxiEE6_M_ptrEv>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKiPN3wyz10CStateBaseEEE7_M_addrEv>:
      _M_addr() noexcept
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004db2:	2200      	movs	r2, #0
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8e3 	bl	8004f82 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE8allocateEjPKv>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004dc6:	b5b0      	push	{r4, r5, r7, lr}
 8004dc8:	b086      	sub	sp, #24
 8004dca:	af02      	add	r7, sp, #8
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7fe fb72 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004dda:	4604      	mov	r4, r0
 8004ddc:	6838      	ldr	r0, [r7, #0]
 8004dde:	f7fe fc3d 	bl	800365c <_ZSt7forwardISt5tupleIJRKiEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004de2:	4605      	mov	r5, r0
 8004de4:	6a38      	ldr	r0, [r7, #32]
 8004de6:	f7fe fb80 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004dea:	4603      	mov	r3, r0
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	462b      	mov	r3, r5
 8004df0:	4622      	mov	r2, r4
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f930 	bl	800505a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvPT_DpOT0_>
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bdb0      	pop	{r4, r5, r7, pc}

08004e02 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	f107 030c 	add.w	r3, r7, #12
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fa0e 	bl	8004236 <_ZNSt17_Rb_tree_iteratorISt4pairIKiPN3wyz10CStateBaseEEEC1EPSt18_Rb_tree_node_base>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <_ZNKSt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEE9_M_valptrEv>:
      _M_valptr() const
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3310      	adds	r3, #16
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 f93b 	bl	80050ac <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiPN3wyz10CStateBaseEEE6_M_ptrEv>
 8004e36:	4603      	mov	r3, r0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKxiEEEE9constructIS3_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESB_IJEEEEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fe fb35 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004e54:	4604      	mov	r4, r0
 8004e56:	6838      	ldr	r0, [r7, #0]
 8004e58:	f7fe fcaa 	bl	80037b0 <_ZSt7forwardISt5tupleIJRKxEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	6a38      	ldr	r0, [r7, #32]
 8004e60:	f7fe fb43 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004e64:	4603      	mov	r3, r0
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	462b      	mov	r3, r5
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f973 	bl	800515a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESB_IJEEEEEvPT_DpOT0_>
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bdb0      	pop	{r4, r5, r7, pc}

08004e7c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE7destroyIS7_EEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE10deallocateEPS8_j>:
      deallocate(pointer __p, size_type)
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004e9e:	68b8      	ldr	r0, [r7, #8]
 8004ea0:	f003 fa74 	bl	800838c <_ZdlPv>
      }
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE7destroyIS4_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE10deallocateEPS5_j>:
      deallocate(pointer __p, size_type)
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004ece:	68b8      	ldr	r0, [r7, #8]
 8004ed0:	f003 fa5c 	bl	800838c <_ZdlPv>
      }
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f95f 	bl	80051ac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE8max_sizeEv>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	bf8c      	ite	hi
 8004ef6:	2301      	movhi	r3, #1
 8004ef8:	2300      	movls	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004f00:	f003 fb1e 	bl	8008540 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015b      	lsls	r3, r3, #5
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f003 fa25 	bl	8008358 <_Znwj>
 8004f0e:	4603      	mov	r3, r0
      }
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOxEESB_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b089      	sub	sp, #36	; 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fe fac9 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004f2c:	6838      	ldr	r0, [r7, #0]
 8004f2e:	f7fe fad1 	bl	80034d4 <_ZSt7forwardISt5tupleIJOxEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004f32:	4602      	mov	r2, r0
 8004f34:	f107 0318 	add.w	r3, r7, #24
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fd ffeb 	bl	8002f16 <_ZNSt5tupleIJOxEEC1EOS1_>
 8004f40:	f107 0418 	add.w	r4, r7, #24
 8004f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f46:	f7fe fad0 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	2010      	movs	r0, #16
 8004f50:	f7fd fdfc 	bl	8002b4c <_ZnwjPv>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d004      	beq.n	8004f62 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOxEESB_IJEEEEEvPT_DpOT0_+0x4a>
 8004f58:	7f3b      	ldrb	r3, [r7, #28]
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	7d39      	ldrb	r1, [r7, #20]
 8004f5e:	f000 f931 	bl	80051c4 <_ZNSt4pairIKxiEC1IJOxEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES5_IJDpT0_EE>
 8004f62:	bf00      	nop
 8004f64:	3724      	adds	r7, #36	; 0x24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd90      	pop	{r4, r7, pc}

08004f6a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKxiEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f93a 	bl	80051ec <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKxiEE7_M_addrEv>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f938 	bl	8005204 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE8max_sizeEv>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	bf8c      	ite	hi
 8004f9c:	2301      	movhi	r3, #1
 8004f9e:	2300      	movls	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004fa6:	f003 facb 	bl	8008540 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4613      	mov	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f003 f9cf 	bl	8008358 <_Znwj>
 8004fba:	4603      	mov	r3, r0
      }
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_ZNSt5tupleIJRKiEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f829 	bl	800502c <_ZNSt11_Tuple_implILj0EJRKiEEC1EOS2_>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_ZNSt11_Tuple_implILj0EJRKiEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f805 	bl	8004ffe <_ZNSt10_Head_baseILj0ERKiLb0EE7_M_headERS2_>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <_ZNSt10_Head_baseILj0ERKiLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <_ZNSt11_Tuple_implILj0EJRKiEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8005036:	687c      	ldr	r4, [r7, #4]
 8005038:	6838      	ldr	r0, [r7, #0]
 800503a:	f7ff ffd3 	bl	8004fe4 <_ZNSt11_Tuple_implILj0EJRKiEE7_M_headERS2_>
 800503e:	4603      	mov	r3, r0
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ffe8 	bl	8005016 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 8005046:	4603      	mov	r3, r0
 8005048:	4619      	mov	r1, r3
 800504a:	4620      	mov	r0, r4
 800504c:	f7fe f802 	bl	8003054 <_ZNSt10_Head_baseILj0ERKiLb0EEC1ES1_>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	bd90      	pop	{r4, r7, pc}

0800505a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800505a:	b590      	push	{r4, r7, lr}
 800505c:	b089      	sub	sp, #36	; 0x24
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fe fa28 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800506e:	6838      	ldr	r0, [r7, #0]
 8005070:	f7fe faf4 	bl	800365c <_ZSt7forwardISt5tupleIJRKiEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005074:	4602      	mov	r2, r0
 8005076:	f107 0318 	add.w	r3, r7, #24
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff ffa1 	bl	8004fc4 <_ZNSt5tupleIJRKiEEC1EOS2_>
 8005082:	f107 0418 	add.w	r4, r7, #24
 8005086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005088:	f7fe fa2f 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4619      	mov	r1, r3
 8005090:	2008      	movs	r0, #8
 8005092:	f7fd fd5b 	bl	8002b4c <_ZnwjPv>
 8005096:	2800      	cmp	r0, #0
 8005098:	d004      	beq.n	80050a4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvPT_DpOT0_+0x4a>
 800509a:	7f3b      	ldrb	r3, [r7, #28]
 800509c:	4622      	mov	r2, r4
 800509e:	7d39      	ldrb	r1, [r7, #20]
 80050a0:	f000 f8be 	bl	8005220 <_ZNSt4pairIKiPN3wyz10CStateBaseEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 80050a4:	bf00      	nop
 80050a6:	3724      	adds	r7, #36	; 0x24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd90      	pop	{r4, r7, pc}

080050ac <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiPN3wyz10CStateBaseEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f8c7 	bl	8005248 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiPN3wyz10CStateBaseEEE7_M_addrEv>
 80050ba:	4603      	mov	r3, r0
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <_ZNSt5tupleIJRKxEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f829 	bl	800512c <_ZNSt11_Tuple_implILj0EJRKxEEC1EOS2_>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <_ZNSt11_Tuple_implILj0EJRKxEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f805 	bl	80050fe <_ZNSt10_Head_baseILj0ERKxLb0EE7_M_headERS2_>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <_ZNSt10_Head_baseILj0ERKxLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <_ZNSt11_Tuple_implILj0EJRKxEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8005136:	687c      	ldr	r4, [r7, #4]
 8005138:	6838      	ldr	r0, [r7, #0]
 800513a:	f7ff ffd3 	bl	80050e4 <_ZNSt11_Tuple_implILj0EJRKxEE7_M_headERS2_>
 800513e:	4603      	mov	r3, r0
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ffe8 	bl	8005116 <_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE>
 8005146:	4603      	mov	r3, r0
 8005148:	4619      	mov	r1, r3
 800514a:	4620      	mov	r0, r4
 800514c:	f7fe f830 	bl	80031b0 <_ZNSt10_Head_baseILj0ERKxLb0EEC1ES1_>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bd90      	pop	{r4, r7, pc}

0800515a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESB_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800515a:	b590      	push	{r4, r7, lr}
 800515c:	b089      	sub	sp, #36	; 0x24
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7fe f9a8 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800516e:	6838      	ldr	r0, [r7, #0]
 8005170:	f7fe fb1e 	bl	80037b0 <_ZSt7forwardISt5tupleIJRKxEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005174:	4602      	mov	r2, r0
 8005176:	f107 0318 	add.w	r3, r7, #24
 800517a:	4611      	mov	r1, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff ffa1 	bl	80050c4 <_ZNSt5tupleIJRKxEEC1EOS2_>
 8005182:	f107 0418 	add.w	r4, r7, #24
 8005186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005188:	f7fe f9af 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4619      	mov	r1, r3
 8005190:	2010      	movs	r0, #16
 8005192:	f7fd fcdb 	bl	8002b4c <_ZnwjPv>
 8005196:	2800      	cmp	r0, #0
 8005198:	d004      	beq.n	80051a4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESB_IJEEEEEvPT_DpOT0_+0x4a>
 800519a:	7f3b      	ldrb	r3, [r7, #28]
 800519c:	4622      	mov	r2, r4
 800519e:	7d39      	ldrb	r1, [r7, #20]
 80051a0:	f000 f85d 	bl	800525e <_ZNSt4pairIKxiEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES5_IJDpT0_EE>
 80051a4:	bf00      	nop
 80051a6:	3724      	adds	r7, #36	; 0x24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd90      	pop	{r4, r7, pc}

080051ac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80051b4:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <_ZNSt4pairIKxiEC1IJOxEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES5_IJDpT0_EE>:

  // See stl_pair.h...
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
 80051c4:	b5b0      	push	{r4, r5, r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	7239      	strb	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80051d2:	463a      	mov	r2, r7
 80051d4:	f88d 4000 	strb.w	r4, [sp]
 80051d8:	462b      	mov	r3, r5
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f86b 	bl	80052b8 <_ZNSt4pairIKxiEC1IJOxEJLj0EEJEJEEERSt5tupleIJDpT_EERS4_IJDpT1_EESt12_Index_tupleIJXspT0_EEESD_IJXspT2_EEE>
      { }
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bdb0      	pop	{r4, r5, r7, pc}

080051ec <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKxiEE7_M_addrEv>:
      _M_addr() const noexcept
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4618      	mov	r0, r3
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEE8max_sizeEv+0x18>)
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	0aaaaaaa 	.word	0x0aaaaaaa

08005220 <_ZNSt4pairIKiPN3wyz10CStateBaseEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8005220:	b5b0      	push	{r4, r5, r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	7239      	strb	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800522e:	463a      	mov	r2, r7
 8005230:	f88d 4000 	strb.w	r4, [sp]
 8005234:	462b      	mov	r3, r5
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f872 	bl	8005322 <_ZNSt4pairIKiPN3wyz10CStateBaseEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bdb0      	pop	{r4, r5, r7, pc}

08005248 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiPN3wyz10CStateBaseEEE7_M_addrEv>:
      _M_addr() const noexcept
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <_ZNSt4pairIKxiEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES5_IJDpT0_EE>:
      pair<_T1, _T2>::
 800525e:	b5b0      	push	{r4, r5, r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af02      	add	r7, sp, #8
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	7239      	strb	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800526c:	463a      	mov	r2, r7
 800526e:	f88d 4000 	strb.w	r4, [sp]
 8005272:	462b      	mov	r3, r5
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f886 	bl	8005388 <_ZNSt4pairIKxiEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS4_IJDpT1_EESt12_Index_tupleIJXspT0_EEESD_IJXspT2_EEE>
      { }
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bdb0      	pop	{r4, r5, r7, pc}

08005286 <_ZSt3getILj0EJOxEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS5_>:
    get(tuple<_Elements...>& __t) noexcept
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f805 	bl	80052a0 <_ZSt12__get_helperILj0EOxJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 8005296:	4603      	mov	r3, r0
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <_ZSt12__get_helperILj0EOxJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fe f8cd 	bl	8003448 <_ZNSt11_Tuple_implILj0EJOxEE7_M_headERS1_>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <_ZNSt4pairIKxiEC1IJOxEJLj0EEJEJEEERSt5tupleIJDpT_EERS4_IJDpT1_EESt12_Index_tupleIJXspT0_EEESD_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
 80052b8:	b590      	push	{r4, r7, lr}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80052c6:	68b8      	ldr	r0, [r7, #8]
 80052c8:	f7ff ffdd 	bl	8005286 <_ZSt3getILj0EJOxEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS5_>
 80052cc:	4603      	mov	r3, r0
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe f8d3 	bl	800347a <_ZSt7forwardIOxEOT_RNSt16remove_referenceIS1_E4typeE>
 80052d4:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80052d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	e9c2 3400 	strd	r3, r4, [r2]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	609a      	str	r2, [r3, #8]
      { }
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd90      	pop	{r4, r7, pc}

080052f0 <_ZSt3getILj0EJRKiEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f805 	bl	800530a <_ZSt12__get_helperILj0ERKiJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8005300:	4603      	mov	r3, r0
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_ZSt12__get_helperILj0ERKiJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fe66 	bl	8004fe4 <_ZNSt11_Tuple_implILj0EJRKiEE7_M_headERS2_>
 8005318:	4603      	mov	r3, r0
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <_ZNSt4pairIKiPN3wyz10CStateBaseEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8005330:	68b8      	ldr	r0, [r7, #8]
 8005332:	f7ff ffdd 	bl	80052f0 <_ZSt3getILj0EJRKiEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8005336:	4603      	mov	r3, r0
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fe6c 	bl	8005016 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800533e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	605a      	str	r2, [r3, #4]
      { }
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <_ZSt3getILj0EJRKxEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 f805 	bl	8005370 <_ZSt12__get_helperILj0ERKxJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8005366:	4603      	mov	r3, r0
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <_ZSt12__get_helperILj0ERKxJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff feb3 	bl	80050e4 <_ZNSt11_Tuple_implILj0EJRKxEE7_M_headERS2_>
 800537e:	4603      	mov	r3, r0
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <_ZNSt4pairIKxiEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS4_IJDpT1_EESt12_Index_tupleIJXspT0_EEESD_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8005388:	b590      	push	{r4, r7, lr}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8005396:	68b8      	ldr	r0, [r7, #8]
 8005398:	f7ff ffdd 	bl	8005356 <_ZSt3getILj0EJRKxEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 800539c:	4603      	mov	r3, r0
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff feb9 	bl	8005116 <_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE>
 80053a4:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80053a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	e9c2 3400 	strd	r3, r4, [r2]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
      { }
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd90      	pop	{r4, r7, pc}

080053c0 <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
      _M_reset();
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f805 	bl	80053de <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <_ZNSt15_Rb_tree_header8_M_resetEv>:
    _M_reset()
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
      _M_header._M_parent = 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	611a      	str	r2, [r3, #16]
    }
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE13_Rb_tree_implISB_Lb1EEC1Ev>:
	  _Rb_tree_impl() = default;
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f88c 	bl	8005530 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEC1Ev>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 f894 	bl	8005548 <_ZNSt20_Rb_tree_key_compareISt4lessIP20__UART_HandleTypeDefEEC1Ev>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff ffcb 	bl	80053c0 <_ZNSt15_Rb_tree_headerC1Ev>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EEC1Ev>:
      _Rb_tree() = default;
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff ffe3 	bl	800540a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE13_Rb_tree_implISB_Lb1EEC1Ev>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEC1Ev>:
      map() = default;
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff ffeb 	bl	8005434 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EEC1Ev>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_ZN3wyz23CRelateOfHandleAndCUartC1Ev>:

#include <CRelateOfHandleAndCUart.h>

namespace wyz {

CRelateOfHandleAndCUart::CRelateOfHandleAndCUart() {
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff ffeb 	bl	800544e <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <_ZN3wyz23CRelateOfHandleAndCUart3AddEPNS_5CUartEP20__UART_HandleTypeDef>:

CRelateOfHandleAndCUart::~CRelateOfHandleAndCUart() {
	// TODO Auto-generated destructor stub
}

void CRelateOfHandleAndCUart::Add(CUart* pUart,UART_HandleTypeDef* pHandle){
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
	if(this->m_HandleMap.count(pHandle) == 0){
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1d3a      	adds	r2, r7, #4
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f862 	bl	800555e <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <_ZN3wyz23CRelateOfHandleAndCUart3AddEPNS_5CUartEP20__UART_HandleTypeDef+0x3a>
		this->m_HandleMap[pHandle] = pUart;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1d3a      	adds	r2, r7, #4
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 f8a5 	bl	8005600 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_>
 80054b6:	4602      	mov	r2, r0
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6013      	str	r3, [r2, #0]
	}
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZN3wyz23CRelateOfHandleAndCUart6ExistsEP20__UART_HandleTypeDef>:

bool CRelateOfHandleAndCUart::Exists(UART_HandleTypeDef* pHandle){
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
	return this->m_HandleMap.count(pHandle);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	463a      	mov	r2, r7
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f842 	bl	800555e <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>:

CUart* CRelateOfHandleAndCUart::Get(UART_HandleTypeDef* pHandle){
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
	if (this->m_HandleMap.count(pHandle)) {
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	463a      	mov	r2, r7
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f82d 	bl	800555e <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	bf14      	ite	ne
 800550a:	2301      	movne	r3, #1
 800550c:	2300      	moveq	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef+0x38>
		return this->m_HandleMap[pHandle];
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	463a      	mov	r2, r7
 8005518:	4611      	mov	r1, r2
 800551a:	4618      	mov	r0, r3
 800551c:	f000 f870 	bl	8005600 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_>
 8005520:	4603      	mov	r3, r0
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	e000      	b.n	8005528 <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef+0x3a>
	}else{
		return NULL;
 8005526:	2300      	movs	r3, #0
	}
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f8bd 	bl	80056b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEC1Ev>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <_ZNSt20_Rb_tree_key_compareISt4lessIP20__UART_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
      { }
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_>:
      count(const key_type& __x) const
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 f8ba 	bl	80056e6 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_>
 8005572:	4603      	mov	r3, r0
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 f8f0 	bl	800575e <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>
 800557e:	4603      	mov	r3, r0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	f107 020c 	add.w	r2, r7, #12
 8005586:	f107 0308 	add.w	r3, r7, #8
 800558a:	4611      	mov	r1, r2
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f8f7 	bl	8005780 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_+0x3e>
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE5countERS8_+0x40>
 800559c:	2301      	movs	r3, #1
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1IvLb1EEES3_>:
        constexpr tuple(const _Elements&... __elements)
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
      : _Inherited(__elements...) { }
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 f805 	bl	80055c4 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1ES3_>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6839      	ldr	r1, [r7, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f805 	bl	80055e2 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_>:
      operator[](const key_type& __k)
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b08b      	sub	sp, #44	; 0x2c
 8005604:	af02      	add	r7, sp, #8
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8cb 	bl	80057a8 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE11lower_boundERS8_>
 8005612:	4603      	mov	r3, r0
 8005614:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8d5 	bl	80057c6 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE3endEv>
 800561c:	4603      	mov	r3, r0
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	f107 020c 	add.w	r2, r7, #12
 8005624:	f107 0308 	add.w	r3, r7, #8
 8005628:	4611      	mov	r1, r2
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f8d8 	bl	80057e0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d112      	bne.n	800565c <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0x5c>
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f8e6 	bl	8005808 <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE8key_compEv>
 800563c:	f107 0308 	add.w	r3, r7, #8
 8005640:	4618      	mov	r0, r3
 8005642:	f000 f8ee 	bl	8005822 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEdeEv>
 8005646:	4603      	mov	r3, r0
 8005648:	461a      	mov	r2, r3
 800564a:	f107 0310 	add.w	r3, r7, #16
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f8f4 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0x60>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0x62>
 8005660:	2300      	movs	r3, #0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01b      	beq.n	800569e <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8005666:	687c      	ldr	r4, [r7, #4]
 8005668:	f107 0208 	add.w	r2, r7, #8
 800566c:	f107 0314 	add.w	r3, r7, #20
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f8f8 	bl	8005868 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1ERKSt17_Rb_tree_iteratorIS7_E>
 8005678:	f107 0318 	add.w	r3, r7, #24
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff ff91 	bl	80055a6 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1IvLb1EEES3_>
 8005684:	f107 0218 	add.w	r2, r7, #24
 8005688:	f107 031c 	add.w	r3, r7, #28
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	4613      	mov	r3, r2
 8005690:	4a08      	ldr	r2, [pc, #32]	; (80056b4 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEEixERS8_+0xb4>)
 8005692:	6979      	ldr	r1, [r7, #20]
 8005694:	4620      	mov	r0, r4
 8005696:	f000 f902 	bl	800589e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_>
 800569a:	4603      	mov	r3, r0
 800569c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f8bd 	bl	8005822 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEdeEv>
 80056a8:	4603      	mov	r3, r0
 80056aa:	3304      	adds	r3, #4
      }
 80056ac:	4618      	mov	r0, r3
 80056ae:	3724      	adds	r7, #36	; 0x24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd90      	pop	{r4, r7, pc}
 80056b4:	08008988 	.word	0x08008988

080056b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80056e6:	b590      	push	{r4, r7, lr}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f93b 	bl	800596c <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>
 80056f6:	4604      	mov	r4, r0
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f943 	bl	8005984 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 80056fe:	4602      	mov	r2, r0
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	4621      	mov	r1, r4
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f949 	bl	800599c <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_>
 800570a:	4603      	mov	r3, r0
 800570c:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f825 	bl	800575e <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>
 8005714:	4603      	mov	r3, r0
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	f107 020c 	add.w	r2, r7, #12
 800571c:	f107 0308 	add.w	r3, r7, #8
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f82c 	bl	8005780 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>
 8005728:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k, 
 800572e:	687c      	ldr	r4, [r7, #4]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f963 	bl	80059fe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005738:	4603      	mov	r3, r0
 800573a:	461a      	mov	r2, r3
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	4620      	mov	r0, r4
 8005740:	f000 f87d 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d004      	beq.n	8005754 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f807 	bl	800575e <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>
 8005750:	4603      	mov	r3, r0
 8005752:	e000      	b.n	8005756 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4findERS3_+0x70>
 8005754:	68bb      	ldr	r3, [r7, #8]
    }
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}

0800575e <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	1d1a      	adds	r2, r3, #4
 800576a:	f107 030c 	add.w	r3, r7, #12
 800576e:	4611      	mov	r1, r2
 8005770:	4618      	mov	r0, r3
 8005772:	f000 f957 	bl	8005a24 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPKSt18_Rb_tree_node_base>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE11lower_boundERS8_>:
      lower_bound(const key_type& __x)
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f943 	bl	8005a42 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11lower_boundERS3_>
 80057bc:	4603      	mov	r3, r0
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_ZNSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f94d 	bl	8005a70 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>:
      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
      { return _M_node == __x._M_node; }
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <_ZNKSt3mapIP20__UART_HandleTypeDefPN3wyz5CUartESt4lessIS1_ESaISt4pairIKS1_S4_EEE8key_compEv>:
      key_comp() const
 8005808:	b590      	push	{r4, r7, lr}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f93d 	bl	8005a92 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8key_compEv>
 8005818:	4623      	mov	r3, r4
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	bd90      	pop	{r4, r7, pc}

08005822 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005822:	b580      	push	{r7, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f000 f939 	bl	8005aa6 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 8005834:	4603      	mov	r3, r0
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	bf34      	ite	cc
 8005856:	2301      	movcc	r3, #1
 8005858:	2300      	movcs	r3, #0
 800585a:	b2db      	uxtb	r3, r3
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1ERKSt17_Rb_tree_iteratorIS7_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800589e:	b5b0      	push	{r4, r5, r7, lr}
 80058a0:	b088      	sub	sp, #32
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
 80058aa:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fd fe06 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80058b2:	4604      	mov	r4, r0
 80058b4:	6838      	ldr	r0, [r7, #0]
 80058b6:	f7ff ffe7 	bl	8005888 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80058ba:	4605      	mov	r5, r0
 80058bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058be:	f7fd fe14 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80058c2:	4603      	mov	r3, r0
 80058c4:	462a      	mov	r2, r5
 80058c6:	4621      	mov	r1, r4
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f8fa 	bl	8005ac2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEEPSt13_Rb_tree_nodeIS7_EDpOT_>
 80058ce:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80058d0:	69f8      	ldr	r0, [r7, #28]
 80058d2:	f000 fa3c 	bl	8005d4e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f107 0010 	add.w	r0, r7, #16
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	f000 f912 	bl	8005b08 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_>
	    if (__res.second)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80058ea:	6939      	ldr	r1, [r7, #16]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fa3f 	bl	8005d74 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E>
 80058f6:	4603      	mov	r3, r0
 80058f8:	e00b      	b.n	8005912 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x74>
	    _M_drop_node(__z);
 80058fa:	69f9      	ldr	r1, [r7, #28]
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f824 	bl	800594a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS7_E>
	    return iterator(__res.first);
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	f107 0318 	add.w	r3, r7, #24
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fa6f 	bl	8005dee <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 8005910:	69bb      	ldr	r3, [r7, #24]
      }
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bdb0      	pop	{r4, r5, r7, pc}

0800591a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS7_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa58 	bl	8005e0c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS7_E>
	_M_put_node(__p);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa69 	bl	8005e36 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS7_E>
      }
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
      }
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800599c:	b590      	push	{r4, r7, lr}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80059b0:	68fc      	ldr	r4, [r7, #12]
 80059b2:	68b8      	ldr	r0, [r7, #8]
 80059b4:	f000 f9cb 	bl	8005d4e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 80059b8:	4603      	mov	r3, r0
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	4619      	mov	r1, r3
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff ff3d 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f083 0301 	eor.w	r3, r3, #1
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_+0x42>
	  __y = __x, __x = _S_left(__x);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	68b8      	ldr	r0, [r7, #8]
 80059d6:	f000 fa40 	bl	8005e5a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80059da:	60b8      	str	r0, [r7, #8]
 80059dc:	e7e5      	b.n	80059aa <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80059de:	68b8      	ldr	r0, [r7, #8]
 80059e0:	f000 fa47 	bl	8005e72 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80059e4:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80059e6:	e7e0      	b.n	80059aa <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS7_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 80059e8:	f107 0314 	add.w	r3, r7, #20
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 f818 	bl	8005a24 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPKSt18_Rb_tree_node_base>
 80059f4:	697b      	ldr	r3, [r7, #20]
    }
 80059f6:	4618      	mov	r0, r3
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd90      	pop	{r4, r7, pc}

080059fe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa3f 	bl	8005e8a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_valueEPKSt18_Rb_tree_node_base>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	f107 030c 	add.w	r3, r7, #12
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fa44 	bl	8005ea2 <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEclERKS7_>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8005a42:	b590      	push	{r4, r7, lr}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fe3e 	bl	80056ce <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>
 8005a52:	4604      	mov	r4, r0
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fa30 	bl	8005eba <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	4621      	mov	r1, r4
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fa36 	bl	8005ed2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_>
 8005a66:	4603      	mov	r3, r0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd90      	pop	{r4, r7, pc}

08005a70 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	1d1a      	adds	r2, r3, #4
 8005a7c:	f107 030c 	add.w	r3, r7, #12
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f9b3 	bl	8005dee <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8key_compEv>:
      key_comp() const
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>:
      _M_valptr()
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3310      	adds	r3, #16
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fa3e 	bl	8005f34 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE6_M_ptrEv>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEEPSt13_Rb_tree_nodeIS7_EDpOT_>:
        _M_create_node(_Args&&... __args)
 8005ac2:	b5b0      	push	{r4, r5, r7, lr}
 8005ac4:	b088      	sub	sp, #32
 8005ac6:	af02      	add	r7, sp, #8
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
 8005ace:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fa3b 	bl	8005f4c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_get_nodeEv>
 8005ad6:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005ad8:	68b8      	ldr	r0, [r7, #8]
 8005ada:	f7fd fcf0 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8005ade:	4604      	mov	r4, r0
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff fed1 	bl	8005888 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	6838      	ldr	r0, [r7, #0]
 8005aea:	f7fd fcfe 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005aee:	4603      	mov	r3, r0
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	462b      	mov	r3, r5
 8005af4:	4622      	mov	r2, r4
 8005af6:	6979      	ldr	r1, [r7, #20]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fa38 	bl	8005f6e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEEvPSt13_Rb_tree_nodeIS7_EDpOT_>
	  return __tmp;
 8005afe:	697b      	ldr	r3, [r7, #20]
	}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bdb0      	pop	{r4, r5, r7, pc}

08005b08 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b08d      	sub	sp, #52	; 0x34
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fa55 	bl	8005fc8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE13_M_const_castEv>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8005b22:	69bc      	ldr	r4, [r7, #24]
 8005b24:	68b8      	ldr	r0, [r7, #8]
 8005b26:	f000 f9c8 	bl	8005eba <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d030      	beq.n	8005b9c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x94>
	  if (size() > 0
 8005b3a:	68b8      	ldr	r0, [r7, #8]
 8005b3c:	f000 fa55 	bl	8005fea <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4sizeEv>
 8005b40:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d013      	beq.n	8005b6e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x66>
 8005b46:	68bc      	ldr	r4, [r7, #8]
 8005b48:	68b8      	ldr	r0, [r7, #8]
 8005b4a:	f000 fa5a 	bl	8006002 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff ff53 	bl	80059fe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff fe6d 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x66>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x68>
 8005b6e:	2300      	movs	r3, #0
	  if (size() > 0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00c      	beq.n	8005b8e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	68b8      	ldr	r0, [r7, #8]
 8005b7a:	f000 fa42 	bl	8006002 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	f107 031c 	add.w	r3, r7, #28
 8005b84:	4619      	mov	r1, r3
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7fd ffad 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8005b8c:	e0db      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fa64 	bl	8006062 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_>
 8005b9a:	e0d4      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8005b9c:	68bc      	ldr	r4, [r7, #8]
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff ff2c 	bl	80059fe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	4620      	mov	r0, r4
 8005bae:	f7ff fe46 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d057      	beq.n	8005c68 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x160>
	  iterator __before = __pos;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8005bbc:	69bc      	ldr	r4, [r7, #24]
 8005bbe:	68b8      	ldr	r0, [r7, #8]
 8005bc0:	f000 fad4 	bl	800616c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_leftmostEv>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	429c      	cmp	r4, r3
 8005bca:	bf0c      	ite	eq
 8005bcc:	2301      	moveq	r3, #1
 8005bce:	2300      	movne	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8005bd6:	68b8      	ldr	r0, [r7, #8]
 8005bd8:	f000 fac8 	bl	800616c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_leftmostEv>
 8005bdc:	4604      	mov	r4, r0
 8005bde:	68b8      	ldr	r0, [r7, #8]
 8005be0:	f000 fac4 	bl	800616c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_leftmostEv>
 8005be4:	4603      	mov	r3, r0
 8005be6:	461a      	mov	r2, r3
 8005be8:	4621      	mov	r1, r4
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7fd ff9c 	bl	8003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8005bf0:	e0a9      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8005bf2:	68bc      	ldr	r4, [r7, #8]
 8005bf4:	f107 0314 	add.w	r3, r7, #20
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fac3 	bl	8006184 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEmmEv>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fefb 	bl	80059fe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f7ff fe15 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01f      	beq.n	8005c5a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fe7c 	bl	800591a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf0c      	ite	eq
 8005c28:	2301      	moveq	r3, #1
 8005c2a:	2300      	movne	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8005c32:	2300      	movs	r3, #0
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	f107 0214 	add.w	r2, r7, #20
 8005c3a:	f107 0320 	add.w	r3, r7, #32
 8005c3e:	4619      	mov	r1, r3
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7fd ff50 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8005c46:	e07e      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8005c48:	f107 0218 	add.w	r2, r7, #24
 8005c4c:	f107 0318 	add.w	r3, r7, #24
 8005c50:	4619      	mov	r1, r3
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7fd ff68 	bl	8003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8005c58:	e075      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f9fe 	bl	8006062 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_>
 8005c66:	e06e      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8005c68:	68bc      	ldr	r4, [r7, #8]
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fec6 	bl	80059fe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005c72:	4603      	mov	r3, r0
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	4619      	mov	r1, r3
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f7ff fde0 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d056      	beq.n	8005d32 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x22a>
	  iterator __after = __pos;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8005c88:	69bc      	ldr	r4, [r7, #24]
 8005c8a:	68b8      	ldr	r0, [r7, #8]
 8005c8c:	f000 f9b9 	bl	8006002 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>
 8005c90:	4603      	mov	r3, r0
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	429c      	cmp	r4, r3
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00c      	beq.n	8005cbc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	68b8      	ldr	r0, [r7, #8]
 8005ca8:	f000 f9ab 	bl	8006002 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>
 8005cac:	4602      	mov	r2, r0
 8005cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7fd ff16 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8005cba:	e044      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8005cbc:	68bc      	ldr	r4, [r7, #8]
 8005cbe:	f107 0310 	add.w	r3, r7, #16
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fa6f 	bl	80061a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEppEv>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff fe96 	bl	80059fe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f7ff fdb0 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01f      	beq.n	8005d24 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fe17 	bl	800591a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	bf0c      	ite	eq
 8005cf2:	2301      	moveq	r3, #1
 8005cf4:	2300      	movne	r3, #0
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d00:	f107 0218 	add.w	r2, r7, #24
 8005d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d08:	4619      	mov	r1, r3
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7fd feeb 	bl	8003ae6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
 8005d10:	e019      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8005d12:	f107 0210 	add.w	r2, r7, #16
 8005d16:	f107 0310 	add.w	r3, r7, #16
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7fd ff03 	bl	8003b28 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8005d22:	e010      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f999 	bl	8006062 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_>
 8005d30:	e009      	b.n	8005d46 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8005d32:	2300      	movs	r3, #0
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d36:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005d3a:	f107 0318 	add.w	r3, r7, #24
 8005d3e:	4619      	mov	r1, r3
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7fd ff0a 	bl	8003b5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	3734      	adds	r7, #52	; 0x34
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd90      	pop	{r4, r7, pc}

08005d4e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>:
      _S_key(_Const_Link_type __x)
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
      { return _KeyOfValue()(_S_value(__x)); }
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa36 	bl	80061c8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_valueEPKSt13_Rb_tree_nodeIS7_E>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	f107 030c 	add.w	r3, r7, #12
 8005d62:	4611      	mov	r1, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f89c 	bl	8005ea2 <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEclERKS7_>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005d74:	b5b0      	push	{r4, r5, r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d117      	bne.n	8005db8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f896 	bl	8005eba <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d010      	beq.n	8005db8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8005d96:	68fc      	ldr	r4, [r7, #12]
 8005d98:	6838      	ldr	r0, [r7, #0]
 8005d9a:	f7ff ffd8 	bl	8005d4e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 8005d9e:	4605      	mov	r5, r0
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff fe2c 	bl	80059fe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005da6:	4603      	mov	r3, r0
 8005da8:	461a      	mov	r2, r3
 8005daa:	4629      	mov	r1, r5
 8005dac:	4620      	mov	r0, r4
 8005dae:	f7ff fd46 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x48>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x4a>
 8005dbc:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8005dbe:	75fb      	strb	r3, [r7, #23]
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	7df8      	ldrb	r0, [r7, #23]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	f002 fb57 	bl	800847c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f805 	bl	8005dee <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 8005de4:	693b      	ldr	r3, [r7, #16]
    }
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bdb0      	pop	{r4, r5, r7, pc}

08005dee <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS7_E>:
      _M_destroy_node(_Link_type __p) noexcept
 8005e0c:	b590      	push	{r4, r7, lr}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f9e2 	bl	80061e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	6838      	ldr	r0, [r7, #0]
 8005e20:	f7ff fe41 	bl	8005aa6 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 8005e24:	4603      	mov	r3, r0
 8005e26:	4619      	mov	r1, r3
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 f9e4 	bl	80061f6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE7destroyIS8_EEvRSA_PT_>
      }
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd90      	pop	{r4, r7, pc}

08005e36 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS7_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9cd 	bl	80061e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2201      	movs	r2, #1
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f9df 	bl	8006210 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE10deallocateERSA_PS9_j>
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_valueEPKSt18_Rb_tree_node_base>:
      _S_value(_Const_Base_ptr __x)
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9cb 	bl	800622e <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <_ZNKSt10_Select1stISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEclERKS7_>:
      operator()(const _Pair& __x) const
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005ed2:	b590      	push	{r4, r7, lr}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01b      	beq.n	8005f1e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8005ee6:	68fc      	ldr	r4, [r7, #12]
 8005ee8:	68b8      	ldr	r0, [r7, #8]
 8005eea:	f7ff ff30 	bl	8005d4e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f7ff fca2 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f083 0301 	eor.w	r3, r3, #1
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d006      	beq.n	8005f14 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_+0x42>
	  __y = __x, __x = _S_left(__x);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	68b8      	ldr	r0, [r7, #8]
 8005f0c:	f7ff fd11 	bl	8005932 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005f10:	60b8      	str	r0, [r7, #8]
 8005f12:	e7e5      	b.n	8005ee0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8005f14:	68b8      	ldr	r0, [r7, #8]
 8005f16:	f7ff fd00 	bl	800591a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005f1a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8005f1c:	e7e0      	b.n	8005ee0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8005f1e:	f107 0314 	add.w	r3, r7, #20
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff ff62 	bl	8005dee <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 8005f2a:	697b      	ldr	r3, [r7, #20]
    }
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd90      	pop	{r4, r7, pc}

08005f34 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f984 	bl	800624a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE7_M_addrEv>
 8005f42:	4603      	mov	r3, r0
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_get_nodeEv>:
      _M_get_node()
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f943 	bl	80061e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f97e 	bl	8006260 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE8allocateERSA_j>
 8005f64:	4603      	mov	r3, r0
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEEvPSt13_Rb_tree_nodeIS7_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8005f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4619      	mov	r1, r3
 8005f82:	2018      	movs	r0, #24
 8005f84:	f7fc fde2 	bl	8002b4c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f929 	bl	80061e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>
 8005f8e:	4604      	mov	r4, r0
 8005f90:	68b8      	ldr	r0, [r7, #8]
 8005f92:	f7ff fd88 	bl	8005aa6 <_ZNSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 8005f96:	4605      	mov	r5, r0
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fd fa90 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	6838      	ldr	r0, [r7, #0]
 8005fa2:	f7ff fc71 	bl	8005888 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005fa6:	4680      	mov	r8, r0
 8005fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005faa:	f7fd fa9e 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	4643      	mov	r3, r8
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 f960 	bl	800627e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESG_IJEEEEEvRSA_PT_DpOT0_>
	}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fc8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	f107 030c 	add.w	r3, r7, #12
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff ff07 	bl	8005dee <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <_ZNKSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT 
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3310      	adds	r3, #16
 800600e:	4618      	mov	r0, r3
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefPN3wyz5CUartEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8006026:	68b8      	ldr	r0, [r7, #8]
 8006028:	f000 f810 	bl	800604c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEOT_RNSt16remove_referenceISC_E4typeE>
 800602c:	4603      	mov	r3, r0
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fd fd6c 	bl	8003b12 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800603a:	4603      	mov	r3, r0
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006062:	b590      	push	{r4, r7, lr}
 8006064:	b08b      	sub	sp, #44	; 0x2c
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800606e:	68b8      	ldr	r0, [r7, #8]
 8006070:	f7ff fb2d 	bl	80056ce <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_beginEv>
 8006074:	4603      	mov	r3, r0
 8006076:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8006078:	68b8      	ldr	r0, [r7, #8]
 800607a:	f7ff ff1e 	bl	8005eba <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_M_endEv>
 800607e:	4603      	mov	r3, r0
 8006080:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d020      	beq.n	80060d0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8006092:	68bc      	ldr	r4, [r7, #8]
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fe59 	bl	8005d4e <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7ff fbcb 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80060ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x60>
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fc3a 	bl	8005932 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>
 80060be:	4603      	mov	r3, r0
 80060c0:	e004      	b.n	80060cc <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x6a>
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fc28 	bl	800591a <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 80060ca:	4603      	mov	r3, r0
 80060cc:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80060ce:	e7db      	b.n	8006088 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	f107 0310 	add.w	r3, r7, #16
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fe88 	bl	8005dee <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80060de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01d      	beq.n	8006122 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 80060e6:	68b8      	ldr	r0, [r7, #8]
 80060e8:	f000 f8e7 	bl	80062ba <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE5beginEv>
 80060ec:	4603      	mov	r3, r0
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	f107 021c 	add.w	r2, r7, #28
 80060f4:	f107 0310 	add.w	r3, r7, #16
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fb70 	bl	80057e0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEeqERKS8_>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8006106:	f107 0214 	add.w	r2, r7, #20
 800610a:	f107 0318 	add.w	r3, r7, #24
 800610e:	4619      	mov	r1, r3
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff ff82 	bl	800601a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefPN3wyz5CUartEEERS1_Lb1EEEOT_OT0_>
 8006116:	e025      	b.n	8006164 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	4618      	mov	r0, r3
 800611e:	f000 f831 	bl	8006184 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8006122:	68bc      	ldr	r4, [r7, #8]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fc69 	bl	80059fe <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800612c:	4603      	mov	r3, r0
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4619      	mov	r1, r3
 8006132:	4620      	mov	r0, r4
 8006134:	f7ff fb83 	bl	800583e <_ZNKSt4lessIP20__UART_HandleTypeDefEclERKS1_S4_>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 800613e:	f107 0214 	add.w	r2, r7, #20
 8006142:	f107 0318 	add.w	r3, r7, #24
 8006146:	4619      	mov	r1, r3
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff ff66 	bl	800601a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP20__UART_HandleTypeDefPN3wyz5CUartEEERS1_Lb1EEEOT_OT0_>
 800614e:	e009      	b.n	8006164 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8006150:	2300      	movs	r3, #0
 8006152:	623b      	str	r3, [r7, #32]
 8006154:	f107 0220 	add.w	r2, r7, #32
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	4619      	mov	r1, r3
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7fd fcfb 	bl	8003b5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	372c      	adds	r7, #44	; 0x2c
 8006168:	46bd      	mov	sp, r7
 800616a:	bd90      	pop	{r4, r7, pc}

0800616c <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	330c      	adds	r3, #12
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f002 f971 	bl	8008478 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8006196:	4602      	mov	r2, r0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	return *this;
 800619c:	687b      	ldr	r3, [r7, #4]
      }
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f002 f94c 	bl	8008450 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80061b8:	4602      	mov	r2, r0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
	return *this;
 80061be:	687b      	ldr	r3, [r7, #4]
      }
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_S_valueEPKSt13_Rb_tree_nodeIS7_E>:
      _S_value(_Const_Link_type __x)
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
      { return *__x->_M_valptr(); }
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f82c 	bl	800622e <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>
 80061d6:	4603      	mov	r3, r0
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE7destroyIS8_EEvRSA_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f86a 	bl	80062dc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE7destroyIS9_EEvPT_>
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE10deallocateERSA_PS9_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f866 	bl	80062f2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE10deallocateEPSA_j>
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <_ZNKSt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE9_M_valptrEv>:
      _M_valptr() const
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3310      	adds	r3, #16
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f866 	bl	800630c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE6_M_ptrEv>
 8006240:	4603      	mov	r3, r0
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE7_M_addrEv>:
      _M_addr() noexcept
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE8allocateERSA_j>:
      allocate(allocator_type& __a, size_type __n)
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800626a:	2200      	movs	r2, #0
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f858 	bl	8006324 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8allocateEjPKv>
 8006274:	4603      	mov	r3, r0
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESG_IJEEEEEvRSA_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800627e:	b5b0      	push	{r4, r5, r7, lr}
 8006280:	b086      	sub	sp, #24
 8006282:	af02      	add	r7, sp, #8
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fd f916 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006292:	4604      	mov	r4, r0
 8006294:	6838      	ldr	r0, [r7, #0]
 8006296:	f7ff faf7 	bl	8005888 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800629a:	4605      	mov	r5, r0
 800629c:	6a38      	ldr	r0, [r7, #32]
 800629e:	f7fd f924 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80062a2:	4603      	mov	r3, r0
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	462b      	mov	r3, r5
 80062a8:	4622      	mov	r2, r4
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f8a5 	bl	80063fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESG_IJEEEEEvPT_DpOT0_>
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bdb0      	pop	{r4, r5, r7, pc}

080062ba <_ZNSt8_Rb_treeIP20__UART_HandleTypeDefSt4pairIKS1_PN3wyz5CUartEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	f107 030c 	add.w	r3, r7, #12
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff fd8e 	bl	8005dee <_ZNSt17_Rb_tree_iteratorISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEC1EPSt18_Rb_tree_node_base>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE7destroyIS9_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE10deallocateEPSA_j>:
      deallocate(pointer __p, size_type)
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80062fe:	68b8      	ldr	r0, [r7, #8]
 8006300:	f002 f844 	bl	800838c <_ZdlPv>
      }
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f89a 	bl	800644e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE7_M_addrEv>
 800631a:	4603      	mov	r3, r0
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f897 	bl	8006464 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8max_sizeEv>
 8006336:	4602      	mov	r2, r0
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4293      	cmp	r3, r2
 800633c:	bf8c      	ite	hi
 800633e:	2301      	movhi	r3, #1
 8006340:	2300      	movls	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006348:	f002 f8fa 	bl	8008540 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4413      	add	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fffe 	bl	8008358 <_Znwj>
 800635c:	4603      	mov	r3, r0
      }
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	4611      	mov	r1, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f000 f829 	bl	80063ce <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1EOS4_>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4618      	mov	r0, r3
 8006392:	f000 f805 	bl	80063a0 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EE7_M_headERS4_>
 8006396:	4603      	mov	r3, r0
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80063ce:	b590      	push	{r4, r7, lr}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80063d8:	687c      	ldr	r4, [r7, #4]
 80063da:	6838      	ldr	r0, [r7, #0]
 80063dc:	f7ff ffd3 	bl	8006386 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>
 80063e0:	4603      	mov	r3, r0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff ffe8 	bl	80063b8 <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 80063e8:	4603      	mov	r3, r0
 80063ea:	4619      	mov	r1, r3
 80063ec:	4620      	mov	r0, r4
 80063ee:	f7ff f8f8 	bl	80055e2 <_ZNSt10_Head_baseILj0ERKP20__UART_HandleTypeDefLb0EEC1ES3_>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd90      	pop	{r4, r7, pc}

080063fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESG_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80063fc:	b590      	push	{r4, r7, lr}
 80063fe:	b089      	sub	sp, #36	; 0x24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fd f857 	bl	80034be <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006410:	6838      	ldr	r0, [r7, #0]
 8006412:	f7ff fa39 	bl	8005888 <_ZSt7forwardISt5tupleIJRKP20__UART_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006416:	4602      	mov	r2, r0
 8006418:	f107 0318 	add.w	r3, r7, #24
 800641c:	4611      	mov	r1, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff ffa1 	bl	8006366 <_ZNSt5tupleIJRKP20__UART_HandleTypeDefEEC1EOS4_>
 8006424:	f107 0418 	add.w	r4, r7, #24
 8006428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800642a:	f7fd f85e 	bl	80034ea <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4619      	mov	r1, r3
 8006432:	2008      	movs	r0, #8
 8006434:	f7fc fb8a 	bl	8002b4c <_ZnwjPv>
 8006438:	2800      	cmp	r0, #0
 800643a:	d004      	beq.n	8006446 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESG_IJEEEEEvPT_DpOT0_+0x4a>
 800643c:	7f3b      	ldrb	r3, [r7, #28]
 800643e:	4622      	mov	r2, r4
 8006440:	7d39      	ldrb	r1, [r7, #20]
 8006442:	f000 f81d 	bl	8006480 <_ZNSt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>
 8006446:	bf00      	nop
 8006448:	3724      	adds	r7, #36	; 0x24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd90      	pop	{r4, r7, pc}

0800644e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEE7_M_addrEv>:
      _M_addr() const noexcept
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEEE8max_sizeEv+0x18>)
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	0aaaaaaa 	.word	0x0aaaaaaa

08006480 <_ZNSt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>:
      pair<_T1, _T2>::
 8006480:	b5b0      	push	{r4, r5, r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	7239      	strb	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800648e:	463a      	mov	r2, r7
 8006490:	f88d 4000 	strb.w	r4, [sp]
 8006494:	462b      	mov	r3, r5
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f81e 	bl	80064da <_ZNSt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>
      { }
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bdb0      	pop	{r4, r5, r7, pc}

080064a8 <_ZSt3getILj0EJRKP20__UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 f805 	bl	80064c2 <_ZSt12__get_helperILj0ERKP20__UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80064b8:	4603      	mov	r3, r0
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <_ZSt12__get_helperILj0ERKP20__UART_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff ff5b 	bl	8006386 <_ZNSt11_Tuple_implILj0EJRKP20__UART_HandleTypeDefEE7_M_headERS4_>
 80064d0:	4603      	mov	r3, r0
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <_ZNSt4pairIKP20__UART_HandleTypeDefPN3wyz5CUartEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80064e8:	68b8      	ldr	r0, [r7, #8]
 80064ea:	f7ff ffdd 	bl	80064a8 <_ZSt3getILj0EJRKP20__UART_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80064ee:	4603      	mov	r3, r0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff ff61 	bl	80063b8 <_ZSt7forwardIRKP20__UART_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 80064f6:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	605a      	str	r2, [r3, #4]
      { }
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <_Z41__static_initialization_and_destruction_0ii>:

CRelateOfHandleAndCUart* CRelateOfHandleAndCUart::m_pInstance = new CRelateOfHandleAndCUart();

} /* namespace wyz */
 8006510:	b590      	push	{r4, r7, lr}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10e      	bne.n	800653e <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006526:	4293      	cmp	r3, r2
 8006528:	d109      	bne.n	800653e <_Z41__static_initialization_and_destruction_0ii+0x2e>
CRelateOfHandleAndCUart* CRelateOfHandleAndCUart::m_pInstance = new CRelateOfHandleAndCUart();
 800652a:	2018      	movs	r0, #24
 800652c:	f001 ff14 	bl	8008358 <_Znwj>
 8006530:	4603      	mov	r3, r0
 8006532:	461c      	mov	r4, r3
 8006534:	4620      	mov	r0, r4
 8006536:	f7fe ff97 	bl	8005468 <_ZN3wyz23CRelateOfHandleAndCUartC1Ev>
 800653a:	4b03      	ldr	r3, [pc, #12]	; (8006548 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800653c:	601c      	str	r4, [r3, #0]
} /* namespace wyz */
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}
 8006546:	bf00      	nop
 8006548:	20000090 	.word	0x20000090

0800654c <_GLOBAL__sub_I__ZN3wyz23CRelateOfHandleAndCUartC2Ev>:
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
 8006550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006554:	2001      	movs	r0, #1
 8006556:	f7ff ffdb 	bl	8006510 <_Z41__static_initialization_and_destruction_0ii>
 800655a:	bd80      	pop	{r7, pc}

0800655c <_ZN3wyz5CUart6ActionEPNS_8CCommandE>:
	/*************继承自CSubject*********************/
	void Attach(CObserver* pObserver);
	void Detach(CObserver* pObserver);
	void Notify();
	/******************继承自CReceiver******************************/
	void Action(CCommand* pCommand){
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
		;
	}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <_ZThn8_N3wyz5CUart6ActionEPNS_8CCommandE>:
	void Action(CCommand* pCommand){
 8006572:	f1a0 0008 	sub.w	r0, r0, #8
 8006576:	e7f1      	b.n	800655c <_ZN3wyz5CUart6ActionEPNS_8CCommandE>

08006578 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>:
#include <map>
namespace wyz {

class CRelateOfHandleAndCUart {
public:
	static  CRelateOfHandleAndCUart* GetInstance(){
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
		return m_pInstance;
 800657c:	4b03      	ldr	r3, [pc, #12]	; (800658c <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv+0x14>)
 800657e:	681b      	ldr	r3, [r3, #0]
	}
 8006580:	4618      	mov	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000090 	.word	0x20000090

08006590 <HAL_UART_RxCpltCallback>:
#include "CCommandOfA1.h"
#include "CCommand.h"
#include <string.h>


void HAL_UART_RxCpltCallback(UART_HandleTypeDef  *huart){
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	if(wyz::CRelateOfHandleAndCUart::GetInstance()->Exists(huart)){
 8006598:	f7ff ffee 	bl	8006578 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 800659c:	4603      	mov	r3, r0
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe ff8f 	bl	80054c4 <_ZN3wyz23CRelateOfHandleAndCUart6ExistsEP20__UART_HandleTypeDef>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01e      	beq.n	80065ea <HAL_UART_RxCpltCallback+0x5a>
		if(wyz::CRelateOfHandleAndCUart::GetInstance()->Get(huart)->GetUartMode() == wyz::CUart::m_ObserverMode){
 80065ac:	f7ff ffe4 	bl	8006578 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 80065b0:	4603      	mov	r3, r0
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe ff9a 	bl	80054ee <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f9ee 	bl	800699e <_ZN3wyz5CUart11GetUartModeEv>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	bf0c      	ite	eq
 80065c8:	2301      	moveq	r3, #1
 80065ca:	2300      	movne	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_UART_RxCpltCallback+0x5a>
			wyz::CRelateOfHandleAndCUart::GetInstance()->Get(huart)->HardInterrupt(wyz::CUart::m_UART_RxCplt);
 80065d2:	f7ff ffd1 	bl	8006578 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 80065d6:	4603      	mov	r3, r0
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe ff87 	bl	80054ee <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2101      	movs	r1, #1
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f9c6 	bl	8006976 <_ZN3wyz5CUart13HardInterruptEh>
		}
	}
}
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
	if(wyz::CRelateOfHandleAndCUart::GetInstance()->Exists(huart)){
 80065fa:	f7ff ffbd 	bl	8006578 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 80065fe:	4603      	mov	r3, r0
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe ff5e 	bl	80054c4 <_ZN3wyz23CRelateOfHandleAndCUart6ExistsEP20__UART_HandleTypeDef>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01e      	beq.n	800664c <HAL_UART_RxHalfCpltCallback+0x5a>
		if(wyz::CRelateOfHandleAndCUart::GetInstance()->Get(huart)->GetUartMode() == wyz::CUart::m_ObserverMode){
 800660e:	f7ff ffb3 	bl	8006578 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8006612:	4603      	mov	r3, r0
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe ff69 	bl	80054ee <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>
 800661c:	4603      	mov	r3, r0
 800661e:	4618      	mov	r0, r3
 8006620:	f000 f9bd 	bl	800699e <_ZN3wyz5CUart11GetUartModeEv>
 8006624:	4603      	mov	r3, r0
 8006626:	2b03      	cmp	r3, #3
 8006628:	bf0c      	ite	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	2300      	movne	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <HAL_UART_RxHalfCpltCallback+0x5a>
					wyz::CRelateOfHandleAndCUart::GetInstance()->Get(huart)->HardInterrupt(wyz::CUart::m_UART_RxHalfCplt);
 8006634:	f7ff ffa0 	bl	8006578 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8006638:	4603      	mov	r3, r0
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe ff56 	bl	80054ee <_ZN3wyz23CRelateOfHandleAndCUart3GetEP20__UART_HandleTypeDef>
 8006642:	4603      	mov	r3, r0
 8006644:	2100      	movs	r1, #0
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f995 	bl	8006976 <_ZN3wyz5CUart13HardInterruptEh>
				}
		}
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <_ZN3wyz7CDeviceC1Ev>:
#include  "CObserver.h"
#include "main.h"
namespace wyz {
using namespace std;

class CDevice {  //驱动程序基类
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	4a04      	ldr	r2, [pc, #16]	; (8006670 <_ZN3wyz7CDeviceC1Ev+0x1c>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	080089ec 	.word	0x080089ec

08006674 <_ZN3wyz8CSubjectC1Ev>:
#define CLASS_CSUBJECT_H_

namespace wyz {
class CObserver;

class CSubject {
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	4a04      	ldr	r2, [pc, #16]	; (8006690 <_ZN3wyz8CSubjectC1Ev+0x1c>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	08008a14 	.word	0x08008a14

08006694 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh>:

namespace wyz {

CUart::CUart(UART_HandleTypeDef *huart,uint32_t SizeOfRxBuf,uint32_t SizeOfTxBuf,uint8_t Mode ) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ffd5 	bl	8006654 <_ZN3wyz7CDeviceC1Ev>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff ffe0 	bl	8006674 <_ZN3wyz8CSubjectC1Ev>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3308      	adds	r3, #8
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fc fa79 	bl	8002bb0 <_ZN3wyz9CReceiverC1Ev>
 80066be:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh+0xa4>)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	4a1d      	ldr	r2, [pc, #116]	; (800673c <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh+0xa8>)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh+0xac>)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	609a      	str	r2, [r3, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3324      	adds	r3, #36	; 0x24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f96f 	bl	80069b8 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EEC1Ev>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	// TODO Auto-generated constructor stubthis
	this->m_Huart=huart;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	60da      	str	r2, [r3, #12]
	this->m_SizeOfRxBuf=SizeOfRxBuf;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	611a      	str	r2, [r3, #16]
	this->m_SizeOfTxBuf=SizeOfTxBuf;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	615a      	str	r2, [r3, #20]
	this->m_pRxBuf= new uint8_t[SizeOfRxBuf*2]; //读缓存,*2好用双缓存模式
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 fe29 	bl	8008350 <_Znaj>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	619a      	str	r2, [r3, #24]
	this->m_pTxBuf =new uint8_t[SizeOfTxBuf];
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fe21 	bl	8008350 <_Znaj>
 800670e:	4603      	mov	r3, r0
 8006710:	461a      	mov	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	61da      	str	r2, [r3, #28]
	m_UartMode=Mode;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	7e3a      	ldrb	r2, [r7, #24]
 800671a:	f883 2020 	strb.w	r2, [r3, #32]
	CRelateOfHandleAndCUart::GetInstance()->Add(this, huart);
 800671e:	f7ff ff2b 	bl	8006578 <_ZN3wyz23CRelateOfHandleAndCUart11GetInstanceEv>
 8006722:	4603      	mov	r3, r0
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe feaa 	bl	8005482 <_ZN3wyz23CRelateOfHandleAndCUart3AddEPNS_5CUartEP20__UART_HandleTypeDef>
}
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	08008994 	.word	0x08008994
 800673c:	080089cc 	.word	0x080089cc
 8006740:	080089e0 	.word	0x080089e0

08006744 <_ZN3wyz5CUart4OpenEv>:
};


/*******************************************/
uint8_t CUart::Open()
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	return 0;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <_ZN3wyz5CUart5CloseEv>:
uint8_t CUart::Close()
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
	return 0;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <_ZN3wyz5CUart14ClearWriteFIFOEv>:
void CUart::ClearWriteFIFO(){
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	memset(this->m_pTxBuf,0,this->m_SizeOfTxBuf*sizeof(uint8_t));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69d8      	ldr	r0, [r3, #28]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	461a      	mov	r2, r3
 8006782:	2100      	movs	r1, #0
 8006784:	f001 ffdb 	bl	800873e <memset>
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <_ZN3wyz5CUart13ClearReadFIFOEv>:

void CUart::ClearReadFIFO(){
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]

}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <_ZN3wyz5CUart9BlockReadEPhmm>:
	{
		return this->m_pRxBuf;
	}
}
void CUart::BlockRead(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
	HAL_UART_Receive(this->m_Huart,pDataBuf,Size,TimeOut);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68d8      	ldr	r0, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	f7fb fa31 	bl	8001c24 <HAL_UART_Receive>
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <_ZN3wyz5CUart10BlockwriteEPhmm>:

void CUart::Blockwrite(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(this->m_Huart,pDataBuf,Size,TimeOut);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68d8      	ldr	r0, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	f7fb f985 	bl	8001af2 <HAL_UART_Transmit>
}
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <_ZN3wyz5CUart12NonBlockReadEPhmm>:

void CUart::NonBlockRead(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
    if(m_UartMode == m_UsingDMAMode)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d108      	bne.n	800681a <_ZN3wyz5CUart12NonBlockReadEPhmm+0x2a>
    {
    	HAL_UART_Receive_DMA(this->m_Huart,pDataBuf,Size);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	b292      	uxth	r2, r2
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	4618      	mov	r0, r3
 8006814:	f7fb fbb2 	bl	8001f7c <HAL_UART_Receive_DMA>
    	HAL_UART_Receive_IT(this->m_Huart,pDataBuf,Size);
    }else if(m_UartMode == m_UsingBlockMode)
    {
    	//配置错误
    }
}
 8006818:	e00c      	b.n	8006834 <_ZN3wyz5CUart12NonBlockReadEPhmm+0x44>
    else if(m_UartMode == m_UsingITMode)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d107      	bne.n	8006834 <_ZN3wyz5CUart12NonBlockReadEPhmm+0x44>
    	HAL_UART_Receive_IT(this->m_Huart,pDataBuf,Size);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	b292      	uxth	r2, r2
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	4618      	mov	r0, r3
 8006830:	f7fb fae3 	bl	8001dfa <HAL_UART_Receive_IT>
}
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <_ZN3wyz5CUart13NonBlockWriteEPhmm>:

void CUart::NonBlockWrite(uint8_t* pDataBuf,uint32_t Size,uint32_t TimeOut)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
	 if(m_UartMode == m_UsingDMAMode)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d108      	bne.n	8006866 <_ZN3wyz5CUart13NonBlockWriteEPhmm+0x2a>
	 {
		 HAL_UART_Transmit_DMA(this->m_Huart,pDataBuf,Size);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	b292      	uxth	r2, r2
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	4618      	mov	r0, r3
 8006860:	f7fb fb20 	bl	8001ea4 <HAL_UART_Transmit_DMA>
	 	 HAL_UART_Transmit_IT(this->m_Huart,pDataBuf,Size);
	 }else if(m_UartMode == m_UsingBlockMode)
	 {
	 	//配置错误
	 }
}
 8006864:	e00c      	b.n	8006880 <_ZN3wyz5CUart13NonBlockWriteEPhmm+0x44>
	 else if(m_UartMode == m_UsingITMode)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d107      	bne.n	8006880 <_ZN3wyz5CUart13NonBlockWriteEPhmm+0x44>
	 	 HAL_UART_Transmit_IT(this->m_Huart,pDataBuf,Size);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	b292      	uxth	r2, r2
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	4618      	mov	r0, r3
 800687c:	f7fb fa78 	bl	8001d70 <HAL_UART_Transmit_IT>
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <_ZN3wyz5CUart6AttachEPNS_9CObserverE>:
/************************************************/
void CUart::Attach(CObserver* pObserver)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
	m_ObserverList.push_back(pObserver);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3324      	adds	r3, #36	; 0x24
 8006896:	463a      	mov	r2, r7
 8006898:	4611      	mov	r1, r2
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f899 	bl	80069d2 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9push_backERKS3_>
	StartObserverMode();
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f854 	bl	800694e <_ZN3wyz5CUart17StartObserverModeEv>
}
 80068a6:	bf00      	nop
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <_ZThn4_N3wyz5CUart6AttachEPNS_9CObserverE>:
	void Attach(CObserver* pObserver);
 80068ae:	f1a0 0004 	sub.w	r0, r0, #4
 80068b2:	f7ff bfe9 	b.w	8006888 <_ZN3wyz5CUart6AttachEPNS_9CObserverE>

080068b6 <_ZN3wyz5CUart6DetachEPNS_9CObserverE>:

void CUart::Detach(CObserver* pObserver)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
	m_ObserverList.remove(pObserver);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3324      	adds	r3, #36	; 0x24
 80068c4:	463a      	mov	r2, r7
 80068c6:	4611      	mov	r1, r2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 f894 	bl	80069f6 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_>
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <_ZThn4_N3wyz5CUart6DetachEPNS_9CObserverE>:
	void Detach(CObserver* pObserver);
 80068d6:	f1a0 0004 	sub.w	r0, r0, #4
 80068da:	f7ff bfec 	b.w	80068b6 <_ZN3wyz5CUart6DetachEPNS_9CObserverE>

080068de <_ZN3wyz5CUart6NotifyEv>:

void CUart::Notify()
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]

	list<CObserver*>::iterator item = m_ObserverList.begin();
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3324      	adds	r3, #36	; 0x24
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 f8e8 	bl	8006ac0 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE5beginEv>
 80068f0:	4603      	mov	r3, r0
 80068f2:	60bb      	str	r3, [r7, #8]
	while(item != m_ObserverList.end())
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3324      	adds	r3, #36	; 0x24
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 f8f2 	bl	8006ae2 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>
 80068fe:	4603      	mov	r3, r0
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	f107 020c 	add.w	r2, r7, #12
 8006906:	f107 0308 	add.w	r3, r7, #8
 800690a:	4611      	mov	r1, r2
 800690c:	4618      	mov	r0, r3
 800690e:	f000 f8f8 	bl	8006b02 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d012      	beq.n	800693e <_ZN3wyz5CUart6NotifyEv+0x60>
	{
		(*item)->Update(this);
 8006918:	f107 0308 	add.w	r3, r7, #8
 800691c:	4618      	mov	r0, r3
 800691e:	f000 f904 	bl	8006b2a <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>
 8006922:	4603      	mov	r3, r0
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	3104      	adds	r1, #4
 800692e:	4618      	mov	r0, r3
 8006930:	4790      	blx	r2
		++item;
 8006932:	f107 0308 	add.w	r3, r7, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f905 	bl	8006b46 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEppEv>
	while(item != m_ObserverList.end())
 800693c:	e7da      	b.n	80068f4 <_ZN3wyz5CUart6NotifyEv+0x16>
	}
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <_ZThn4_N3wyz5CUart6NotifyEv>:
	void Notify();
 8006946:	f1a0 0004 	sub.w	r0, r0, #4
 800694a:	f7ff bfc8 	b.w	80068de <_ZN3wyz5CUart6NotifyEv>

0800694e <_ZN3wyz5CUart17StartObserverModeEv>:

void CUart::StartObserverMode()
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(this->m_Huart,m_pRxBuf,this->m_SizeOfRxBuf*2);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68d8      	ldr	r0, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6999      	ldr	r1, [r3, #24]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	b29b      	uxth	r3, r3
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	b29b      	uxth	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	f7fb fb07 	bl	8001f7c <HAL_UART_Receive_DMA>
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <_ZN3wyz5CUart13HardInterruptEh>:
/*****************************************************/
void CUart::HardInterrupt(uint8_t interruptMode)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
	this->m_InterruptMode = interruptMode;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	78fa      	ldrb	r2, [r7, #3]
 8006986:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	this->Notify();
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3328      	adds	r3, #40	; 0x28
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <_ZN3wyz5CUart11GetUartModeEv>:

int CUart::GetUartMode(){
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
	return this->m_UartMode;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %list with no elements.
       */
      list()
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)
#endif
      : _Base() { }
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 f8cf 	bl	8006b66 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EEC1Ev>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9push_backERKS3_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f880 	bl	8006ae2 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>
 80069e2:	4603      	mov	r3, r0
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f8d7 	bl	8006b9c <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9_M_insertIJRKS3_EEEvSt14_List_iteratorIS3_EDpOT_>
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_>:
          insert(__last1, __first2, __last2);
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
 80069f6:	b590      	push	{r4, r7, lr}
 80069f8:	b087      	sub	sp, #28
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
    remove(const value_type& __value)
    {
      iterator __first = begin();
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f85d 	bl	8006ac0 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE5beginEv>
 8006a06:	4603      	mov	r3, r0
 8006a08:	617b      	str	r3, [r7, #20]
      iterator __last = end();
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f869 	bl	8006ae2 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>
 8006a10:	4603      	mov	r3, r0
 8006a12:	613b      	str	r3, [r7, #16]
      iterator __extra = __last;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	60fb      	str	r3, [r7, #12]
      while (__first != __last)
 8006a18:	f107 0210 	add.w	r2, r7, #16
 8006a1c:	f107 0314 	add.w	r3, r7, #20
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f86d 	bl	8006b02 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d035      	beq.n	8006a9a <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0xa4>
	{
	  iterator __next = __first;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	60bb      	str	r3, [r7, #8]
	  ++__next;
 8006a32:	f107 0308 	add.w	r3, r7, #8
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 f885 	bl	8006b46 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEppEv>
	  if (*__first == __value)
 8006a3c:	f107 0314 	add.w	r3, r7, #20
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 f872 	bl	8006b2a <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>
 8006a46:	4603      	mov	r3, r0
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01b      	beq.n	8006a94 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x9e>
	    {
	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
	      // 526. Is it undefined if a function in the standard changes
	      // in parameters?
	      if (std::__addressof(*__first) != std::__addressof(__value))
 8006a5c:	f107 0314 	add.w	r3, r7, #20
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f862 	bl	8006b2a <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>
 8006a66:	4603      	mov	r3, r0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f8b5 	bl	8006bd8 <_ZSt11__addressofIPN3wyz9CObserverEEPT_RS3_>
 8006a6e:	4604      	mov	r4, r0
 8006a70:	6838      	ldr	r0, [r7, #0]
 8006a72:	f000 f8bc 	bl	8006bee <_ZSt11__addressofIKPN3wyz9CObserverEEPT_RS4_>
 8006a76:	4603      	mov	r3, r0
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	bf14      	ite	ne
 8006a7c:	2301      	movne	r3, #1
 8006a7e:	2300      	moveq	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d004      	beq.n	8006a90 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x9a>
		_M_erase(__first);
 8006a86:	6979      	ldr	r1, [r7, #20]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f8bb 	bl	8006c04 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
 8006a8e:	e001      	b.n	8006a94 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x9e>
	      else
		__extra = __first;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	60fb      	str	r3, [r7, #12]
	    }
	  __first = __next;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	617b      	str	r3, [r7, #20]
      while (__first != __last)
 8006a98:	e7be      	b.n	8006a18 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0x22>
	}
      if (__extra != __last)
 8006a9a:	f107 0210 	add.w	r2, r7, #16
 8006a9e:	f107 030c 	add.w	r3, r7, #12
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 f82c 	bl	8006b02 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE6removeERKS3_+0xc2>
	_M_erase(__extra);
 8006ab0:	68f9      	ldr	r1, [r7, #12]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8a6 	bl	8006c04 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>
    }
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd90      	pop	{r4, r7, pc}

08006ac0 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	f107 030c 	add.w	r3, r7, #12
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 f8bc 	bl	8006c50 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEC1EPNSt8__detail15_List_node_baseE>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	f107 030c 	add.w	r3, r7, #12
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f8ac 	bl	8006c50 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEC1EPNSt8__detail15_List_node_baseE>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEneERKS3_>:
      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
      { return _M_node != __x._M_node; }
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <_ZNKSt14_List_iteratorIPN3wyz9CObserverEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 f899 	bl	8006c6e <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	601a      	str	r2, [r3, #0]
	return *this;
 8006b58:	687b      	ldr	r3, [r7, #4]
      }
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EEC1Ev>:
      _List_base()
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 f88a 	bl	8006c8a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE10_List_implC1Ev>
      { _M_init(); }
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f899 	bl	8006cae <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE7_M_initEv>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE9_M_insertIJRKS3_EEEvSt14_List_iteratorIS3_EDpOT_>:
	this->_M_inc_size(1);
      }
#else
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ffec 	bl	8006b86 <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f8b4 	bl	8006d20 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt10_List_nodeIS3_EDpOT_>
 8006bb8:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 fbf8 	bl	80083b6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2101      	movs	r1, #1
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f8dc 	bl	8006d88 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_inc_sizeEj>
       }
 8006bd0:	bf00      	nop
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <_ZSt11__addressofIPN3wyz9CObserverEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4618      	mov	r0, r3
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <_ZSt11__addressofIKPN3wyz9CObserverEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE8_M_eraseESt14_List_iteratorIS3_E>:
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2101      	movs	r1, #1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f8ca 	bl	8006dac <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fbd2 	bl	80083c4 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f853 	bl	8006cd2 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f81d 	bl	8006c6e <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 8006c34:	4603      	mov	r3, r0
 8006c36:	4619      	mov	r1, r3
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 f855 	bl	8006ce8 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE7destroyIS3_EEvRS5_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68f9      	ldr	r1, [r7, #12]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f85d 	bl	8006d02 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>
      }
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd90      	pop	{r4, r7, pc}

08006c50 <_ZNSt14_List_iteratorIPN3wyz9CObserverEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3308      	adds	r3, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f8a8 	bl	8006dd0 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE6_M_ptrEv>
 8006c80:	4603      	mov	r3, r0
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type(), _M_node()
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f8a8 	bl	8006de8 <_ZNSaISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	6053      	str	r3, [r2, #4]
 8006ca2:	6093      	str	r3, [r2, #8]
	{ }
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	605a      	str	r2, [r3, #4]
	_M_set_size(0);
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f89b 	bl	8006e00 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_set_sizeEj>
      }
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f893 	bl	8006e20 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE7destroyIS4_EEvPT_>
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_put_nodeEPSt10_List_nodeIS3_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 f88f 	bl	8006e36 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE10deallocateERS5_PS4_j>
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <_ZNSt7__cxx114listIPN3wyz9CObserverESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt10_List_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006d20:	b590      	push	{r4, r7, lr}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 f891 	bl	8006e54 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_get_nodeEv>
 8006d32:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff ffcb 	bl	8006cd2 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE21_M_get_Node_allocatorEv>
 8006d3c:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	6939      	ldr	r1, [r7, #16]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f892 	bl	8006e70 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEC1ERS5_PS4_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8006d4c:	6978      	ldr	r0, [r7, #20]
 8006d4e:	f7ff ff8e 	bl	8006c6e <_ZNSt10_List_nodeIPN3wyz9CObserverEE9_M_valptrEv>
 8006d52:	4604      	mov	r4, r0
 8006d54:	6838      	ldr	r0, [r7, #0]
 8006d56:	f7ff ff16 	bl	8006b86 <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4621      	mov	r1, r4
 8006d60:	6938      	ldr	r0, [r7, #16]
 8006d62:	f000 f8ae 	bl	8006ec2 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	  __guard = nullptr;
 8006d66:	f107 0308 	add.w	r3, r7, #8
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f8bb 	bl	8006ee8 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEaSEDn>
	  return __p;
 8006d72:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8006d74:	f107 0308 	add.w	r3, r7, #8
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 f88d 	bl	8006e98 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev>
	  return __p;
 8006d7e:	4623      	mov	r3, r4
	}
 8006d80:	4618      	mov	r0, r3
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd90      	pop	{r4, r7, pc}

08006d88 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fb fee5 	bl	8002b64 <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	6819      	ldr	r1, [r3, #0]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	440a      	add	r2, r1
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fb fed3 	bl	8002b64 <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	6819      	ldr	r1, [r3, #0]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	1a8a      	subs	r2, r1, r2
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE6_M_ptrEv>:
      _M_ptr() noexcept
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f894 	bl	8006f06 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE7_M_addrEv>
 8006dde:	4603      	mov	r3, r0
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <_ZNSaISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>:
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f893 	bl	8006f1c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_set_sizeEj>:
      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fb fea9 	bl	8002b64 <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8006e12:	4602      	mov	r2, r0
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE7destroyIS4_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f873 	bl	8006f32 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE10deallocateEPS5_j>
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <_ZNSt7__cxx1110_List_baseIPN3wyz9CObserverESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2101      	movs	r1, #1
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f873 	bl	8006f4c <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE8allocateERS5_j>
 8006e66:	4603      	mov	r3, r0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEC1ERS5_PS4_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8006e7c:	68b8      	ldr	r0, [r7, #8]
 8006e7e:	f000 f874 	bl	8006f6a <_ZSt11__addressofISaISt10_List_nodeIPN3wyz9CObserverEEEEPT_RS6_>
 8006e82:	4602      	mov	r2, r0
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	605a      	str	r2, [r3, #4]
      { }
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	f7ff ffbf 	bl	8006e36 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE10deallocateERS5_PS4_j>
      }
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff fe59 	bl	8006b86 <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 f850 	bl	8006f80 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN3wyz9CObserverEEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	605a      	str	r2, [r3, #4]
	return *this;
 8006ef8:	687b      	ldr	r3, [r7, #4]
      }
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <_ZN9__gnu_cxx16__aligned_membufIPN3wyz9CObserverEE7_M_addrEv>:
      _M_addr() noexcept
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE10deallocateEPS5_j>:
      deallocate(pointer __p, size_type)
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	f001 fa24 	bl	800838c <_ZdlPv>
      }
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <_ZNSt16allocator_traitsISaISt10_List_nodeIPN3wyz9CObserverEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006f56:	2200      	movs	r2, #0
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f828 	bl	8006fb0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8allocateEjPKv>
 8006f60:	4603      	mov	r3, r0
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <_ZSt11__addressofISaISt10_List_nodeIPN3wyz9CObserverEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006f80:	b590      	push	{r4, r7, lr}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fdfa 	bl	8006b86 <_ZSt7forwardIRKPN3wyz9CObserverEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006f92:	4603      	mov	r3, r0
 8006f94:	681c      	ldr	r4, [r3, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	2004      	movs	r0, #4
 8006f9c:	f7fb fdd6 	bl	8002b4c <_ZnwjPv>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d000      	beq.n	8006fa8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x28>
 8006fa6:	601c      	str	r4, [r3, #0]
 8006fa8:	bf00      	nop
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd90      	pop	{r4, r7, pc}

08006fb0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 f819 	bl	8006ff4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8max_sizeEv>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	bf8c      	ite	hi
 8006fca:	2301      	movhi	r3, #1
 8006fcc:	2300      	movls	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006fd4:	f001 fab4 	bl	8008540 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 f9b8 	bl	8008358 <_Znwj>
 8006fe8:	4603      	mov	r3, r0
      }
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8006ffc:	4b03      	ldr	r3, [pc, #12]	; (800700c <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN3wyz9CObserverEEE8max_sizeEv+0x18>)
 8006ffe:	4618      	mov	r0, r3
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	15555555 	.word	0x15555555

08007010 <_ZN17CMachineEventBaseD1Ev>:
#ifndef CLASS_CSTATEMACHINE_CMACHINEEVENTBASE_H_
#define CLASS_CSTATEMACHINE_CMACHINEEVENTBASE_H_

class CMachineEventBase {
public:
	virtual ~CMachineEventBase(){};
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	4a04      	ldr	r2, [pc, #16]	; (800702c <_ZN17CMachineEventBaseD1Ev+0x1c>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	08008b20 	.word	0x08008b20

08007030 <_ZN17CMachineEventBaseD0Ev>:
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff ffe9 	bl	8007010 <_ZN17CMachineEventBaseD1Ev>
 800703e:	210c      	movs	r1, #12
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f987 	bl	8008354 <_ZdlPvj>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <_ZN3wyz10CStateBaseD1Ev>:
namespace wyz {
class CStateMachine;
class CStateBase {

public:
	virtual ~CStateBase(){};
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	4a04      	ldr	r2, [pc, #16]	; (800706c <_ZN3wyz10CStateBaseD1Ev+0x1c>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	08008b0c 	.word	0x08008b0c

08007070 <_ZN3wyz10CStateBaseD0Ev>:
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff ffe9 	bl	8007050 <_ZN3wyz10CStateBaseD1Ev>
 800707e:	2104      	movs	r1, #4
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f967 	bl	8008354 <_ZdlPvj>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEED1Ev>:
      ~map() = default;
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fb1c 	bl	80076d8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EED1Ev>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEED1Ev>:
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fb24 	bl	8007702 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EED1Ev>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <_ZN3wyz13CStateMachineD1Ev>:

namespace wyz {

class CStateMachine {
public:
	virtual ~CStateMachine() {};
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	4a0b      	ldr	r2, [pc, #44]	; (80070fc <_ZN3wyz13CStateMachineD1Ev+0x38>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3334      	adds	r3, #52	; 0x34
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ffe7 	bl	80070aa <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEED1Ev>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	331c      	adds	r3, #28
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff ffe2 	bl	80070aa <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEED1Ev>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff ffd0 	bl	8007090 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEED1Ev>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	08008afc 	.word	0x08008afc

08007100 <_ZN3wyz13CStateMachineD0Ev>:
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff ffdb 	bl	80070c4 <_ZN3wyz13CStateMachineD1Ev>
 800710e:	2158      	movs	r1, #88	; 0x58
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f91f 	bl	8008354 <_ZdlPvj>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <_ZN3wyz13CStateMachine15SetCurrentStateEi>:
	void AddItemOfStateMap(int state,CStateBase * pStateAction);
	void AddItemOfTransitions(int eventType,int state,int newStats);
	void AddItemOfInternalTransitions(int eventType,int state,int newStats);
	void ExternalEvent(CMachineEventBase * pData,int EventType);
	void InternalEvent(CMachineEventBase * pData);
	void SetCurrentState(int state){this->m_CurrentState = state;}
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	651a      	str	r2, [r3, #80]	; 0x50
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <_ZN17CMachineEventBaseC1Ev>:
class CMachineEventBase {
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	4a04      	ldr	r2, [pc, #16]	; (8007158 <_ZN17CMachineEventBaseC1Ev+0x1c>)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	08008b20 	.word	0x08008b20

0800715c <_ZN3wyz9CA1_EventC1EiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
#include <string>
namespace wyz {

class CA1_Event : public CMachineEventBase{
public:
	CA1_Event(int ExternalEventType,int internalEventType = 0,std::string order = ""){
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff ffe5 	bl	800713c <_ZN17CMachineEventBaseC1Ev>
 8007172:	4a0c      	ldr	r2, [pc, #48]	; (80071a4 <_ZN3wyz9CA1_EventC1EiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	330c      	adds	r3, #12
 800717c:	4618      	mov	r0, r3
 800717e:	f001 fa44 	bl	800860a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		this->m_ExternalEventType = ExternalEventType;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	609a      	str	r2, [r3, #8]
		this->m_InternalEventType = internalEventType;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	605a      	str	r2, [r3, #4]
		this->m_Order = order;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	330c      	adds	r3, #12
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f001 fa45 	bl	8008624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	};
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	08008aec 	.word	0x08008aec

080071a8 <_ZN3wyz9CA1_EventD1Ev>:
	~CA1_Event(){};
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <_ZN3wyz9CA1_EventD1Ev+0x2c>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	330c      	adds	r3, #12
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 fa2c 	bl	8008618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff ff24 	bl	8007010 <_ZN17CMachineEventBaseD1Ev>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	08008aec 	.word	0x08008aec

080071d8 <_ZN3wyz9CA1_EventD0Ev>:
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff ffe1 	bl	80071a8 <_ZN3wyz9CA1_EventD1Ev>
 80071e6:	2124      	movs	r1, #36	; 0x24
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 f8b3 	bl	8008354 <_ZdlPvj>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <_ZN3wyz11A1_Protocol6UpdateEPNS_8CSubjectE>:
public:
	A1_Protocol(CDevice * pDevice);
	~A1_Protocol();
	/*********Observer***********/

	void Update(CSubject* pSubject){
 80071f8:	b5b0      	push	{r4, r5, r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]

		CA1_Event *pEvent = new CA1_Event(ExternalEventType::AFrameOfData);
 8007202:	f107 0320 	add.w	r3, r7, #32
 8007206:	4618      	mov	r0, r3
 8007208:	f001 f8d3 	bl	80083b2 <_ZNSaIcEC1Ev>
 800720c:	f107 0220 	add.w	r2, r7, #32
 8007210:	f107 0308 	add.w	r3, r7, #8
 8007214:	4917      	ldr	r1, [pc, #92]	; (8007274 <_ZN3wyz11A1_Protocol6UpdateEPNS_8CSubjectE+0x7c>)
 8007216:	4618      	mov	r0, r3
 8007218:	f001 fa2e 	bl	8008678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800721c:	f107 0508 	add.w	r5, r7, #8
 8007220:	2024      	movs	r0, #36	; 0x24
 8007222:	f001 f899 	bl	8008358 <_Znwj>
 8007226:	4603      	mov	r3, r0
 8007228:	461c      	mov	r4, r3
 800722a:	462b      	mov	r3, r5
 800722c:	2200      	movs	r2, #0
 800722e:	2102      	movs	r1, #2
 8007230:	4620      	mov	r0, r4
 8007232:	f7ff ff93 	bl	800715c <_ZN3wyz9CA1_EventC1EiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007236:	627c      	str	r4, [r7, #36]	; 0x24
 8007238:	f107 0308 	add.w	r3, r7, #8
 800723c:	4618      	mov	r0, r3
 800723e:	f001 f9eb 	bl	8008618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007242:	f107 0320 	add.w	r3, r7, #32
 8007246:	4618      	mov	r0, r3
 8007248:	f001 f8b4 	bl	80083b4 <_ZNSaIcED1Ev>
		this->SetEvent(pEvent);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3304      	adds	r3, #4
 8007250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007252:	4618      	mov	r0, r3
 8007254:	f7fb fd23 	bl	8002c9e <_ZN3wyz13CStateMachine8SetEventEP17CMachineEventBase>
		delete pEvent;
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <_ZN3wyz11A1_Protocol6UpdateEPNS_8CSubjectE+0x72>
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3304      	adds	r3, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007268:	4798      	blx	r3
	}
 800726a:	bf00      	nop
 800726c:	3728      	adds	r7, #40	; 0x28
 800726e:	46bd      	mov	sp, r7
 8007270:	bdb0      	pop	{r4, r5, r7, pc}
 8007272:	bf00      	nop
 8007274:	08008964 	.word	0x08008964

08007278 <_ZN3wyz9CObserverC1Ev>:
#define CLASS_COBSERVER_H_
#include "CSubject.h"

namespace wyz {

class CObserver {
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	4a04      	ldr	r2, [pc, #16]	; (8007294 <_ZN3wyz9CObserverC1Ev+0x1c>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	08008b30 	.word	0x08008b30

08007298 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl() = default;
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fa43 	bl	800772c <_ZNSaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEC1Ev>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 fa57 	bl	800775c <_ZNSt20_Rb_tree_key_compareISt4lessIiEEC1Ev>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3304      	adds	r3, #4
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe f884 	bl	80053c0 <_ZNSt15_Rb_tree_headerC1Ev>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
        struct _Rb_tree_impl
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa3a 	bl	8007744 <_ZNSaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEED1Ev>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EEC1Ev>:
      _Rb_tree() = default;
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff ffd7 	bl	8007298 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEC1Ev>:
      map() = default;
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff ffeb 	bl	80072da <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EEC1Ev>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1Ev>:
	  _Rb_tree_impl() = default;
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa2b 	bl	8007772 <_ZNSaISt13_Rb_tree_nodeISt4pairIKxiEEEC1Ev>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fa3f 	bl	80077a2 <_ZNSt20_Rb_tree_key_compareISt4lessIxEEC1Ev>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3304      	adds	r3, #4
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe f849 	bl	80053c0 <_ZNSt15_Rb_tree_headerC1Ev>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>:
        struct _Rb_tree_impl
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa22 	bl	800778a <_ZNSaISt13_Rb_tree_nodeISt4pairIKxiEEED1Ev>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EEC1Ev>:
      _Rb_tree() = default;
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff ffd7 	bl	800730e <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1Ev>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEC1Ev>:
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff ffeb 	bl	8007350 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EEC1Ev>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <_ZN3wyz13CStateMachineC1Ev>:
class CStateMachine {
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	4a10      	ldr	r2, [pc, #64]	; (80073d0 <_ZN3wyz13CStateMachineC1Ev+0x4c>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3304      	adds	r3, #4
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff ffac 	bl	80072f4 <_ZNSt3mapIiPN3wyz10CStateBaseESt4lessIiESaISt4pairIKiS2_EEEC1Ev>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	331c      	adds	r3, #28
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff ffe2 	bl	800736a <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEC1Ev>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3334      	adds	r3, #52	; 0x34
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff ffdd 	bl	800736a <_ZNSt3mapIxiSt4lessIxESaISt4pairIKxiEEEC1Ev>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	334c      	adds	r3, #76	; 0x4c
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 f9ff 	bl	80077b8 <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1Ev>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	651a      	str	r2, [r3, #80]	; 0x50
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	655a      	str	r2, [r3, #84]	; 0x54
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	08008afc 	.word	0x08008afc

080073d4 <_ZN3wyz11A1_ProtocolC1EPNS_7CDeviceE>:
//#include <RPLIDAR/A1Protocol.h>
#include "A1Protocol.h"
#include <vector>
namespace wyz {

A1_Protocol::A1_Protocol(CDevice* pDevice) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff ff49 	bl	8007278 <_ZN3wyz9CObserverC1Ev>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff ffca 	bl	8007384 <_ZN3wyz13CStateMachineC1Ev>
 80073f0:	4a48      	ldr	r2, [pc, #288]	; (8007514 <_ZN3wyz11A1_ProtocolC1EPNS_7CDeviceE+0x140>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	4a48      	ldr	r2, [pc, #288]	; (8007518 <_ZN3wyz11A1_ProtocolC1EPNS_7CDeviceE+0x144>)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	605a      	str	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	335c      	adds	r3, #92	; 0x5c
 8007400:	4618      	mov	r0, r3
 8007402:	f000 f9f7 	bl	80077f4 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEEC1Ev>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3360      	adds	r3, #96	; 0x60
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fa26 	bl	800785c <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEEC1Ev>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3364      	adds	r3, #100	; 0x64
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fa55 	bl	80078c4 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEEC1Ev>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3368      	adds	r3, #104	; 0x68
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fa84 	bl	800792c <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEEC1Ev>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	336c      	adds	r3, #108	; 0x6c
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fab3 	bl	8007994 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEEC1Ev>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3370      	adds	r3, #112	; 0x70
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fae2 	bl	80079fc <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEEC1Ev>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3374      	adds	r3, #116	; 0x74
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fb11 	bl	8007a64 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEEC1Ev>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3378      	adds	r3, #120	; 0x78
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fb40 	bl	8007acc <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEEC1Ev>
	//绑定状态函数
	this->AddItemOfStateMap(CA1Stats::BeginState, &STA_begin);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	1d18      	adds	r0, r3, #4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	335c      	adds	r3, #92	; 0x5c
 8007454:	461a      	mov	r2, r3
 8007456:	2100      	movs	r1, #0
 8007458:	f7fb fbec 	bl	8002c34 <_ZN3wyz13CStateMachine17AddItemOfStateMapEiPNS_10CStateBaseE>
	this->AddItemOfStateMap(CA1Stats::ErrorState, &STA_errorState);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1d18      	adds	r0, r3, #4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3374      	adds	r3, #116	; 0x74
 8007464:	461a      	mov	r2, r3
 8007466:	2106      	movs	r1, #6
 8007468:	f7fb fbe4 	bl	8002c34 <_ZN3wyz13CStateMachine17AddItemOfStateMapEiPNS_10CStateBaseE>
	this->AddItemOfStateMap(CA1Stats::IdleState, &STA_idleState);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	1d18      	adds	r0, r3, #4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3370      	adds	r3, #112	; 0x70
 8007474:	461a      	mov	r2, r3
 8007476:	2105      	movs	r1, #5
 8007478:	f7fb fbdc 	bl	8002c34 <_ZN3wyz13CStateMachine17AddItemOfStateMapEiPNS_10CStateBaseE>
	this->AddItemOfStateMap(CA1Stats::WaitForData, &STA_waitForData);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	1d18      	adds	r0, r3, #4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	336c      	adds	r3, #108	; 0x6c
 8007484:	461a      	mov	r2, r3
 8007486:	2104      	movs	r1, #4
 8007488:	f7fb fbd4 	bl	8002c34 <_ZN3wyz13CStateMachine17AddItemOfStateMapEiPNS_10CStateBaseE>
	this->AddItemOfStateMap(CA1Stats::WaitForAns, &STA_waitForAns);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	1d18      	adds	r0, r3, #4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3360      	adds	r3, #96	; 0x60
 8007494:	461a      	mov	r2, r3
 8007496:	2101      	movs	r1, #1
 8007498:	f7fb fbcc 	bl	8002c34 <_ZN3wyz13CStateMachine17AddItemOfStateMapEiPNS_10CStateBaseE>
	this->AddItemOfStateMap(CA1Stats::WaitForInitialAns, &STA_waitForInitialAns);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	1d18      	adds	r0, r3, #4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3368      	adds	r3, #104	; 0x68
 80074a4:	461a      	mov	r2, r3
 80074a6:	2103      	movs	r1, #3
 80074a8:	f7fb fbc4 	bl	8002c34 <_ZN3wyz13CStateMachine17AddItemOfStateMapEiPNS_10CStateBaseE>
	this->AddItemOfStateMap(CA1Stats::WhetherTheFault, &STA_whetherTheFault);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	1d18      	adds	r0, r3, #4
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3364      	adds	r3, #100	; 0x64
 80074b4:	461a      	mov	r2, r3
 80074b6:	2102      	movs	r1, #2
 80074b8:	f7fb fbbc 	bl	8002c34 <_ZN3wyz13CStateMachine17AddItemOfStateMapEiPNS_10CStateBaseE>
	this->AddItemOfStateMap(CA1Stats::AnalyticalState, &STA_analyticalState);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	1d18      	adds	r0, r3, #4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3378      	adds	r3, #120	; 0x78
 80074c4:	461a      	mov	r2, r3
 80074c6:	2107      	movs	r1, #7
 80074c8:	f7fb fbb4 	bl	8002c34 <_ZN3wyz13CStateMachine17AddItemOfStateMapEiPNS_10CStateBaseE>
	//填充外部事件转移表
	this->AddItemOfTransitions(ExternalEventType::StartSignal, CA1Stats::IdleState, CA1Stats::BeginState);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	1d18      	adds	r0, r3, #4
 80074d0:	2300      	movs	r3, #0
 80074d2:	2205      	movs	r2, #5
 80074d4:	2101      	movs	r1, #1
 80074d6:	f7fb fbc2 	bl	8002c5e <_ZN3wyz13CStateMachine20AddItemOfTransitionsEiii>
	this->AddItemOfTransitions(ExternalEventType::AFrameOfData, CA1Stats::WaitForData,  CA1Stats::AnalyticalState);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	1d18      	adds	r0, r3, #4
 80074de:	2307      	movs	r3, #7
 80074e0:	2204      	movs	r2, #4
 80074e2:	2102      	movs	r1, #2
 80074e4:	f7fb fbbb 	bl	8002c5e <_ZN3wyz13CStateMachine20AddItemOfTransitionsEiii>
	//填充内部事件转移表
	this->AddItemOfInternalTransitions(InternalEventType::GoAhead, CA1Stats::BeginState, CA1Stats::WaitForAns);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	1d18      	adds	r0, r3, #4
 80074ec:	2301      	movs	r3, #1
 80074ee:	2200      	movs	r2, #0
 80074f0:	2102      	movs	r1, #2
 80074f2:	f7fb fb7f 	bl	8002bf4 <_ZN3wyz13CStateMachine28AddItemOfInternalTransitionsEiii>
	//初始化状态
	this->SetCurrentState(CA1Stats::IdleState); //第一个状态
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3304      	adds	r3, #4
 80074fa:	2105      	movs	r1, #5
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff fe0f 	bl	8007120 <_ZN3wyz13CStateMachine15SetCurrentStateEi>
	this->m_pDevice = pDevice;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	this->m_pInvoker = new CInvoker();
}
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	08008a28 	.word	0x08008a28
 8007518:	08008a3c 	.word	0x08008a3c

0800751c <_ZN3wyz11A1_ProtocolD1Ev>:

A1_Protocol::~A1_Protocol() {
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	4a1b      	ldr	r2, [pc, #108]	; (8007594 <_ZN3wyz11A1_ProtocolD1Ev+0x78>)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <_ZN3wyz11A1_ProtocolD1Ev+0x7c>)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	605a      	str	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3378      	adds	r3, #120	; 0x78
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fadb 	bl	8007af0 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEED1Ev>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3374      	adds	r3, #116	; 0x74
 800753e:	4618      	mov	r0, r3
 8007540:	f000 faa2 	bl	8007a88 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEED1Ev>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3370      	adds	r3, #112	; 0x70
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fa69 	bl	8007a20 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEED1Ev>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	336c      	adds	r3, #108	; 0x6c
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fa30 	bl	80079b8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEED1Ev>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3368      	adds	r3, #104	; 0x68
 800755c:	4618      	mov	r0, r3
 800755e:	f000 f9f7 	bl	8007950 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEED1Ev>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3364      	adds	r3, #100	; 0x64
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f9be 	bl	80078e8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEED1Ev>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3360      	adds	r3, #96	; 0x60
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f985 	bl	8007880 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEED1Ev>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	335c      	adds	r3, #92	; 0x5c
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f94c 	bl	8007818 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEED1Ev>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff fd9d 	bl	80070c4 <_ZN3wyz13CStateMachineD1Ev>
//	delete this->m_pInvoker;
}
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	08008a28 	.word	0x08008a28
 8007598:	08008a3c 	.word	0x08008a3c

0800759c <_ZThn4_N3wyz11A1_ProtocolD1Ev>:
	~A1_Protocol();
 800759c:	f1a0 0004 	sub.w	r0, r0, #4
 80075a0:	f7ff bfbc 	b.w	800751c <_ZN3wyz11A1_ProtocolD1Ev>

080075a4 <_ZN3wyz11A1_ProtocolD0Ev>:
A1_Protocol::~A1_Protocol() {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
}
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7ff ffb5 	bl	800751c <_ZN3wyz11A1_ProtocolD1Ev>
 80075b2:	2184      	movs	r1, #132	; 0x84
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fecd 	bl	8008354 <_ZdlPvj>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <_ZThn4_N3wyz11A1_ProtocolD0Ev>:
 80075c4:	f1a0 0004 	sub.w	r0, r0, #4
 80075c8:	f7ff bfec 	b.w	80075a4 <_ZN3wyz11A1_ProtocolD0Ev>

080075cc <_ZN3wyz11A1_Protocol13ST_BeginStateEPNS_9CA1_EventE>:

/****************observer*******************/


/***********StateAction****************/
void A1_Protocol::ST_BeginState(CA1_Event* pEvent){
 80075cc:	b590      	push	{r4, r7, lr}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
	//发送GetHeath请求;
	uint8_t order[2]={0xa5 ,0x52};
 80075d6:	4b12      	ldr	r3, [pc, #72]	; (8007620 <_ZN3wyz11A1_Protocol13ST_BeginStateEPNS_9CA1_EventE+0x54>)
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	81bb      	strh	r3, [r7, #12]
	this->m_pDevice->ClearWriteFIFO();
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3304      	adds	r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4610      	mov	r0, r2
 80075f0:	4798      	blx	r3
	this->m_pDevice->Blockwrite(order, 2, 1000); //发送GET_HEALTH
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3314      	adds	r3, #20
 8007602:	681c      	ldr	r4, [r3, #0]
 8007604:	f107 010c 	add.w	r1, r7, #12
 8007608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800760c:	2202      	movs	r2, #2
 800760e:	47a0      	blx	r4
	pEvent->m_InternalEventType =InternalEventType::GoAhead; //更新内部事件
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2202      	movs	r2, #2
 8007614:	605a      	str	r2, [r3, #4]
}
 8007616:	bf00      	nop
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	bd90      	pop	{r4, r7, pc}
 800761e:	bf00      	nop
 8007620:	08008968 	.word	0x08008968

08007624 <_ZN3wyz11A1_Protocol13ST_WaitForAnsEPNS_9CA1_EventE>:

void A1_Protocol::ST_WaitForAns(CA1_Event* pEvent){
 8007624:	b590      	push	{r4, r7, lr}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
	uint8_t databuf[10];
	m_pDevice->BlockRead(databuf, 10, 1000);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3310      	adds	r3, #16
 800763e:	681c      	ldr	r4, [r3, #0]
 8007640:	f107 010c 	add.w	r1, r7, #12
 8007644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007648:	220a      	movs	r2, #10
 800764a:	47a0      	blx	r4
}
 800764c:	bf00      	nop
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd90      	pop	{r4, r7, pc}

08007654 <_ZN3wyz11A1_Protocol13ST_ErrorStateEPNS_9CA1_EventE>:

void A1_Protocol::ST_ErrorState(CA1_Event* pEvent){
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]

}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <_ZN3wyz11A1_Protocol12ST_IdleStateEPNS_9CA1_EventE>:

void A1_Protocol::ST_IdleState(CA1_Event* pEvent){
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
	;
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <_ZN3wyz11A1_Protocol14ST_WaitForDataEPNS_9CA1_EventE>:

void A1_Protocol::ST_WaitForData(CA1_Event* pEvent){
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]

}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <_ZN3wyz11A1_Protocol20ST_WaitForInitialAnsEPNS_9CA1_EventE>:

void A1_Protocol::ST_WaitForInitialAns(CA1_Event* pEvent){
 8007696:	b480      	push	{r7}
 8007698:	b083      	sub	sp, #12
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]

}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <_ZN3wyz11A1_Protocol18ST_WhetherTheFaultEPNS_9CA1_EventE>:

void A1_Protocol::ST_WhetherTheFault(CA1_Event* pEvent){
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]

}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <_ZN3wyz11A1_Protocol18ST_AnalyticalStateEPNS_9CA1_EventE>:

void A1_Protocol::ST_AnalyticalState(CA1_Event* pEvent){
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]

}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7fb fe33 	bl	800334c <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_beginEv>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa22 	bl	8007b34 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff fde5 	bl	80072c2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fb fe2a 	bl	8003364 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_beginEv>
 8007710:	4603      	mov	r3, r0
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa2c 	bl	8007b72 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff fe0b 	bl	8007338 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZNSaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEC1Ev>:
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fa3b 	bl	8007bb0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEC1Ev>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <_ZNSaISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa3a 	bl	8007bc6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEED1Ev>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <_ZNSt20_Rb_tree_key_compareISt4lessIiEEC1Ev>:
      _Rb_tree_key_compare()
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
      { }
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <_ZNSaISt13_Rb_tree_nodeISt4pairIKxiEEEC1Ev>:
      allocator() throw() { }
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa2e 	bl	8007bdc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEEC1Ev>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <_ZNSaISt13_Rb_tree_nodeISt4pairIKxiEEED1Ev>:
      ~allocator() throw() { }
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa2d 	bl	8007bf2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEED1Ev>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <_ZNSt20_Rb_tree_key_compareISt4lessIxEEC1Ev>:
      _Rb_tree_key_compare()
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
      { }
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <_ZNSt17_Rb_tree_iteratorISt4pairIKxiEEC1Ev>:
      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
      : _M_node() { }
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <_ZN3wyz10CStateBaseC1Ev>:
class CStateBase {
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	4a04      	ldr	r2, [pc, #16]	; (80077f0 <_ZN3wyz10CStateBaseC1Ev+0x1c>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	08008b0c 	.word	0x08008b0c

080077f4 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEEC1Ev>:
class CStateMachine;
template < typename SM,typename ED,void (SM::*Action)(ED*) >
class CStateAction : public CStateBase
{
public:
	CStateAction() {};
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff ffe8 	bl	80077d4 <_ZN3wyz10CStateBaseC1Ev>
 8007804:	4a03      	ldr	r2, [pc, #12]	; (8007814 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEEC1Ev+0x20>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	08008ad8 	.word	0x08008ad8

08007818 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEED1Ev>:
	virtual ~CStateAction() {};
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	4a05      	ldr	r2, [pc, #20]	; (8007838 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEED1Ev+0x20>)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff fc11 	bl	8007050 <_ZN3wyz10CStateBaseD1Ev>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	08008ad8 	.word	0x08008ad8

0800783c <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEED0Ev>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff ffe7 	bl	8007818 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEED1Ev>
 800784a:	2104      	movs	r1, #4
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fd81 	bl	8008354 <_ZdlPvj>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEEC1Ev>:
	CStateAction() {};
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff ffb4 	bl	80077d4 <_ZN3wyz10CStateBaseC1Ev>
 800786c:	4a03      	ldr	r2, [pc, #12]	; (800787c <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEEC1Ev+0x20>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	08008ac4 	.word	0x08008ac4

08007880 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEED1Ev>:
	virtual ~CStateAction() {};
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	4a05      	ldr	r2, [pc, #20]	; (80078a0 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEED1Ev+0x20>)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fbdd 	bl	8007050 <_ZN3wyz10CStateBaseD1Ev>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	08008ac4 	.word	0x08008ac4

080078a4 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEED0Ev>:
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff ffe7 	bl	8007880 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEED1Ev>
 80078b2:	2104      	movs	r1, #4
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fd4d 	bl	8008354 <_ZdlPvj>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEEC1Ev>:
	CStateAction() {};
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff ff80 	bl	80077d4 <_ZN3wyz10CStateBaseC1Ev>
 80078d4:	4a03      	ldr	r2, [pc, #12]	; (80078e4 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEEC1Ev+0x20>)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	08008ab0 	.word	0x08008ab0

080078e8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEED1Ev>:
	virtual ~CStateAction() {};
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	4a05      	ldr	r2, [pc, #20]	; (8007908 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEED1Ev+0x20>)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fba9 	bl	8007050 <_ZN3wyz10CStateBaseD1Ev>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	08008ab0 	.word	0x08008ab0

0800790c <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEED0Ev>:
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff ffe7 	bl	80078e8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEED1Ev>
 800791a:	2104      	movs	r1, #4
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fd19 	bl	8008354 <_ZdlPvj>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEEC1Ev>:
	CStateAction() {};
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff ff4c 	bl	80077d4 <_ZN3wyz10CStateBaseC1Ev>
 800793c:	4a03      	ldr	r2, [pc, #12]	; (800794c <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEEC1Ev+0x20>)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	08008a9c 	.word	0x08008a9c

08007950 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEED1Ev>:
	virtual ~CStateAction() {};
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	4a05      	ldr	r2, [pc, #20]	; (8007970 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEED1Ev+0x20>)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff fb75 	bl	8007050 <_ZN3wyz10CStateBaseD1Ev>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	08008a9c 	.word	0x08008a9c

08007974 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEED0Ev>:
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff ffe7 	bl	8007950 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEED1Ev>
 8007982:	2104      	movs	r1, #4
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fce5 	bl	8008354 <_ZdlPvj>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEEC1Ev>:
	CStateAction() {};
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff ff18 	bl	80077d4 <_ZN3wyz10CStateBaseC1Ev>
 80079a4:	4a03      	ldr	r2, [pc, #12]	; (80079b4 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEEC1Ev+0x20>)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	08008a88 	.word	0x08008a88

080079b8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEED1Ev>:
	virtual ~CStateAction() {};
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	4a05      	ldr	r2, [pc, #20]	; (80079d8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEED1Ev+0x20>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff fb41 	bl	8007050 <_ZN3wyz10CStateBaseD1Ev>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	08008a88 	.word	0x08008a88

080079dc <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEED0Ev>:
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff ffe7 	bl	80079b8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEED1Ev>
 80079ea:	2104      	movs	r1, #4
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fcb1 	bl	8008354 <_ZdlPvj>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEEC1Ev>:
	CStateAction() {};
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fee4 	bl	80077d4 <_ZN3wyz10CStateBaseC1Ev>
 8007a0c:	4a03      	ldr	r2, [pc, #12]	; (8007a1c <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEEC1Ev+0x20>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	08008a74 	.word	0x08008a74

08007a20 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEED1Ev>:
	virtual ~CStateAction() {};
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	4a05      	ldr	r2, [pc, #20]	; (8007a40 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEED1Ev+0x20>)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff fb0d 	bl	8007050 <_ZN3wyz10CStateBaseD1Ev>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	08008a74 	.word	0x08008a74

08007a44 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEED0Ev>:
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ffe7 	bl	8007a20 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEED1Ev>
 8007a52:	2104      	movs	r1, #4
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fc7d 	bl	8008354 <_ZdlPvj>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEEC1Ev>:
	CStateAction() {};
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff feb0 	bl	80077d4 <_ZN3wyz10CStateBaseC1Ev>
 8007a74:	4a03      	ldr	r2, [pc, #12]	; (8007a84 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEEC1Ev+0x20>)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	08008a60 	.word	0x08008a60

08007a88 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEED1Ev>:
	virtual ~CStateAction() {};
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEED1Ev+0x20>)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff fad9 	bl	8007050 <_ZN3wyz10CStateBaseD1Ev>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	08008a60 	.word	0x08008a60

08007aac <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEED0Ev>:
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff ffe7 	bl	8007a88 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEED1Ev>
 8007aba:	2104      	movs	r1, #4
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fc49 	bl	8008354 <_ZdlPvj>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEEC1Ev>:
	CStateAction() {};
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fe7c 	bl	80077d4 <_ZN3wyz10CStateBaseC1Ev>
 8007adc:	4a03      	ldr	r2, [pc, #12]	; (8007aec <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEEC1Ev+0x20>)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	08008a4c 	.word	0x08008a4c

08007af0 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEED1Ev>:
	virtual ~CStateAction() {};
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	4a05      	ldr	r2, [pc, #20]	; (8007b10 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEED1Ev+0x20>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff faa5 	bl	8007050 <_ZN3wyz10CStateBaseD1Ev>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	08008a4c 	.word	0x08008a4c

08007b14 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEED0Ev>:
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff ffe7 	bl	8007af0 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEED1Ev>
 8007b22:	2104      	movs	r1, #4
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc15 	bl	8008354 <_ZdlPvj>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d012      	beq.n	8007b6a <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8007b44:	6838      	ldr	r0, [r7, #0]
 8007b46:	f7fb ff38 	bl	80039ba <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff fff0 	bl	8007b34 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8007b54:	6838      	ldr	r0, [r7, #0]
 8007b56:	f7fb ff3c 	bl	80039d2 <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007b5a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fb ff43 	bl	80039ea <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007b68:	e7e9      	b.n	8007b3e <_ZNSt8_Rb_treeIiSt4pairIKiPN3wyz10CStateBaseEESt10_Select1stIS5_ESt4lessIiESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d012      	beq.n	8007ba8 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x36>
	  _M_erase(_S_right(__x));
 8007b82:	6838      	ldr	r0, [r7, #0]
 8007b84:	f7fb ff42 	bl	8003a0c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fff0 	bl	8007b72 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
 8007b92:	6838      	ldr	r0, [r7, #0]
 8007b94:	f7fb ff46 	bl	8003a24 <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007b98:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7fb ff4d 	bl	8003a3c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	  __x = __y;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007ba6:	e7e9      	b.n	8007b7c <_ZNSt8_Rb_treeIxSt4pairIKxiESt10_Select1stIS2_ESt4lessIxESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0xa>
    }
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiPN3wyz10CStateBaseEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKxiEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase>:
	void InvokeStateAction(CStateMachine * sm, CMachineEventBase * data)
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
	{
		SM* pDerivedSm = static_cast<SM*>(sm);    //父辈指针变成子辈
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x18>
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	e000      	b.n	8007c22 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_AnalyticalStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x1a>
 8007c20:	2300      	movs	r3, #0
 8007c22:	617b      	str	r3, [r7, #20]
		ED* pDerivedData = static_cast<ED*>(data);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	613b      	str	r3, [r7, #16]
		(pDerivedSm->*Action)(pDerivedData);      //成功用子辈具体状态机调用子辈函数
 8007c28:	6939      	ldr	r1, [r7, #16]
 8007c2a:	6978      	ldr	r0, [r7, #20]
 8007c2c:	f7ff fd49 	bl	80076c2 <_ZN3wyz11A1_Protocol18ST_AnalyticalStateEPNS_9CA1_EventE>
	}
 8007c30:	bf00      	nop
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase>:
	void InvokeStateAction(CStateMachine * sm, CMachineEventBase * data)
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
		SM* pDerivedSm = static_cast<SM*>(sm);    //父辈指针变成子辈
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x18>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	3b04      	subs	r3, #4
 8007c4e:	e000      	b.n	8007c52 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_ErrorStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x1a>
 8007c50:	2300      	movs	r3, #0
 8007c52:	617b      	str	r3, [r7, #20]
		ED* pDerivedData = static_cast<ED*>(data);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	613b      	str	r3, [r7, #16]
		(pDerivedSm->*Action)(pDerivedData);      //成功用子辈具体状态机调用子辈函数
 8007c58:	6939      	ldr	r1, [r7, #16]
 8007c5a:	6978      	ldr	r0, [r7, #20]
 8007c5c:	f7ff fcfa 	bl	8007654 <_ZN3wyz11A1_Protocol13ST_ErrorStateEPNS_9CA1_EventE>
	}
 8007c60:	bf00      	nop
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase>:
	void InvokeStateAction(CStateMachine * sm, CMachineEventBase * data)
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
		SM* pDerivedSm = static_cast<SM*>(sm);    //父辈指针变成子辈
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x18>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	e000      	b.n	8007c82 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_12ST_IdleStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x1a>
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]
		ED* pDerivedData = static_cast<ED*>(data);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	613b      	str	r3, [r7, #16]
		(pDerivedSm->*Action)(pDerivedData);      //成功用子辈具体状态机调用子辈函数
 8007c88:	6939      	ldr	r1, [r7, #16]
 8007c8a:	6978      	ldr	r0, [r7, #20]
 8007c8c:	f7ff fced 	bl	800766a <_ZN3wyz11A1_Protocol12ST_IdleStateEPNS_9CA1_EventE>
	}
 8007c90:	bf00      	nop
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase>:
	void InvokeStateAction(CStateMachine * sm, CMachineEventBase * data)
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
		SM* pDerivedSm = static_cast<SM*>(sm);    //父辈指针变成子辈
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x18>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	3b04      	subs	r3, #4
 8007cae:	e000      	b.n	8007cb2 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_14ST_WaitForDataEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x1a>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
		ED* pDerivedData = static_cast<ED*>(data);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	613b      	str	r3, [r7, #16]
		(pDerivedSm->*Action)(pDerivedData);      //成功用子辈具体状态机调用子辈函数
 8007cb8:	6939      	ldr	r1, [r7, #16]
 8007cba:	6978      	ldr	r0, [r7, #20]
 8007cbc:	f7ff fce0 	bl	8007680 <_ZN3wyz11A1_Protocol14ST_WaitForDataEPNS_9CA1_EventE>
	}
 8007cc0:	bf00      	nop
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase>:
	void InvokeStateAction(CStateMachine * sm, CMachineEventBase * data)
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
		SM* pDerivedSm = static_cast<SM*>(sm);    //父辈指针变成子辈
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x18>
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	3b04      	subs	r3, #4
 8007cde:	e000      	b.n	8007ce2 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_20ST_WaitForInitialAnsEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x1a>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	617b      	str	r3, [r7, #20]
		ED* pDerivedData = static_cast<ED*>(data);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	613b      	str	r3, [r7, #16]
		(pDerivedSm->*Action)(pDerivedData);      //成功用子辈具体状态机调用子辈函数
 8007ce8:	6939      	ldr	r1, [r7, #16]
 8007cea:	6978      	ldr	r0, [r7, #20]
 8007cec:	f7ff fcd3 	bl	8007696 <_ZN3wyz11A1_Protocol20ST_WaitForInitialAnsEPNS_9CA1_EventE>
	}
 8007cf0:	bf00      	nop
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase>:
	void InvokeStateAction(CStateMachine * sm, CMachineEventBase * data)
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
		SM* pDerivedSm = static_cast<SM*>(sm);    //父辈指针变成子辈
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x18>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3b04      	subs	r3, #4
 8007d0e:	e000      	b.n	8007d12 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_18ST_WhetherTheFaultEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x1a>
 8007d10:	2300      	movs	r3, #0
 8007d12:	617b      	str	r3, [r7, #20]
		ED* pDerivedData = static_cast<ED*>(data);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	613b      	str	r3, [r7, #16]
		(pDerivedSm->*Action)(pDerivedData);      //成功用子辈具体状态机调用子辈函数
 8007d18:	6939      	ldr	r1, [r7, #16]
 8007d1a:	6978      	ldr	r0, [r7, #20]
 8007d1c:	f7ff fcc6 	bl	80076ac <_ZN3wyz11A1_Protocol18ST_WhetherTheFaultEPNS_9CA1_EventE>
	}
 8007d20:	bf00      	nop
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase>:
	void InvokeStateAction(CStateMachine * sm, CMachineEventBase * data)
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
		SM* pDerivedSm = static_cast<SM*>(sm);    //父辈指针变成子辈
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x18>
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	3b04      	subs	r3, #4
 8007d3e:	e000      	b.n	8007d42 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_WaitForAnsEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x1a>
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
		ED* pDerivedData = static_cast<ED*>(data);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	613b      	str	r3, [r7, #16]
		(pDerivedSm->*Action)(pDerivedData);      //成功用子辈具体状态机调用子辈函数
 8007d48:	6939      	ldr	r1, [r7, #16]
 8007d4a:	6978      	ldr	r0, [r7, #20]
 8007d4c:	f7ff fc6a 	bl	8007624 <_ZN3wyz11A1_Protocol13ST_WaitForAnsEPNS_9CA1_EventE>
	}
 8007d50:	bf00      	nop
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase>:
	void InvokeStateAction(CStateMachine * sm, CMachineEventBase * data)
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
		SM* pDerivedSm = static_cast<SM*>(sm);    //父辈指针变成子辈
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x18>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	3b04      	subs	r3, #4
 8007d6e:	e000      	b.n	8007d72 <_ZN3wyz12CStateActionINS_11A1_ProtocolENS_9CA1_EventEXadL_ZNS1_13ST_BeginStateEPS2_EEE17InvokeStateActionEPNS_13CStateMachineEP17CMachineEventBase+0x1a>
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]
		ED* pDerivedData = static_cast<ED*>(data);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	613b      	str	r3, [r7, #16]
		(pDerivedSm->*Action)(pDerivedData);      //成功用子辈具体状态机调用子辈函数
 8007d78:	6939      	ldr	r1, [r7, #16]
 8007d7a:	6978      	ldr	r0, [r7, #20]
 8007d7c:	f7ff fc26 	bl	80075cc <_ZN3wyz11A1_Protocol13ST_BeginStateEPNS_9CA1_EventE>
	}
 8007d80:	bf00      	nop
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d88:	b5b0      	push	{r4, r5, r7, lr}
 8007d8a:	b08e      	sub	sp, #56	; 0x38
 8007d8c:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8007d8e:	f7f8 fba3 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d92:	f000 f84d 	bl	8007e30 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d96:	f000 f901 	bl	8007f9c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8007d9a:	f000 f8df 	bl	8007f5c <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 8007d9e:	f000 f8af 	bl	8007f00 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  //wyz::CSubject* pSubjectUart4 = new wyz::CUart(&huart4, 100, 20, wyz::CUart::m_ObserverMode);
  wyz::CDevice* pDeviceUart4 = new wyz::CUart(&huart4, 100, 20, wyz::CUart::m_UsingDMAMode);
 8007da2:	2034      	movs	r0, #52	; 0x34
 8007da4:	f000 fad8 	bl	8008358 <_Znwj>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461c      	mov	r4, r3
 8007dac:	2301      	movs	r3, #1
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	2314      	movs	r3, #20
 8007db2:	2264      	movs	r2, #100	; 0x64
 8007db4:	491c      	ldr	r1, [pc, #112]	; (8007e28 <main+0xa0>)
 8007db6:	4620      	mov	r0, r4
 8007db8:	f7fe fc6c 	bl	8006694 <_ZN3wyz5CUartC1EP20__UART_HandleTypeDefmmh>
 8007dbc:	62fc      	str	r4, [r7, #44]	; 0x2c
  wyz::CObserver* pObserverA1_Protocol = new wyz::A1_Protocol(pDeviceUart4);
 8007dbe:	2084      	movs	r0, #132	; 0x84
 8007dc0:	f000 faca 	bl	8008358 <_Znwj>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	461c      	mov	r4, r3
 8007dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f7ff fb02 	bl	80073d4 <_ZN3wyz11A1_ProtocolC1EPNS_7CDeviceE>
 8007dd0:	62bc      	str	r4, [r7, #40]	; 0x28
  wyz::A1_Protocol* pA1_Protocol = static_cast<wyz::A1_Protocol*>(pObserverA1_Protocol);
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
  wyz::CA1_Event* pA1_Event = new wyz::CA1_Event(wyz::A1_Protocol::ExternalEventType::StartSignal);
 8007dd6:	f107 031c 	add.w	r3, r7, #28
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fae9 	bl	80083b2 <_ZNSaIcEC1Ev>
 8007de0:	f107 021c 	add.w	r2, r7, #28
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	4911      	ldr	r1, [pc, #68]	; (8007e2c <main+0xa4>)
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fc45 	bl	8008678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007dee:	1d3d      	adds	r5, r7, #4
 8007df0:	2024      	movs	r0, #36	; 0x24
 8007df2:	f000 fab1 	bl	8008358 <_Znwj>
 8007df6:	4603      	mov	r3, r0
 8007df8:	461c      	mov	r4, r3
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2101      	movs	r1, #1
 8007e00:	4620      	mov	r0, r4
 8007e02:	f7ff f9ab 	bl	800715c <_ZN3wyz9CA1_EventC1EiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007e06:	623c      	str	r4, [r7, #32]
 8007e08:	1d3b      	adds	r3, r7, #4
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fc04 	bl	8008618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007e10:	f107 031c 	add.w	r3, r7, #28
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 facd 	bl	80083b4 <_ZNSaIcED1Ev>
  pA1_Protocol->SetEvent(pA1_Event);
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	6a39      	ldr	r1, [r7, #32]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fa ff3c 	bl	8002c9e <_ZN3wyz13CStateMachine8SetEventEP17CMachineEventBase>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8007e26:	e7fe      	b.n	8007e26 <main+0x9e>
 8007e28:	20000094 	.word	0x20000094
 8007e2c:	0800896c 	.word	0x0800896c

08007e30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b094      	sub	sp, #80	; 0x50
 8007e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e36:	f107 0320 	add.w	r3, r7, #32
 8007e3a:	2230      	movs	r2, #48	; 0x30
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fc7d 	bl	800873e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e44:	f107 030c 	add.w	r3, r7, #12
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	605a      	str	r2, [r3, #4]
 8007e4e:	609a      	str	r2, [r3, #8]
 8007e50:	60da      	str	r2, [r3, #12]
 8007e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e54:	2300      	movs	r3, #0
 8007e56:	60bb      	str	r3, [r7, #8]
 8007e58:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <_Z18SystemClock_Configv+0xc8>)
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	4a26      	ldr	r2, [pc, #152]	; (8007ef8 <_Z18SystemClock_Configv+0xc8>)
 8007e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e62:	6413      	str	r3, [r2, #64]	; 0x40
 8007e64:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <_Z18SystemClock_Configv+0xc8>)
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	60bb      	str	r3, [r7, #8]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e70:	2300      	movs	r3, #0
 8007e72:	607b      	str	r3, [r7, #4]
 8007e74:	4b21      	ldr	r3, [pc, #132]	; (8007efc <_Z18SystemClock_Configv+0xcc>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a20      	ldr	r2, [pc, #128]	; (8007efc <_Z18SystemClock_Configv+0xcc>)
 8007e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	4b1e      	ldr	r3, [pc, #120]	; (8007efc <_Z18SystemClock_Configv+0xcc>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e88:	607b      	str	r3, [r7, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e90:	2301      	movs	r3, #1
 8007e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007e94:	2310      	movs	r3, #16
 8007e96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e9c:	f107 0320 	add.w	r3, r7, #32
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7f9 f9cf 	bl	8001244 <HAL_RCC_OscConfig>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	bf14      	ite	ne
 8007eac:	2301      	movne	r3, #1
 8007eae:	2300      	moveq	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8007eb6:	f000 f8a7 	bl	8008008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007eba:	230f      	movs	r3, #15
 8007ebc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007ece:	f107 030c 	add.w	r3, r7, #12
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7f9 fbf7 	bl	80016c8 <HAL_RCC_ClockConfig>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bf14      	ite	ne
 8007ee0:	2301      	movne	r3, #1
 8007ee2:	2300      	moveq	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8007eea:	f000 f88d 	bl	8008008 <Error_Handler>
  }
}
 8007eee:	bf00      	nop
 8007ef0:	3750      	adds	r7, #80	; 0x50
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	40023800 	.word	0x40023800
 8007efc:	40007000 	.word	0x40007000

08007f00 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007f04:	4b13      	ldr	r3, [pc, #76]	; (8007f54 <_ZL13MX_UART4_Initv+0x54>)
 8007f06:	4a14      	ldr	r2, [pc, #80]	; (8007f58 <_ZL13MX_UART4_Initv+0x58>)
 8007f08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007f0a:	4b12      	ldr	r3, [pc, #72]	; (8007f54 <_ZL13MX_UART4_Initv+0x54>)
 8007f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007f12:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <_ZL13MX_UART4_Initv+0x54>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007f18:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <_ZL13MX_UART4_Initv+0x54>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <_ZL13MX_UART4_Initv+0x54>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007f24:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <_ZL13MX_UART4_Initv+0x54>)
 8007f26:	220c      	movs	r2, #12
 8007f28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f2a:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <_ZL13MX_UART4_Initv+0x54>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f30:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <_ZL13MX_UART4_Initv+0x54>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007f36:	4807      	ldr	r0, [pc, #28]	; (8007f54 <_ZL13MX_UART4_Initv+0x54>)
 8007f38:	f7f9 fd8e 	bl	8001a58 <HAL_UART_Init>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bf14      	ite	ne
 8007f42:	2301      	movne	r3, #1
 8007f44:	2300      	moveq	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8007f4c:	f000 f85c 	bl	8008008 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007f50:	bf00      	nop
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000094 	.word	0x20000094
 8007f58:	40004c00 	.word	0x40004c00

08007f5c <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007f62:	2300      	movs	r3, #0
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	4b0c      	ldr	r3, [pc, #48]	; (8007f98 <_ZL11MX_DMA_Initv+0x3c>)
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	4a0b      	ldr	r2, [pc, #44]	; (8007f98 <_ZL11MX_DMA_Initv+0x3c>)
 8007f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f70:	6313      	str	r3, [r2, #48]	; 0x30
 8007f72:	4b09      	ldr	r3, [pc, #36]	; (8007f98 <_ZL11MX_DMA_Initv+0x3c>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f7a:	607b      	str	r3, [r7, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2100      	movs	r1, #0
 8007f82:	200d      	movs	r0, #13
 8007f84:	f7f8 fbf5 	bl	8000772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8007f88:	200d      	movs	r0, #13
 8007f8a:	f7f8 fc0e 	bl	80007aa <HAL_NVIC_EnableIRQ>

}
 8007f8e:	bf00      	nop
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	40023800 	.word	0x40023800

08007f9c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	4b17      	ldr	r3, [pc, #92]	; (8008004 <_ZL12MX_GPIO_Initv+0x68>)
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007faa:	4a16      	ldr	r2, [pc, #88]	; (8008004 <_ZL12MX_GPIO_Initv+0x68>)
 8007fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8007fb2:	4b14      	ldr	r3, [pc, #80]	; (8008004 <_ZL12MX_GPIO_Initv+0x68>)
 8007fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60bb      	str	r3, [r7, #8]
 8007fc2:	4b10      	ldr	r3, [pc, #64]	; (8008004 <_ZL12MX_GPIO_Initv+0x68>)
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc6:	4a0f      	ldr	r2, [pc, #60]	; (8008004 <_ZL12MX_GPIO_Initv+0x68>)
 8007fc8:	f043 0301 	orr.w	r3, r3, #1
 8007fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8007fce:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <_ZL12MX_GPIO_Initv+0x68>)
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	60bb      	str	r3, [r7, #8]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fda:	2300      	movs	r3, #0
 8007fdc:	607b      	str	r3, [r7, #4]
 8007fde:	4b09      	ldr	r3, [pc, #36]	; (8008004 <_ZL12MX_GPIO_Initv+0x68>)
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe2:	4a08      	ldr	r2, [pc, #32]	; (8008004 <_ZL12MX_GPIO_Initv+0x68>)
 8007fe4:	f043 0302 	orr.w	r3, r3, #2
 8007fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8007fea:	4b06      	ldr	r3, [pc, #24]	; (8008004 <_ZL12MX_GPIO_Initv+0x68>)
 8007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	607b      	str	r3, [r7, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]

}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40023800 	.word	0x40023800

08008008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800800c:	bf00      	nop
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
	...

08008018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800801e:	2300      	movs	r3, #0
 8008020:	607b      	str	r3, [r7, #4]
 8008022:	4b10      	ldr	r3, [pc, #64]	; (8008064 <HAL_MspInit+0x4c>)
 8008024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008026:	4a0f      	ldr	r2, [pc, #60]	; (8008064 <HAL_MspInit+0x4c>)
 8008028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800802c:	6453      	str	r3, [r2, #68]	; 0x44
 800802e:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <HAL_MspInit+0x4c>)
 8008030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008036:	607b      	str	r3, [r7, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800803a:	2300      	movs	r3, #0
 800803c:	603b      	str	r3, [r7, #0]
 800803e:	4b09      	ldr	r3, [pc, #36]	; (8008064 <HAL_MspInit+0x4c>)
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	4a08      	ldr	r2, [pc, #32]	; (8008064 <HAL_MspInit+0x4c>)
 8008044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008048:	6413      	str	r3, [r2, #64]	; 0x40
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <HAL_MspInit+0x4c>)
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40023800 	.word	0x40023800

08008068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	; 0x28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008070:	f107 0314 	add.w	r3, r7, #20
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	605a      	str	r2, [r3, #4]
 800807a:	609a      	str	r2, [r3, #8]
 800807c:	60da      	str	r2, [r3, #12]
 800807e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a34      	ldr	r2, [pc, #208]	; (8008158 <HAL_UART_MspInit+0xf0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d161      	bne.n	800814e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800808a:	2300      	movs	r3, #0
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	4b33      	ldr	r3, [pc, #204]	; (800815c <HAL_UART_MspInit+0xf4>)
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	4a32      	ldr	r2, [pc, #200]	; (800815c <HAL_UART_MspInit+0xf4>)
 8008094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008098:	6413      	str	r3, [r2, #64]	; 0x40
 800809a:	4b30      	ldr	r3, [pc, #192]	; (800815c <HAL_UART_MspInit+0xf4>)
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080a2:	613b      	str	r3, [r7, #16]
 80080a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	4b2c      	ldr	r3, [pc, #176]	; (800815c <HAL_UART_MspInit+0xf4>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	4a2b      	ldr	r2, [pc, #172]	; (800815c <HAL_UART_MspInit+0xf4>)
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	6313      	str	r3, [r2, #48]	; 0x30
 80080b6:	4b29      	ldr	r3, [pc, #164]	; (800815c <HAL_UART_MspInit+0xf4>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80080c2:	2303      	movs	r3, #3
 80080c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c6:	2302      	movs	r3, #2
 80080c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080ca:	2301      	movs	r3, #1
 80080cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080ce:	2303      	movs	r3, #3
 80080d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80080d2:	2308      	movs	r3, #8
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080d6:	f107 0314 	add.w	r3, r7, #20
 80080da:	4619      	mov	r1, r3
 80080dc:	4820      	ldr	r0, [pc, #128]	; (8008160 <HAL_UART_MspInit+0xf8>)
 80080de:	f7f8 ff17 	bl	8000f10 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80080e2:	4b20      	ldr	r3, [pc, #128]	; (8008164 <HAL_UART_MspInit+0xfc>)
 80080e4:	4a20      	ldr	r2, [pc, #128]	; (8008168 <HAL_UART_MspInit+0x100>)
 80080e6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80080e8:	4b1e      	ldr	r3, [pc, #120]	; (8008164 <HAL_UART_MspInit+0xfc>)
 80080ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80080ee:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80080f0:	4b1c      	ldr	r3, [pc, #112]	; (8008164 <HAL_UART_MspInit+0xfc>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80080f6:	4b1b      	ldr	r3, [pc, #108]	; (8008164 <HAL_UART_MspInit+0xfc>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80080fc:	4b19      	ldr	r3, [pc, #100]	; (8008164 <HAL_UART_MspInit+0xfc>)
 80080fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008102:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008104:	4b17      	ldr	r3, [pc, #92]	; (8008164 <HAL_UART_MspInit+0xfc>)
 8008106:	2200      	movs	r2, #0
 8008108:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800810a:	4b16      	ldr	r3, [pc, #88]	; (8008164 <HAL_UART_MspInit+0xfc>)
 800810c:	2200      	movs	r2, #0
 800810e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8008110:	4b14      	ldr	r3, [pc, #80]	; (8008164 <HAL_UART_MspInit+0xfc>)
 8008112:	2200      	movs	r2, #0
 8008114:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008116:	4b13      	ldr	r3, [pc, #76]	; (8008164 <HAL_UART_MspInit+0xfc>)
 8008118:	2200      	movs	r2, #0
 800811a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800811c:	4b11      	ldr	r3, [pc, #68]	; (8008164 <HAL_UART_MspInit+0xfc>)
 800811e:	2200      	movs	r2, #0
 8008120:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008122:	4810      	ldr	r0, [pc, #64]	; (8008164 <HAL_UART_MspInit+0xfc>)
 8008124:	f7f8 fb5c 	bl	80007e0 <HAL_DMA_Init>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800812e:	f7ff ff6b 	bl	8008008 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a0b      	ldr	r2, [pc, #44]	; (8008164 <HAL_UART_MspInit+0xfc>)
 8008136:	635a      	str	r2, [r3, #52]	; 0x34
 8008138:	4a0a      	ldr	r2, [pc, #40]	; (8008164 <HAL_UART_MspInit+0xfc>)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800813e:	2200      	movs	r2, #0
 8008140:	2100      	movs	r1, #0
 8008142:	2034      	movs	r0, #52	; 0x34
 8008144:	f7f8 fb15 	bl	8000772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008148:	2034      	movs	r0, #52	; 0x34
 800814a:	f7f8 fb2e 	bl	80007aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800814e:	bf00      	nop
 8008150:	3728      	adds	r7, #40	; 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	40004c00 	.word	0x40004c00
 800815c:	40023800 	.word	0x40023800
 8008160:	40020000 	.word	0x40020000
 8008164:	200000d4 	.word	0x200000d4
 8008168:	40026040 	.word	0x40026040

0800816c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008170:	bf00      	nop
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800817a:	b480      	push	{r7}
 800817c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800817e:	e7fe      	b.n	800817e <HardFault_Handler+0x4>

08008180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008184:	e7fe      	b.n	8008184 <MemManage_Handler+0x4>

08008186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008186:	b480      	push	{r7}
 8008188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800818a:	e7fe      	b.n	800818a <BusFault_Handler+0x4>

0800818c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008190:	e7fe      	b.n	8008190 <UsageFault_Handler+0x4>

08008192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008192:	b480      	push	{r7}
 8008194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008196:	bf00      	nop
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081ae:	b480      	push	{r7}
 80081b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081b2:	bf00      	nop
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081c0:	f7f8 f9dc 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081c4:	bf00      	nop
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80081cc:	4802      	ldr	r0, [pc, #8]	; (80081d8 <DMA1_Stream2_IRQHandler+0x10>)
 80081ce:	f7f8 fc37 	bl	8000a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80081d2:	bf00      	nop
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	200000d4 	.word	0x200000d4

080081dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80081e0:	4802      	ldr	r0, [pc, #8]	; (80081ec <UART4_IRQHandler+0x10>)
 80081e2:	f7f9 ff4b 	bl	800207c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80081e6:	bf00      	nop
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000094 	.word	0x20000094

080081f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
	return 1;
 80081f4:	2301      	movs	r3, #1
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <_kill>:

int _kill(int pid, int sig)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800820a:	f000 fa53 	bl	80086b4 <__errno>
 800820e:	4602      	mov	r2, r0
 8008210:	2316      	movs	r3, #22
 8008212:	6013      	str	r3, [r2, #0]
	return -1;
 8008214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <_exit>:

void _exit (int status)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008228:	f04f 31ff 	mov.w	r1, #4294967295
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff ffe7 	bl	8008200 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008232:	e7fe      	b.n	8008232 <_exit+0x12>

08008234 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800823c:	4b11      	ldr	r3, [pc, #68]	; (8008284 <_sbrk+0x50>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <_sbrk+0x16>
		heap_end = &end;
 8008244:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <_sbrk+0x50>)
 8008246:	4a10      	ldr	r2, [pc, #64]	; (8008288 <_sbrk+0x54>)
 8008248:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800824a:	4b0e      	ldr	r3, [pc, #56]	; (8008284 <_sbrk+0x50>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008250:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <_sbrk+0x50>)
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4413      	add	r3, r2
 8008258:	466a      	mov	r2, sp
 800825a:	4293      	cmp	r3, r2
 800825c:	d907      	bls.n	800826e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800825e:	f000 fa29 	bl	80086b4 <__errno>
 8008262:	4602      	mov	r2, r0
 8008264:	230c      	movs	r3, #12
 8008266:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008268:	f04f 33ff 	mov.w	r3, #4294967295
 800826c:	e006      	b.n	800827c <_sbrk+0x48>
	}

	heap_end += incr;
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <_sbrk+0x50>)
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4413      	add	r3, r2
 8008276:	4a03      	ldr	r2, [pc, #12]	; (8008284 <_sbrk+0x50>)
 8008278:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800827a:	68fb      	ldr	r3, [r7, #12]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	20000134 	.word	0x20000134
 8008288:	20000150 	.word	0x20000150

0800828c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008290:	4b16      	ldr	r3, [pc, #88]	; (80082ec <SystemInit+0x60>)
 8008292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008296:	4a15      	ldr	r2, [pc, #84]	; (80082ec <SystemInit+0x60>)
 8008298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800829c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80082a0:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <SystemInit+0x64>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a12      	ldr	r2, [pc, #72]	; (80082f0 <SystemInit+0x64>)
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80082ac:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <SystemInit+0x64>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80082b2:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <SystemInit+0x64>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a0e      	ldr	r2, [pc, #56]	; (80082f0 <SystemInit+0x64>)
 80082b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80082bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <SystemInit+0x64>)
 80082c4:	4a0b      	ldr	r2, [pc, #44]	; (80082f4 <SystemInit+0x68>)
 80082c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80082c8:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <SystemInit+0x64>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a08      	ldr	r2, [pc, #32]	; (80082f0 <SystemInit+0x64>)
 80082ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80082d4:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <SystemInit+0x64>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80082da:	4b04      	ldr	r3, [pc, #16]	; (80082ec <SystemInit+0x60>)
 80082dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082e0:	609a      	str	r2, [r3, #8]
#endif
}
 80082e2:	bf00      	nop
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	e000ed00 	.word	0xe000ed00
 80082f0:	40023800 	.word	0x40023800
 80082f4:	24003010 	.word	0x24003010

080082f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80082f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008330 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80082fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80082fe:	e003      	b.n	8008308 <LoopCopyDataInit>

08008300 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008300:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008302:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008304:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008306:	3104      	adds	r1, #4

08008308 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008308:	480b      	ldr	r0, [pc, #44]	; (8008338 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800830a:	4b0c      	ldr	r3, [pc, #48]	; (800833c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800830c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800830e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008310:	d3f6      	bcc.n	8008300 <CopyDataInit>
  ldr  r2, =_sbss
 8008312:	4a0b      	ldr	r2, [pc, #44]	; (8008340 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008314:	e002      	b.n	800831c <LoopFillZerobss>

08008316 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008316:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008318:	f842 3b04 	str.w	r3, [r2], #4

0800831c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800831c:	4b09      	ldr	r3, [pc, #36]	; (8008344 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800831e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008320:	d3f9      	bcc.n	8008316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008322:	f7ff ffb3 	bl	800828c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008326:	f000 f9cb 	bl	80086c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800832a:	f7ff fd2d 	bl	8007d88 <main>
  bx  lr    
 800832e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008330:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008334:	08008ba4 	.word	0x08008ba4
  ldr  r0, =_sdata
 8008338:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800833c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8008340:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8008344:	2000014c 	.word	0x2000014c

08008348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008348:	e7fe      	b.n	8008348 <ADC_IRQHandler>

0800834a <__cxa_pure_virtual>:
 800834a:	b508      	push	{r3, lr}
 800834c:	f000 f82c 	bl	80083a8 <_ZSt9terminatev>

08008350 <_Znaj>:
 8008350:	f000 b802 	b.w	8008358 <_Znwj>

08008354 <_ZdlPvj>:
 8008354:	f000 b81a 	b.w	800838c <_ZdlPv>

08008358 <_Znwj>:
 8008358:	b510      	push	{r4, lr}
 800835a:	2800      	cmp	r0, #0
 800835c:	bf14      	ite	ne
 800835e:	4604      	movne	r4, r0
 8008360:	2401      	moveq	r4, #1
 8008362:	4620      	mov	r0, r4
 8008364:	f000 f9d0 	bl	8008708 <malloc>
 8008368:	b930      	cbnz	r0, 8008378 <_Znwj+0x20>
 800836a:	f000 f807 	bl	800837c <_ZSt15get_new_handlerv>
 800836e:	b908      	cbnz	r0, 8008374 <_Znwj+0x1c>
 8008370:	f000 f998 	bl	80086a4 <abort>
 8008374:	4780      	blx	r0
 8008376:	e7f4      	b.n	8008362 <_Znwj+0xa>
 8008378:	bd10      	pop	{r4, pc}
	...

0800837c <_ZSt15get_new_handlerv>:
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <_ZSt15get_new_handlerv+0xc>)
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	f3bf 8f5b 	dmb	ish
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	20000138 	.word	0x20000138

0800838c <_ZdlPv>:
 800838c:	f000 b9c4 	b.w	8008718 <free>

08008390 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008390:	b508      	push	{r3, lr}
 8008392:	4780      	blx	r0
 8008394:	f000 f986 	bl	80086a4 <abort>

08008398 <_ZSt13get_terminatev>:
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <_ZSt13get_terminatev+0xc>)
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	f3bf 8f5b 	dmb	ish
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	2000000c 	.word	0x2000000c

080083a8 <_ZSt9terminatev>:
 80083a8:	b508      	push	{r3, lr}
 80083aa:	f7ff fff5 	bl	8008398 <_ZSt13get_terminatev>
 80083ae:	f7ff ffef 	bl	8008390 <_ZN10__cxxabiv111__terminateEPFvvE>

080083b2 <_ZNSaIcEC1Ev>:
 80083b2:	4770      	bx	lr

080083b4 <_ZNSaIcED1Ev>:
 80083b4:	4770      	bx	lr

080083b6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 80083b6:	684b      	ldr	r3, [r1, #4]
 80083b8:	6043      	str	r3, [r0, #4]
 80083ba:	684b      	ldr	r3, [r1, #4]
 80083bc:	6001      	str	r1, [r0, #0]
 80083be:	6018      	str	r0, [r3, #0]
 80083c0:	6048      	str	r0, [r1, #4]
 80083c2:	4770      	bx	lr

080083c4 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 80083c4:	e9d0 3200 	ldrd	r3, r2, [r0]
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	605a      	str	r2, [r3, #4]
 80083cc:	4770      	bx	lr

080083ce <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80083ce:	68c3      	ldr	r3, [r0, #12]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	60c2      	str	r2, [r0, #12]
 80083d4:	b102      	cbz	r2, 80083d8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
 80083d6:	6050      	str	r0, [r2, #4]
 80083d8:	6842      	ldr	r2, [r0, #4]
 80083da:	605a      	str	r2, [r3, #4]
 80083dc:	680a      	ldr	r2, [r1, #0]
 80083de:	4282      	cmp	r2, r0
 80083e0:	d103      	bne.n	80083ea <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1c>
 80083e2:	600b      	str	r3, [r1, #0]
 80083e4:	6098      	str	r0, [r3, #8]
 80083e6:	6043      	str	r3, [r0, #4]
 80083e8:	4770      	bx	lr
 80083ea:	6842      	ldr	r2, [r0, #4]
 80083ec:	6891      	ldr	r1, [r2, #8]
 80083ee:	4281      	cmp	r1, r0
 80083f0:	bf0c      	ite	eq
 80083f2:	6093      	streq	r3, [r2, #8]
 80083f4:	60d3      	strne	r3, [r2, #12]
 80083f6:	e7f5      	b.n	80083e4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x16>

080083f8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80083f8:	6883      	ldr	r3, [r0, #8]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	6082      	str	r2, [r0, #8]
 80083fe:	b102      	cbz	r2, 8008402 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
 8008400:	6050      	str	r0, [r2, #4]
 8008402:	6842      	ldr	r2, [r0, #4]
 8008404:	605a      	str	r2, [r3, #4]
 8008406:	680a      	ldr	r2, [r1, #0]
 8008408:	4282      	cmp	r2, r0
 800840a:	d103      	bne.n	8008414 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1c>
 800840c:	600b      	str	r3, [r1, #0]
 800840e:	60d8      	str	r0, [r3, #12]
 8008410:	6043      	str	r3, [r0, #4]
 8008412:	4770      	bx	lr
 8008414:	6842      	ldr	r2, [r0, #4]
 8008416:	68d1      	ldr	r1, [r2, #12]
 8008418:	4281      	cmp	r1, r0
 800841a:	bf0c      	ite	eq
 800841c:	60d3      	streq	r3, [r2, #12]
 800841e:	6093      	strne	r3, [r2, #8]
 8008420:	e7f5      	b.n	800840e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x16>

08008422 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8008422:	7803      	ldrb	r3, [r0, #0]
 8008424:	b933      	cbnz	r3, 8008434 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8008426:	6843      	ldr	r3, [r0, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4283      	cmp	r3, r0
 800842c:	d102      	bne.n	8008434 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	4618      	mov	r0, r3
 8008432:	4770      	bx	lr
 8008434:	6883      	ldr	r3, [r0, #8]
 8008436:	b123      	cbz	r3, 8008442 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	2a00      	cmp	r2, #0
 800843c:	d0f8      	beq.n	8008430 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800843e:	4613      	mov	r3, r2
 8008440:	e7fa      	b.n	8008438 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8008442:	6843      	ldr	r3, [r0, #4]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	4282      	cmp	r2, r0
 8008448:	d1f2      	bne.n	8008430 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800844a:	4618      	mov	r0, r3
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	e7f9      	b.n	8008444 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08008450 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8008450:	68c3      	ldr	r3, [r0, #12]
 8008452:	b11b      	cbz	r3, 800845c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xc>
 8008454:	689a      	ldr	r2, [r3, #8]
 8008456:	b16a      	cbz	r2, 8008474 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x24>
 8008458:	4613      	mov	r3, r2
 800845a:	e7fb      	b.n	8008454 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800845c:	6842      	ldr	r2, [r0, #4]
 800845e:	4603      	mov	r3, r0
 8008460:	68d1      	ldr	r1, [r2, #12]
 8008462:	4299      	cmp	r1, r3
 8008464:	d102      	bne.n	800846c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8008466:	4613      	mov	r3, r2
 8008468:	6852      	ldr	r2, [r2, #4]
 800846a:	e7f9      	b.n	8008460 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800846c:	68d9      	ldr	r1, [r3, #12]
 800846e:	428a      	cmp	r2, r1
 8008470:	bf18      	it	ne
 8008472:	4613      	movne	r3, r2
 8008474:	4618      	mov	r0, r3
 8008476:	4770      	bx	lr

08008478 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8008478:	f7ff bfd3 	b.w	8008422 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0800847c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	461f      	mov	r7, r3
 8008482:	f103 0904 	add.w	r9, r3, #4
 8008486:	2300      	movs	r3, #0
 8008488:	460c      	mov	r4, r1
 800848a:	604a      	str	r2, [r1, #4]
 800848c:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8008490:	700b      	strb	r3, [r1, #0]
 8008492:	b318      	cbz	r0, 80084dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x60>
 8008494:	4297      	cmp	r7, r2
 8008496:	6091      	str	r1, [r2, #8]
 8008498:	d11b      	bne.n	80084d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x56>
 800849a:	6079      	str	r1, [r7, #4]
 800849c:	60fc      	str	r4, [r7, #12]
 800849e:	f04f 0801 	mov.w	r8, #1
 80084a2:	f04f 0a00 	mov.w	sl, #0
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	d045      	beq.n	8008538 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 80084ac:	6866      	ldr	r6, [r4, #4]
 80084ae:	7832      	ldrb	r2, [r6, #0]
 80084b0:	2a00      	cmp	r2, #0
 80084b2:	d141      	bne.n	8008538 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 80084b4:	6875      	ldr	r5, [r6, #4]
 80084b6:	68ab      	ldr	r3, [r5, #8]
 80084b8:	429e      	cmp	r6, r3
 80084ba:	d127      	bne.n	800850c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x90>
 80084bc:	68eb      	ldr	r3, [r5, #12]
 80084be:	b193      	cbz	r3, 80084e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6a>
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	b982      	cbnz	r2, 80084e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6a>
 80084c4:	f886 8000 	strb.w	r8, [r6]
 80084c8:	f883 8000 	strb.w	r8, [r3]
 80084cc:	702a      	strb	r2, [r5, #0]
 80084ce:	462c      	mov	r4, r5
 80084d0:	e7e9      	b.n	80084a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d1e2      	bne.n	800849e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	e7e0      	b.n	800849e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80084dc:	60d1      	str	r1, [r2, #12]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d1dc      	bne.n	800849e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80084e4:	e7da      	b.n	800849c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80084e6:	68f3      	ldr	r3, [r6, #12]
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	d104      	bne.n	80084f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7a>
 80084ec:	4649      	mov	r1, r9
 80084ee:	4630      	mov	r0, r6
 80084f0:	f7ff ff6d 	bl	80083ce <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80084f4:	4634      	mov	r4, r6
 80084f6:	6863      	ldr	r3, [r4, #4]
 80084f8:	4649      	mov	r1, r9
 80084fa:	f883 8000 	strb.w	r8, [r3]
 80084fe:	4628      	mov	r0, r5
 8008500:	f885 a000 	strb.w	sl, [r5]
 8008504:	f7ff ff78 	bl	80083f8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8008508:	4625      	mov	r5, r4
 800850a:	e7e0      	b.n	80084ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x52>
 800850c:	b113      	cbz	r3, 8008514 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x98>
 800850e:	781a      	ldrb	r2, [r3, #0]
 8008510:	2a00      	cmp	r2, #0
 8008512:	d0d7      	beq.n	80084c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x48>
 8008514:	68b3      	ldr	r3, [r6, #8]
 8008516:	42a3      	cmp	r3, r4
 8008518:	d104      	bne.n	8008524 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa8>
 800851a:	4649      	mov	r1, r9
 800851c:	4630      	mov	r0, r6
 800851e:	f7ff ff6b 	bl	80083f8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8008522:	4634      	mov	r4, r6
 8008524:	6863      	ldr	r3, [r4, #4]
 8008526:	4649      	mov	r1, r9
 8008528:	f883 8000 	strb.w	r8, [r3]
 800852c:	4628      	mov	r0, r5
 800852e:	f885 a000 	strb.w	sl, [r5]
 8008532:	f7ff ff4c 	bl	80083ce <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8008536:	e7e7      	b.n	8008508 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8c>
 8008538:	2201      	movs	r2, #1
 800853a:	701a      	strb	r2, [r3, #0]
 800853c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008540 <_ZSt17__throw_bad_allocv>:
 8008540:	b508      	push	{r3, lr}
 8008542:	f000 f8af 	bl	80086a4 <abort>

08008546 <_ZSt19__throw_logic_errorPKc>:
 8008546:	b508      	push	{r3, lr}
 8008548:	f000 f8ac 	bl	80086a4 <abort>

0800854c <_ZSt20__throw_length_errorPKc>:
 800854c:	b508      	push	{r3, lr}
 800854e:	f000 f8a9 	bl	80086a4 <abort>

08008552 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8008552:	b10a      	cbz	r2, 8008558 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8008554:	f000 b8e8 	b.w	8008728 <memcpy>
 8008558:	4770      	bx	lr
	...

0800855c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800855c:	b508      	push	{r3, lr}
 800855e:	680b      	ldr	r3, [r1, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	da02      	bge.n	800856a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8008564:	4809      	ldr	r0, [pc, #36]	; (800858c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8008566:	f7ff fff1 	bl	800854c <_ZSt20__throw_length_errorPKc>
 800856a:	4293      	cmp	r3, r2
 800856c:	d908      	bls.n	8008580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800856e:	0052      	lsls	r2, r2, #1
 8008570:	4293      	cmp	r3, r2
 8008572:	d205      	bcs.n	8008580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8008574:	2a00      	cmp	r2, #0
 8008576:	bfb6      	itet	lt
 8008578:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800857c:	600a      	strge	r2, [r1, #0]
 800857e:	600b      	strlt	r3, [r1, #0]
 8008580:	6808      	ldr	r0, [r1, #0]
 8008582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008586:	3001      	adds	r0, #1
 8008588:	f7ff bee6 	b.w	8008358 <_Znwj>
 800858c:	08008b76 	.word	0x08008b76

08008590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008590:	4603      	mov	r3, r0
 8008592:	f853 0b08 	ldr.w	r0, [r3], #8
 8008596:	4298      	cmp	r0, r3
 8008598:	d001      	beq.n	800859e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800859a:	f7ff bef7 	b.w	800838c <_ZdlPv>
 800859e:	4770      	bx	lr

080085a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80085a0:	2a01      	cmp	r2, #1
 80085a2:	b510      	push	{r4, lr}
 80085a4:	d102      	bne.n	80085ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80085a6:	780a      	ldrb	r2, [r1, #0]
 80085a8:	7002      	strb	r2, [r0, #0]
 80085aa:	bd10      	pop	{r4, pc}
 80085ac:	f7ff ffd1 	bl	8008552 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80085b0:	e7fb      	b.n	80085aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080085b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80085b2:	b508      	push	{r3, lr}
 80085b4:	1a52      	subs	r2, r2, r1
 80085b6:	f7ff fff3 	bl	80085a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80085ba:	bd08      	pop	{r3, pc}

080085bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80085bc:	4288      	cmp	r0, r1
 80085be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085c0:	4604      	mov	r4, r0
 80085c2:	460e      	mov	r6, r1
 80085c4:	d01f      	beq.n	8008606 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4a>
 80085c6:	6802      	ldr	r2, [r0, #0]
 80085c8:	684d      	ldr	r5, [r1, #4]
 80085ca:	f100 0308 	add.w	r3, r0, #8
 80085ce:	429a      	cmp	r2, r3
 80085d0:	bf14      	ite	ne
 80085d2:	6882      	ldrne	r2, [r0, #8]
 80085d4:	220f      	moveq	r2, #15
 80085d6:	42aa      	cmp	r2, r5
 80085d8:	d20b      	bcs.n	80085f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 80085da:	a902      	add	r1, sp, #8
 80085dc:	f841 5d04 	str.w	r5, [r1, #-4]!
 80085e0:	f7ff ffbc 	bl	800855c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80085e4:	4607      	mov	r7, r0
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7ff ffd2 	bl	8008590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	6027      	str	r7, [r4, #0]
 80085f0:	60a3      	str	r3, [r4, #8]
 80085f2:	b125      	cbz	r5, 80085fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x42>
 80085f4:	462a      	mov	r2, r5
 80085f6:	6831      	ldr	r1, [r6, #0]
 80085f8:	6820      	ldr	r0, [r4, #0]
 80085fa:	f7ff ffd1 	bl	80085a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	6065      	str	r5, [r4, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	555a      	strb	r2, [r3, r5]
 8008606:	b003      	add	sp, #12
 8008608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800860a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800860a:	f100 0208 	add.w	r2, r0, #8
 800860e:	6002      	str	r2, [r0, #0]
 8008610:	2200      	movs	r2, #0
 8008612:	6042      	str	r2, [r0, #4]
 8008614:	7202      	strb	r2, [r0, #8]
 8008616:	4770      	bx	lr

08008618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8008618:	b510      	push	{r4, lr}
 800861a:	4604      	mov	r4, r0
 800861c:	f7ff ffb8 	bl	8008590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008620:	4620      	mov	r0, r4
 8008622:	bd10      	pop	{r4, pc}

08008624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8008624:	b510      	push	{r4, lr}
 8008626:	4604      	mov	r4, r0
 8008628:	f7ff ffc8 	bl	80085bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800862c:	4620      	mov	r0, r4
 800862e:	bd10      	pop	{r4, pc}

08008630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8008630:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008632:	4604      	mov	r4, r0
 8008634:	4616      	mov	r6, r2
 8008636:	460d      	mov	r5, r1
 8008638:	b919      	cbnz	r1, 8008642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800863a:	b112      	cbz	r2, 8008642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800863c:	480d      	ldr	r0, [pc, #52]	; (8008674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800863e:	f7ff ff82 	bl	8008546 <_ZSt19__throw_logic_errorPKc>
 8008642:	1b73      	subs	r3, r6, r5
 8008644:	2b0f      	cmp	r3, #15
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	d907      	bls.n	800865a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800864a:	2200      	movs	r2, #0
 800864c:	a901      	add	r1, sp, #4
 800864e:	4620      	mov	r0, r4
 8008650:	f7ff ff84 	bl	800855c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	6020      	str	r0, [r4, #0]
 8008658:	60a3      	str	r3, [r4, #8]
 800865a:	4632      	mov	r2, r6
 800865c:	4629      	mov	r1, r5
 800865e:	6820      	ldr	r0, [r4, #0]
 8008660:	f7ff ffa7 	bl	80085b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8008664:	9b01      	ldr	r3, [sp, #4]
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	2100      	movs	r1, #0
 800866c:	54d1      	strb	r1, [r2, r3]
 800866e:	b002      	add	sp, #8
 8008670:	bd70      	pop	{r4, r5, r6, pc}
 8008672:	bf00      	nop
 8008674:	08008b4c 	.word	0x08008b4c

08008678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	f100 0308 	add.w	r3, r0, #8
 800867e:	4604      	mov	r4, r0
 8008680:	6003      	str	r3, [r0, #0]
 8008682:	460d      	mov	r5, r1
 8008684:	b159      	cbz	r1, 800869e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8008686:	4608      	mov	r0, r1
 8008688:	f7f7 fd9e 	bl	80001c8 <strlen>
 800868c:	182a      	adds	r2, r5, r0
 800868e:	4620      	mov	r0, r4
 8008690:	f04f 0300 	mov.w	r3, #0
 8008694:	4629      	mov	r1, r5
 8008696:	f7ff ffcb 	bl	8008630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800869a:	4620      	mov	r0, r4
 800869c:	bd38      	pop	{r3, r4, r5, pc}
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	e7f4      	b.n	800868e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080086a4 <abort>:
 80086a4:	b508      	push	{r3, lr}
 80086a6:	2006      	movs	r0, #6
 80086a8:	f000 f932 	bl	8008910 <raise>
 80086ac:	2001      	movs	r0, #1
 80086ae:	f7ff fdb7 	bl	8008220 <_exit>
	...

080086b4 <__errno>:
 80086b4:	4b01      	ldr	r3, [pc, #4]	; (80086bc <__errno+0x8>)
 80086b6:	6818      	ldr	r0, [r3, #0]
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	20000010 	.word	0x20000010

080086c0 <__libc_init_array>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	4e0d      	ldr	r6, [pc, #52]	; (80086f8 <__libc_init_array+0x38>)
 80086c4:	4c0d      	ldr	r4, [pc, #52]	; (80086fc <__libc_init_array+0x3c>)
 80086c6:	1ba4      	subs	r4, r4, r6
 80086c8:	10a4      	asrs	r4, r4, #2
 80086ca:	2500      	movs	r5, #0
 80086cc:	42a5      	cmp	r5, r4
 80086ce:	d109      	bne.n	80086e4 <__libc_init_array+0x24>
 80086d0:	4e0b      	ldr	r6, [pc, #44]	; (8008700 <__libc_init_array+0x40>)
 80086d2:	4c0c      	ldr	r4, [pc, #48]	; (8008704 <__libc_init_array+0x44>)
 80086d4:	f000 f93a 	bl	800894c <_init>
 80086d8:	1ba4      	subs	r4, r4, r6
 80086da:	10a4      	asrs	r4, r4, #2
 80086dc:	2500      	movs	r5, #0
 80086de:	42a5      	cmp	r5, r4
 80086e0:	d105      	bne.n	80086ee <__libc_init_array+0x2e>
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086e8:	4798      	blx	r3
 80086ea:	3501      	adds	r5, #1
 80086ec:	e7ee      	b.n	80086cc <__libc_init_array+0xc>
 80086ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086f2:	4798      	blx	r3
 80086f4:	3501      	adds	r5, #1
 80086f6:	e7f2      	b.n	80086de <__libc_init_array+0x1e>
 80086f8:	08008b98 	.word	0x08008b98
 80086fc:	08008b98 	.word	0x08008b98
 8008700:	08008b98 	.word	0x08008b98
 8008704:	08008ba0 	.word	0x08008ba0

08008708 <malloc>:
 8008708:	4b02      	ldr	r3, [pc, #8]	; (8008714 <malloc+0xc>)
 800870a:	4601      	mov	r1, r0
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	f000 b86d 	b.w	80087ec <_malloc_r>
 8008712:	bf00      	nop
 8008714:	20000010 	.word	0x20000010

08008718 <free>:
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <free+0xc>)
 800871a:	4601      	mov	r1, r0
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	f000 b817 	b.w	8008750 <_free_r>
 8008722:	bf00      	nop
 8008724:	20000010 	.word	0x20000010

08008728 <memcpy>:
 8008728:	b510      	push	{r4, lr}
 800872a:	1e43      	subs	r3, r0, #1
 800872c:	440a      	add	r2, r1
 800872e:	4291      	cmp	r1, r2
 8008730:	d100      	bne.n	8008734 <memcpy+0xc>
 8008732:	bd10      	pop	{r4, pc}
 8008734:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800873c:	e7f7      	b.n	800872e <memcpy+0x6>

0800873e <memset>:
 800873e:	4402      	add	r2, r0
 8008740:	4603      	mov	r3, r0
 8008742:	4293      	cmp	r3, r2
 8008744:	d100      	bne.n	8008748 <memset+0xa>
 8008746:	4770      	bx	lr
 8008748:	f803 1b01 	strb.w	r1, [r3], #1
 800874c:	e7f9      	b.n	8008742 <memset+0x4>
	...

08008750 <_free_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4605      	mov	r5, r0
 8008754:	2900      	cmp	r1, #0
 8008756:	d045      	beq.n	80087e4 <_free_r+0x94>
 8008758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800875c:	1f0c      	subs	r4, r1, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfb8      	it	lt
 8008762:	18e4      	addlt	r4, r4, r3
 8008764:	f000 f8f0 	bl	8008948 <__malloc_lock>
 8008768:	4a1f      	ldr	r2, [pc, #124]	; (80087e8 <_free_r+0x98>)
 800876a:	6813      	ldr	r3, [r2, #0]
 800876c:	4610      	mov	r0, r2
 800876e:	b933      	cbnz	r3, 800877e <_free_r+0x2e>
 8008770:	6063      	str	r3, [r4, #4]
 8008772:	6014      	str	r4, [r2, #0]
 8008774:	4628      	mov	r0, r5
 8008776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800877a:	f000 b8e6 	b.w	800894a <__malloc_unlock>
 800877e:	42a3      	cmp	r3, r4
 8008780:	d90c      	bls.n	800879c <_free_r+0x4c>
 8008782:	6821      	ldr	r1, [r4, #0]
 8008784:	1862      	adds	r2, r4, r1
 8008786:	4293      	cmp	r3, r2
 8008788:	bf04      	itt	eq
 800878a:	681a      	ldreq	r2, [r3, #0]
 800878c:	685b      	ldreq	r3, [r3, #4]
 800878e:	6063      	str	r3, [r4, #4]
 8008790:	bf04      	itt	eq
 8008792:	1852      	addeq	r2, r2, r1
 8008794:	6022      	streq	r2, [r4, #0]
 8008796:	6004      	str	r4, [r0, #0]
 8008798:	e7ec      	b.n	8008774 <_free_r+0x24>
 800879a:	4613      	mov	r3, r2
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	b10a      	cbz	r2, 80087a4 <_free_r+0x54>
 80087a0:	42a2      	cmp	r2, r4
 80087a2:	d9fa      	bls.n	800879a <_free_r+0x4a>
 80087a4:	6819      	ldr	r1, [r3, #0]
 80087a6:	1858      	adds	r0, r3, r1
 80087a8:	42a0      	cmp	r0, r4
 80087aa:	d10b      	bne.n	80087c4 <_free_r+0x74>
 80087ac:	6820      	ldr	r0, [r4, #0]
 80087ae:	4401      	add	r1, r0
 80087b0:	1858      	adds	r0, r3, r1
 80087b2:	4282      	cmp	r2, r0
 80087b4:	6019      	str	r1, [r3, #0]
 80087b6:	d1dd      	bne.n	8008774 <_free_r+0x24>
 80087b8:	6810      	ldr	r0, [r2, #0]
 80087ba:	6852      	ldr	r2, [r2, #4]
 80087bc:	605a      	str	r2, [r3, #4]
 80087be:	4401      	add	r1, r0
 80087c0:	6019      	str	r1, [r3, #0]
 80087c2:	e7d7      	b.n	8008774 <_free_r+0x24>
 80087c4:	d902      	bls.n	80087cc <_free_r+0x7c>
 80087c6:	230c      	movs	r3, #12
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	e7d3      	b.n	8008774 <_free_r+0x24>
 80087cc:	6820      	ldr	r0, [r4, #0]
 80087ce:	1821      	adds	r1, r4, r0
 80087d0:	428a      	cmp	r2, r1
 80087d2:	bf04      	itt	eq
 80087d4:	6811      	ldreq	r1, [r2, #0]
 80087d6:	6852      	ldreq	r2, [r2, #4]
 80087d8:	6062      	str	r2, [r4, #4]
 80087da:	bf04      	itt	eq
 80087dc:	1809      	addeq	r1, r1, r0
 80087de:	6021      	streq	r1, [r4, #0]
 80087e0:	605c      	str	r4, [r3, #4]
 80087e2:	e7c7      	b.n	8008774 <_free_r+0x24>
 80087e4:	bd38      	pop	{r3, r4, r5, pc}
 80087e6:	bf00      	nop
 80087e8:	2000013c 	.word	0x2000013c

080087ec <_malloc_r>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	1ccd      	adds	r5, r1, #3
 80087f0:	f025 0503 	bic.w	r5, r5, #3
 80087f4:	3508      	adds	r5, #8
 80087f6:	2d0c      	cmp	r5, #12
 80087f8:	bf38      	it	cc
 80087fa:	250c      	movcc	r5, #12
 80087fc:	2d00      	cmp	r5, #0
 80087fe:	4606      	mov	r6, r0
 8008800:	db01      	blt.n	8008806 <_malloc_r+0x1a>
 8008802:	42a9      	cmp	r1, r5
 8008804:	d903      	bls.n	800880e <_malloc_r+0x22>
 8008806:	230c      	movs	r3, #12
 8008808:	6033      	str	r3, [r6, #0]
 800880a:	2000      	movs	r0, #0
 800880c:	bd70      	pop	{r4, r5, r6, pc}
 800880e:	f000 f89b 	bl	8008948 <__malloc_lock>
 8008812:	4a21      	ldr	r2, [pc, #132]	; (8008898 <_malloc_r+0xac>)
 8008814:	6814      	ldr	r4, [r2, #0]
 8008816:	4621      	mov	r1, r4
 8008818:	b991      	cbnz	r1, 8008840 <_malloc_r+0x54>
 800881a:	4c20      	ldr	r4, [pc, #128]	; (800889c <_malloc_r+0xb0>)
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	b91b      	cbnz	r3, 8008828 <_malloc_r+0x3c>
 8008820:	4630      	mov	r0, r6
 8008822:	f000 f83d 	bl	80088a0 <_sbrk_r>
 8008826:	6020      	str	r0, [r4, #0]
 8008828:	4629      	mov	r1, r5
 800882a:	4630      	mov	r0, r6
 800882c:	f000 f838 	bl	80088a0 <_sbrk_r>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d124      	bne.n	800887e <_malloc_r+0x92>
 8008834:	230c      	movs	r3, #12
 8008836:	6033      	str	r3, [r6, #0]
 8008838:	4630      	mov	r0, r6
 800883a:	f000 f886 	bl	800894a <__malloc_unlock>
 800883e:	e7e4      	b.n	800880a <_malloc_r+0x1e>
 8008840:	680b      	ldr	r3, [r1, #0]
 8008842:	1b5b      	subs	r3, r3, r5
 8008844:	d418      	bmi.n	8008878 <_malloc_r+0x8c>
 8008846:	2b0b      	cmp	r3, #11
 8008848:	d90f      	bls.n	800886a <_malloc_r+0x7e>
 800884a:	600b      	str	r3, [r1, #0]
 800884c:	50cd      	str	r5, [r1, r3]
 800884e:	18cc      	adds	r4, r1, r3
 8008850:	4630      	mov	r0, r6
 8008852:	f000 f87a 	bl	800894a <__malloc_unlock>
 8008856:	f104 000b 	add.w	r0, r4, #11
 800885a:	1d23      	adds	r3, r4, #4
 800885c:	f020 0007 	bic.w	r0, r0, #7
 8008860:	1ac3      	subs	r3, r0, r3
 8008862:	d0d3      	beq.n	800880c <_malloc_r+0x20>
 8008864:	425a      	negs	r2, r3
 8008866:	50e2      	str	r2, [r4, r3]
 8008868:	e7d0      	b.n	800880c <_malloc_r+0x20>
 800886a:	428c      	cmp	r4, r1
 800886c:	684b      	ldr	r3, [r1, #4]
 800886e:	bf16      	itet	ne
 8008870:	6063      	strne	r3, [r4, #4]
 8008872:	6013      	streq	r3, [r2, #0]
 8008874:	460c      	movne	r4, r1
 8008876:	e7eb      	b.n	8008850 <_malloc_r+0x64>
 8008878:	460c      	mov	r4, r1
 800887a:	6849      	ldr	r1, [r1, #4]
 800887c:	e7cc      	b.n	8008818 <_malloc_r+0x2c>
 800887e:	1cc4      	adds	r4, r0, #3
 8008880:	f024 0403 	bic.w	r4, r4, #3
 8008884:	42a0      	cmp	r0, r4
 8008886:	d005      	beq.n	8008894 <_malloc_r+0xa8>
 8008888:	1a21      	subs	r1, r4, r0
 800888a:	4630      	mov	r0, r6
 800888c:	f000 f808 	bl	80088a0 <_sbrk_r>
 8008890:	3001      	adds	r0, #1
 8008892:	d0cf      	beq.n	8008834 <_malloc_r+0x48>
 8008894:	6025      	str	r5, [r4, #0]
 8008896:	e7db      	b.n	8008850 <_malloc_r+0x64>
 8008898:	2000013c 	.word	0x2000013c
 800889c:	20000140 	.word	0x20000140

080088a0 <_sbrk_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4c06      	ldr	r4, [pc, #24]	; (80088bc <_sbrk_r+0x1c>)
 80088a4:	2300      	movs	r3, #0
 80088a6:	4605      	mov	r5, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	f7ff fcc2 	bl	8008234 <_sbrk>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_sbrk_r+0x1a>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_sbrk_r+0x1a>
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20000148 	.word	0x20000148

080088c0 <_raise_r>:
 80088c0:	291f      	cmp	r1, #31
 80088c2:	b538      	push	{r3, r4, r5, lr}
 80088c4:	4604      	mov	r4, r0
 80088c6:	460d      	mov	r5, r1
 80088c8:	d904      	bls.n	80088d4 <_raise_r+0x14>
 80088ca:	2316      	movs	r3, #22
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088d6:	b112      	cbz	r2, 80088de <_raise_r+0x1e>
 80088d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088dc:	b94b      	cbnz	r3, 80088f2 <_raise_r+0x32>
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 f830 	bl	8008944 <_getpid_r>
 80088e4:	462a      	mov	r2, r5
 80088e6:	4601      	mov	r1, r0
 80088e8:	4620      	mov	r0, r4
 80088ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ee:	f000 b817 	b.w	8008920 <_kill_r>
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d00a      	beq.n	800890c <_raise_r+0x4c>
 80088f6:	1c59      	adds	r1, r3, #1
 80088f8:	d103      	bne.n	8008902 <_raise_r+0x42>
 80088fa:	2316      	movs	r3, #22
 80088fc:	6003      	str	r3, [r0, #0]
 80088fe:	2001      	movs	r0, #1
 8008900:	e7e7      	b.n	80088d2 <_raise_r+0x12>
 8008902:	2400      	movs	r4, #0
 8008904:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008908:	4628      	mov	r0, r5
 800890a:	4798      	blx	r3
 800890c:	2000      	movs	r0, #0
 800890e:	e7e0      	b.n	80088d2 <_raise_r+0x12>

08008910 <raise>:
 8008910:	4b02      	ldr	r3, [pc, #8]	; (800891c <raise+0xc>)
 8008912:	4601      	mov	r1, r0
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	f7ff bfd3 	b.w	80088c0 <_raise_r>
 800891a:	bf00      	nop
 800891c:	20000010 	.word	0x20000010

08008920 <_kill_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4c07      	ldr	r4, [pc, #28]	; (8008940 <_kill_r+0x20>)
 8008924:	2300      	movs	r3, #0
 8008926:	4605      	mov	r5, r0
 8008928:	4608      	mov	r0, r1
 800892a:	4611      	mov	r1, r2
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	f7ff fc67 	bl	8008200 <_kill>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d102      	bne.n	800893c <_kill_r+0x1c>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	b103      	cbz	r3, 800893c <_kill_r+0x1c>
 800893a:	602b      	str	r3, [r5, #0]
 800893c:	bd38      	pop	{r3, r4, r5, pc}
 800893e:	bf00      	nop
 8008940:	20000148 	.word	0x20000148

08008944 <_getpid_r>:
 8008944:	f7ff bc54 	b.w	80081f0 <_getpid>

08008948 <__malloc_lock>:
 8008948:	4770      	bx	lr

0800894a <__malloc_unlock>:
 800894a:	4770      	bx	lr

0800894c <_init>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr

08008958 <_fini>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr
